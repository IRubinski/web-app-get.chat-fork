[{"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\index.js":"1","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\reportWebVitals.js":"2","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\App.js":"3","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Login.js":"4","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Chat.js":"5","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Sidebar.js":"6","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SidebarChat.js":"7","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessage.js":"8","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Main.js":"9","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\AppTheme.js":"10","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\Helpers.js":"11","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\Constants.js":"12","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\AvatarStyles.js":"13","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ChatMessageClass.js":"14","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\AttachmentTypesMenu.js":"15","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ContactClass.js":"16","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatFooterExpired.js":"17","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\TemplateMessages.js":"18","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\TemplateMessageClass.js":"19","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatFooter.js":"20","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatHeader.js":"21","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\UnseenMessageClass.js":"22","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\DateHelpers.js":"23","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SearchMessage.js":"24","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SearchBar.js":"25","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageOptionsMenu.js":"26","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\CreateTemplate.js":"27","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SearchMessageResult.js":"28","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ContactDetails.js":"29","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SidebarContactResult.js":"30","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ChatClass.js":"31","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\MessageDateIndicator.js":"32","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\LoadingScreen.js":"33","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\PreviewSendMedia.js":"34","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\FileInput.js":"35","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\FileHelpers.js":"36","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ChosenFileClass.js":"37","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\hooks\\useForceUpdate.js":"38","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageTypeIcon.js":"39","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\VoiceRecorder.js":"40","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\VoiceRecord.js":"41","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\recorder\\worker.js":"42","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ContextChatMessage.js":"43","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageTypeLabel.js":"44","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageShortContent.js":"45","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SendTemplateMessage.js":"46","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\BusinessProfile.js":"47","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageVideo.js":"48","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageImage.js":"49","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageDocument.js":"50","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\PreviewMedia.js":"51","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChangePasswordDialog.js":"52","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageVoice.js":"53","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageTemplate.js":"54"},{"size":493,"mtime":1611658611905,"results":"55","hashOfConfig":"56"},{"size":362,"mtime":499162500000,"results":"57","hashOfConfig":"56"},{"size":794,"mtime":1615904185249,"results":"58","hashOfConfig":"56"},{"size":4954,"mtime":1615972038143,"results":"59","hashOfConfig":"56"},{"size":32055,"mtime":1615896202057,"results":"60","hashOfConfig":"56"},{"size":13414,"mtime":1615972198411,"results":"61","hashOfConfig":"56"},{"size":6167,"mtime":1615800377703,"results":"62","hashOfConfig":"56"},{"size":4839,"mtime":1615900737154,"results":"63","hashOfConfig":"56"},{"size":13326,"mtime":1615972230066,"results":"64","hashOfConfig":"56"},{"size":470,"mtime":1614783203762,"results":"65","hashOfConfig":"56"},{"size":7680,"mtime":1615883428860,"results":"66","hashOfConfig":"56"},{"size":1922,"mtime":1615973421716,"results":"67","hashOfConfig":"56"},{"size":3190,"mtime":1615884022638,"results":"68","hashOfConfig":"56"},{"size":7030,"mtime":1615883834114,"results":"69","hashOfConfig":"56"},{"size":1144,"mtime":1613394017720,"results":"70","hashOfConfig":"56"},{"size":938,"mtime":1615884240407,"results":"71","hashOfConfig":"56"},{"size":311,"mtime":1615373476481,"results":"72","hashOfConfig":"56"},{"size":5385,"mtime":1615889022187,"results":"73","hashOfConfig":"56"},{"size":387,"mtime":1614942657238,"results":"74","hashOfConfig":"56"},{"size":11052,"mtime":1615557129581,"results":"75","hashOfConfig":"56"},{"size":3201,"mtime":1615810305460,"results":"76","hashOfConfig":"56"},{"size":193,"mtime":1614352457227,"results":"77","hashOfConfig":"56"},{"size":256,"mtime":1612860915449,"results":"78","hashOfConfig":"56"},{"size":3406,"mtime":1615560744736,"results":"79","hashOfConfig":"56"},{"size":602,"mtime":1613145388000,"results":"80","hashOfConfig":"56"},{"size":913,"mtime":1614778984447,"results":"81","hashOfConfig":"56"},{"size":2139,"mtime":1612957974714,"results":"82","hashOfConfig":"56"},{"size":1813,"mtime":1615561750470,"results":"83","hashOfConfig":"56"},{"size":1811,"mtime":1615543403044,"results":"84","hashOfConfig":"56"},{"size":902,"mtime":1613038108492,"results":"85","hashOfConfig":"56"},{"size":1883,"mtime":1615884060418,"results":"86","hashOfConfig":"56"},{"size":662,"mtime":1614241660266,"results":"87","hashOfConfig":"56"},{"size":1098,"mtime":1615796322527,"results":"88","hashOfConfig":"56"},{"size":11716,"mtime":1614854116933,"results":"89","hashOfConfig":"56"},{"size":547,"mtime":1614936205165,"results":"90","hashOfConfig":"56"},{"size":6230,"mtime":1614688956119,"results":"91","hashOfConfig":"56"},{"size":932,"mtime":1614607327077,"results":"92","hashOfConfig":"56"},{"size":203,"mtime":1614162338987,"results":"93","hashOfConfig":"56"},{"size":1364,"mtime":1614778839272,"results":"94","hashOfConfig":"56"},{"size":2494,"mtime":1614684068270,"results":"95","hashOfConfig":"56"},{"size":4341,"mtime":1614688638332,"results":"96","hashOfConfig":"56"},{"size":118,"mtime":1614680945459,"results":"97","hashOfConfig":"56"},{"size":1359,"mtime":1615282992175,"results":"98","hashOfConfig":"56"},{"size":1028,"mtime":1615282678274,"results":"99","hashOfConfig":"56"},{"size":1056,"mtime":1615561750480,"results":"100","hashOfConfig":"56"},{"size":8548,"mtime":1615907806625,"results":"101","hashOfConfig":"56"},{"size":11310,"mtime":1615889185686,"results":"102","hashOfConfig":"56"},{"size":549,"mtime":1615383360076,"results":"103","hashOfConfig":"56"},{"size":253,"mtime":1615385937537,"results":"104","hashOfConfig":"56"},{"size":539,"mtime":1615454217344,"results":"105","hashOfConfig":"56"},{"size":1885,"mtime":1615478823015,"results":"106","hashOfConfig":"56"},{"size":4464,"mtime":1615890281818,"results":"107","hashOfConfig":"56"},{"size":4667,"mtime":1615900513276,"results":"108","hashOfConfig":"56"},{"size":3320,"mtime":1615900737135,"results":"109","hashOfConfig":"56"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"qxyosp",{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"112"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"112"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"112"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"128","usedDeprecatedRules":"112"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"112"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"138","usedDeprecatedRules":"112"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"112"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"146","messages":"147","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"166","usedDeprecatedRules":"112"},{"filePath":"167","messages":"168","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"169","messages":"170","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"171","usedDeprecatedRules":"112"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"112"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"191","usedDeprecatedRules":"112"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"112"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"112"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"112"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"112"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"224","messages":"225","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"226","usedDeprecatedRules":"112"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"112"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"112"},"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\index.js",[],["236","237"],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\reportWebVitals.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\App.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Login.js",["238"],"import React, {useEffect, useState} from 'react';\r\nimport '../styles/Login.css';\r\nimport {Backdrop, CircularProgress, Fade, TextField} from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport {useHistory} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {clearToken, getConfig, getToken, setToken} from \"../Helpers\";\r\nimport {Alert} from \"@material-ui/lab\";\r\nimport {BASE_URL} from \"../Constants\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nexport default function Login() {\r\n\r\n    const classes = useStyles();\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isLoggingIn, setLoggingIn] = useState(false);\r\n    const [isValidatingToken, setValidatingToken] = useState(false);\r\n    const [loginError, setLoginError] = useState();\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const token = getToken();\r\n        if (token) {\r\n            setValidatingToken(true);\r\n            axios.get(BASE_URL, getConfig())\r\n                .then((response) => {\r\n                    // Redirect to main route\r\n                    history.push(\"/main\");\r\n                })\r\n                .catch((error) => {\r\n                    setValidatingToken(false);\r\n\r\n                    // TODO: Make sure the response is Unauthorized\r\n                    clearToken();\r\n                })\r\n        }\r\n    }, []);\r\n\r\n    const doLogin = async e => {\r\n        e.preventDefault();\r\n\r\n        // Check if username or password is empty\r\n        if (username.trim() === '' || password.trim() === '') {\r\n            // TODO: Display error on UI\r\n            console.log(\"Empty credentials\");\r\n            return false;\r\n        }\r\n\r\n        // Display the loading animation\r\n        setLoggingIn(true);\r\n\r\n        axios.post(BASE_URL + 'auth/token/', {\r\n            username : username,\r\n            password : password\r\n        }).then((response) => {\r\n            // Store token in local storage\r\n            setToken(response.data.token);\r\n\r\n            // Redirect to main route\r\n            history.push(\"/main\");\r\n        }).catch((error) => {\r\n\r\n            // Hide the loading animation\r\n            setLoggingIn(false);\r\n            setLoginError(undefined);\r\n\r\n            // Handle the error\r\n            if (error.response) {\r\n                // Request made and server responded\r\n                console.log(error.response.data);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n\r\n                setLoginError(\"Incorrect username or password.\");\r\n            } else if (error.request) {\r\n                // The request was made but no response was received\r\n                console.log(error.request);\r\n\r\n                setLoginError(\"An error has occurred.\");\r\n            } else {\r\n                // Something happened in setting up the request that triggered an Error\r\n                console.log('Error', error.message);\r\n\r\n                setLoginError(\"An error has occurred.\");\r\n            }\r\n        })\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n\r\n            <Fade in={true}>\r\n                <div className=\"login__body\">\r\n                    <h2>Welcome</h2>\r\n                    <p>Please login to start</p>\r\n\r\n                    <form onSubmit={doLogin}>\r\n                        <TextField value={username} onChange={e => setUsername(e.target.value)} label=\"Username\" size=\"medium\" fullWidth={true} />\r\n                        <TextField value={password} onChange={e => setPassword(e.target.value)} type=\"password\" label=\"Password\" size=\"medium\" fullWidth={true} />\r\n                        <Button type=\"submit\" color=\"primary\" fullWidth={true} disableElevation>Login</Button>\r\n                    </form>\r\n\r\n                    {isValidatingToken &&\r\n                    <div className=\"login__validatingToken\">\r\n                        <h2>Welcome</h2>\r\n                        <p>We are validating your session, please wait.</p>\r\n                    </div>\r\n                    }\r\n\r\n                    {loginError &&\r\n                    <Alert severity=\"error\">{loginError}</Alert>\r\n                    }\r\n                </div>\r\n            </Fade>\r\n\r\n            <Backdrop className={classes.backdrop} open={isLoggingIn}>\r\n                <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n\r\n        </div>\r\n    )\r\n}","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Chat.js",["239","240","241","242","243","244"],"import React, {useEffect, useRef, useState} from 'react'\r\nimport '../styles/Chat.css'\r\nimport {CircularProgress, Zoom} from \"@material-ui/core\";\r\nimport ChatMessage from \"./ChatMessage\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport {\r\n    ATTACHMENT_TYPE_DOCUMENT,\r\n    ATTACHMENT_TYPE_IMAGE,\r\n    ATTACHMENT_TYPE_VIDEO,\r\n    BASE_URL,\r\n    EVENT_TOPIC_CHAT_MESSAGE_STATUS_CHANGE,\r\n    EVENT_TOPIC_DROPPED_FILES,\r\n    EVENT_TOPIC_EMOJI_PICKER_VISIBILITY,\r\n    EVENT_TOPIC_GO_TO_MSG_ID,\r\n    EVENT_TOPIC_MARKED_AS_SEEN,\r\n    EVENT_TOPIC_NEW_CHAT_MESSAGES,\r\n    EVENT_TOPIC_SEND_TEMPLATE_MESSAGE_ERROR,\r\n    EVENT_TOPIC_SENT_TEMPLATE_MESSAGE\r\n} from \"../Constants\";\r\nimport ChatMessageClass from \"../ChatMessageClass\";\r\nimport ContactClass from \"../ContactClass\";\r\nimport ChatFooterExpired from \"./ChatFooterExpired\";\r\nimport TemplateMessages from \"./TemplateMessages\";\r\nimport ChatFooter from \"./ChatFooter\";\r\nimport ChatHeader from \"./ChatHeader\";\r\nimport ChatMessageOptionsMenu from \"./ChatMessageOptionsMenu\";\r\nimport moment from \"moment\";\r\nimport PubSub from \"pubsub-js\";\r\nimport MessageDateIndicator from \"./MessageDateIndicator\";\r\nimport {\r\n    extractTimestampFromMessage,\r\n    getConfig,\r\n    getFirstObject,\r\n    getLastMessageAndExtractTimestamp,\r\n    getLastObject,\r\n    getObjLength,\r\n    translateHTMLInputToText\r\n} from \"../Helpers\";\r\nimport PreviewSendMedia from \"./PreviewSendMedia\";\r\nimport {getDroppedFiles, handleDragOver, prepareSelectedFiles} from \"../FileHelpers\";\r\n\r\nconst SCROLL_OFFSET = 15;\r\n\r\nexport default function Chat(props) {\r\n\r\n    const messagesContainer = useRef(null);\r\n    const [fixedDateIndicatorText, setFixedDateIndicatorText] = useState();\r\n    const [isLoaded, setLoaded] = useState(false);\r\n    const [isLoadingMoreMessages, setLoadingMoreMessages] = useState(false);\r\n    const [isExpired, setExpired] = useState(false);\r\n    const [isTemplateMessagesVisible, setTemplateMessagesVisible] = useState(false);\r\n    const [contact, setContact] = useState();\r\n    const [messages, setMessages] = useState({});\r\n    const [input, setInput] = useState('');\r\n\r\n    const [selectedFiles, setSelectedFiles] = useState();\r\n    const [accept, setAccept] = useState('');\r\n\r\n    const [isPreviewSendMediaVisible, setPreviewSendMediaVisible] = useState(false);\r\n    const [previewSendMediaData, setPreviewSendMediaData] = useState();\r\n\r\n    const [isAtBottom, setAtBottom] = useState(false);\r\n\r\n    const [lastMessageId, setLastMessageId] = useState();\r\n\r\n    const {waId} = useParams();\r\n\r\n    const cancelTokenSourceRef = useRef();\r\n\r\n    useEffect(() => {\r\n        // Generate a token\r\n        cancelTokenSourceRef.current = axios.CancelToken.source();\r\n\r\n        if (messagesContainer) {\r\n            messagesContainer.current.addEventListener('DOMNodeInserted', event => {\r\n                if (event.target.parentNode.id === \"chat__body\") {\r\n                    const {currentTarget: target} = event;\r\n                    target.scroll({top: target.scrollHeight - target.offsetHeight - SCROLL_OFFSET});\r\n                }\r\n            });\r\n        }\r\n\r\n        // Handle files dragged and dropped to sidebar chat\r\n        const handleFilesDropped = function (msg, data) {\r\n            setSelectedFiles(data);\r\n        }\r\n\r\n        // Listen for file drop events\r\n        const token = PubSub.subscribe(EVENT_TOPIC_DROPPED_FILES, handleFilesDropped);\r\n\r\n        return () => {\r\n            // Cancelling ongoing requests\r\n            cancelTokenSourceRef.current.cancel();\r\n\r\n            // Unsubscribe\r\n            PubSub.unsubscribe(token);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setLoaded(false);\r\n\r\n        // Clear values for next route\r\n        setContact(null);\r\n        setMessages([]);\r\n        setTemplateMessagesVisible(false);\r\n        setAtBottom(false);\r\n\r\n        setPreviewSendMediaVisible(false);\r\n        setPreviewSendMediaData(undefined);\r\n\r\n        props.previewMedia(null);\r\n\r\n        // Close emoji picker\r\n        PubSub.publish(EVENT_TOPIC_EMOJI_PICKER_VISIBILITY, false);\r\n\r\n        if (!waId) {\r\n            console.log('waId is empty.');\r\n            return false;\r\n        }\r\n\r\n        // Load contact and messages\r\n        getContact(true);\r\n\r\n        return () => {\r\n            // Cancelling ongoing requests\r\n            cancelTokenSourceRef.current.cancel();\r\n\r\n            // Generate a new token, because component is not destroyed\r\n            cancelTokenSourceRef.current = axios.CancelToken.source();\r\n        }\r\n    }, [waId]);\r\n\r\n    useEffect(() => {\r\n        props.setChosenContact(contact);\r\n    }, [contact]);\r\n\r\n    useEffect(() => {\r\n        const messagesContainerCopy = messagesContainer.current;\r\n        const dateIndicators = messagesContainerCopy.querySelectorAll('.chat__message__outer > .chat__message__dateContainer > .chat__message__dateContainer__indicator');\r\n\r\n        let timeoutToken;\r\n\r\n        // Consider replacing this with IntersectionObserver\r\n        // Browser support should be considered: https://caniuse.com/intersectionobserver\r\n        function handleScroll(e) {\r\n            const threshold = 0;\r\n            const el = e.target;\r\n            if (isScrollable(el)) {\r\n                if (el.scrollTop <= threshold) {\r\n                    //console.log(\"Scrolled to top\");\r\n                    if (isLoaded && !isLoadingMoreMessages) {\r\n                        setLoadingMoreMessages(true);\r\n                        getMessages(undefined, getFirstObject(messages)?.timestamp);\r\n                    }\r\n                } else {\r\n                    // TODO: Make sure user scrolls\r\n                    if (el.scrollHeight - el.scrollTop - el.clientHeight < 1) {\r\n                        //console.log('Scrolled to bottom');\r\n                        if (isLoaded && !isLoadingMoreMessages && !isAtBottom) {\r\n                            setLoadingMoreMessages(true);\r\n                            getMessages(undefined, undefined, undefined, getLastObject(messages)?.timestamp, true, false);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n\r\n            // Second part, to display date\r\n            if (isLoaded) {\r\n                clearTimeout(timeoutToken);\r\n                timeoutToken = setTimeout(function () {\r\n                    prepareFixedDateIndicator(dateIndicators, el);\r\n                }, 25);\r\n            }\r\n        }\r\n\r\n        if (messagesContainer && isLoaded) {\r\n            messagesContainerCopy.addEventListener(\"scroll\", handleScroll);\r\n\r\n            // Display fixed date indicator\r\n            prepareFixedDateIndicator(dateIndicators, messagesContainerCopy);\r\n        }\r\n\r\n        return () => {\r\n            clearTimeout(timeoutToken);\r\n            messagesContainerCopy.removeEventListener(\"scroll\", handleScroll);\r\n        }\r\n    }, [messages, isLoaded, isLoadingMoreMessages, isAtBottom]);\r\n\r\n    useEffect(() => {\r\n\r\n        // New messages\r\n        const onNewMessages = function (msg, data) {\r\n            if (data && isLoaded) {\r\n                let hasAnyIncomingMsg = false;\r\n\r\n                const preparedMessages = {};\r\n                Object.entries(data).forEach((message) => {\r\n                    const msgId = message[0];\r\n                    const chatMessage = message[1];\r\n\r\n                    if (waId === chatMessage.waId) {\r\n                        preparedMessages[msgId] = chatMessage;\r\n\r\n                        if (!chatMessage.isFromUs) {\r\n                            hasAnyIncomingMsg = true;\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (getObjLength(preparedMessages) > 0) {\r\n                    const lastMessage = getLastObject(preparedMessages);\r\n\r\n                    if (isAtBottom) {\r\n                        setMessages(prevState => {\r\n                            return {...prevState, ...preparedMessages};\r\n                        });\r\n\r\n                        if (hasAnyIncomingMsg) {\r\n                            const lastMessageTimestamp = extractTimestampFromMessage(lastMessage);\r\n                            markAsSeen(lastMessageTimestamp);\r\n\r\n                            // Update contact\r\n                            setContact(prevState => {\r\n                                const nextState = prevState;\r\n                                nextState.lastMessageTimestamp = lastMessageTimestamp;\r\n                                nextState.isExpired = false;\r\n\r\n                                return nextState;\r\n                            });\r\n\r\n                            // Chat is not expired anymore\r\n                            setExpired(false);\r\n                        }\r\n                    }\r\n\r\n                    // Update last message id\r\n                    setLastMessageId(lastMessage.id);\r\n                }\r\n            }\r\n        }\r\n\r\n        const newChatMessagesEventToken = PubSub.subscribe(EVENT_TOPIC_NEW_CHAT_MESSAGES, onNewMessages);\r\n\r\n        // Status changes\r\n        const onMessageStatusChange = function (msg, data) {\r\n            if (data && isLoaded) {\r\n\r\n                // TODO: Check if message belongs to active conversation to avoid doing this unnecessarily\r\n                setMessages(prevState => {\r\n                    const newState = prevState;\r\n                    let changedAny = false;\r\n\r\n                    Object.entries(data).forEach((status) => {\r\n                        const statusMsgId = status[0];\r\n                        const statusObj = status[1];\r\n\r\n                        if (newState[statusMsgId]) {\r\n                            if (statusObj.sentTimestamp) {\r\n                                changedAny = true;\r\n                                newState[statusMsgId].sentTimestamp = statusObj.sentTimestamp;\r\n                            }\r\n\r\n                            if (statusObj.deliveredTimestamp) {\r\n                                changedAny = true;\r\n                                newState[statusMsgId].deliveredTimestamp = statusObj.deliveredTimestamp;\r\n                            }\r\n\r\n                            if (statusObj.readTimestamp) {\r\n                                changedAny = true;\r\n                                newState[statusMsgId].readTimestamp = statusObj.readTimestamp;\r\n                            }\r\n                        }\r\n                    });\r\n\r\n                    if (changedAny) {\r\n                        return {...newState};\r\n                    } else {\r\n                        return prevState;\r\n                    }\r\n                });\r\n            }\r\n        }\r\n\r\n        const chatMessageStatusChangeEventToken = PubSub.subscribe(EVENT_TOPIC_CHAT_MESSAGE_STATUS_CHANGE, onMessageStatusChange);\r\n\r\n        return () => {\r\n            PubSub.unsubscribe(newChatMessagesEventToken);\r\n            PubSub.unsubscribe(chatMessageStatusChangeEventToken);\r\n        }\r\n    }, [waId, messages, isLoaded, /*isLoadingMoreMessages,*/ isExpired, isAtBottom]);\r\n\r\n    useEffect(() => {\r\n        const hasNewerToLoad = lastMessageId === undefined || !messages.hasOwnProperty(lastMessageId); //(previous != null && typeof previous !== typeof undefined);\r\n        console.log(\"Has newer to load:\", hasNewerToLoad);\r\n        setAtBottom(!hasNewerToLoad);\r\n\r\n    }, [messages, lastMessageId]);\r\n\r\n    /*useEffect(() => {\r\n        // Scrolling to bottom on initial templates load\r\n        if (!isLoadingTemplates) {\r\n            const target = messagesContainer.current;\r\n            target.scroll({top: target.scrollHeight - SCROLL_OFFSET});\r\n        }\r\n    }, [isLoadingTemplates]);*/\r\n\r\n    const prepareFixedDateIndicator = (dateIndicators, el) => {\r\n        const curScrollTop = el.scrollTop;\r\n        let indicatorToShow;\r\n\r\n        for (let i = 0; i < dateIndicators.length; i++) {\r\n            const indicator = dateIndicators[i];\r\n            if (indicatorToShow === undefined || indicator.offsetTop <= curScrollTop) {\r\n                indicatorToShow = indicator;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (indicatorToShow) {\r\n            setFixedDateIndicatorText(indicatorToShow.innerHTML);\r\n        }\r\n    }\r\n\r\n    const scrollToChild = (msgId) => {\r\n        setTimeout(function () {\r\n            const child = messagesContainer.current.querySelector('#message_' + msgId);\r\n            let _offset = 25;\r\n            if (child) {\r\n                let targetOffsetTop = child.offsetTop - _offset;\r\n                if (targetOffsetTop < SCROLL_OFFSET) targetOffsetTop = SCROLL_OFFSET;\r\n                messagesContainer.current.scroll({top: targetOffsetTop, behavior: \"smooth\"});\r\n\r\n                child.classList.add('blink');\r\n\r\n                setTimeout(function () {\r\n                    if (child) {\r\n                        child.classList.remove('blink');\r\n                    }\r\n                }, 1000);\r\n            }\r\n        }, 100);\r\n    }\r\n\r\n    const goToMessageId = (msgId, timestamp) => {\r\n        if (messagesContainer.current) {\r\n            if (msgId) {\r\n                if (messages[msgId]) {\r\n                    console.log(\"This message is already loaded.\");\r\n                    scrollToChild(msgId);\r\n                } else {\r\n                    console.log(\"This message will be loaded.\");\r\n\r\n                    // TODO: Cancel other messages requests first\r\n\r\n                    // Load messages since clicked results\r\n                    setLoadingMoreMessages(true);\r\n                    const callback = () => {\r\n                        scrollToChild(msgId);\r\n                    };\r\n                    getMessages(callback, undefined, undefined, timestamp, true, true);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        const onGoToMessageId = function (msg, data) {\r\n            const msgId = data.id;\r\n            const timestamp = data.timestamp;\r\n\r\n            goToMessageId(msgId, timestamp);\r\n        }\r\n\r\n        // Subscribe for scrolling to message event\r\n        const token = PubSub.subscribe(EVENT_TOPIC_GO_TO_MSG_ID, onGoToMessageId);\r\n\r\n        return () => {\r\n            // Unsubscribe\r\n            PubSub.unsubscribe(token);\r\n        }\r\n    }, [messages, isAtBottom]);\r\n\r\n    useEffect(() => {\r\n        if (selectedFiles) {\r\n            handleChosenFiles();\r\n        }\r\n    }, [selectedFiles]);\r\n\r\n    const isScrollable = (el) => {\r\n        const hasScrollableContent = el.scrollHeight > el.clientHeight;\r\n        const overflowYStyle = window.getComputedStyle(el).overflowY;\r\n        const isOverflowHidden = overflowYStyle.indexOf('hidden') !== -1;\r\n\r\n        return hasScrollableContent && !isOverflowHidden;\r\n    }\r\n\r\n    const [optionsChatMessage, setOptionsChatMessage] = useState();\r\n    const [menuAnchorEl, setMenuAnchorEl] = useState();\r\n\r\n    const displayOptionsMenu = (event, chatMessage) => {\r\n        // We need to use parent because menu view gets hidden\r\n        setMenuAnchorEl(event.currentTarget.parentElement);\r\n        setOptionsChatMessage(chatMessage);\r\n    }\r\n\r\n    const getContact = (loadMessages) => {\r\n        axios.get(`${BASE_URL}contacts/${waId}/`, getConfig(undefined, cancelTokenSourceRef.current.token))\r\n            .then((response) => {\r\n                //console.log(\"Contact\", response.data);\r\n\r\n                const prepared = new ContactClass(response.data);\r\n                setContact(prepared);\r\n                setExpired(prepared.isExpired);\r\n\r\n                // Contact information is loaded, now load messages\r\n                if (loadMessages !== undefined && loadMessages === true) {\r\n                    getMessages(function (preparedMessages) {\r\n                        setLastMessageId(getLastObject(preparedMessages)?.id);\r\n                    });\r\n                }\r\n            })\r\n            .catch((error) => {\r\n                // TODO: Handle errors\r\n\r\n                props.displayError(error);\r\n            });\r\n    }\r\n\r\n    const getMessages = (callback, beforeTime, offset, sinceTime, isInitialWithSinceTime, replaceAll) => {\r\n        const limit = 30;\r\n\r\n        axios.get( `${BASE_URL}messages/`,\r\n            getConfig({\r\n                wa_id: waId,\r\n                offset: offset ?? 0,\r\n                before_time: beforeTime,\r\n                since_time: sinceTime,\r\n                limit: limit,\r\n            }, cancelTokenSourceRef.current.token)\r\n        )\r\n            .then((response) => {\r\n                console.log(\"Messages\", response.data);\r\n\r\n                const count = response.data.count;\r\n                //const previous = response.data.previous;\r\n                const next = response.data.next;\r\n\r\n                if (sinceTime && isInitialWithSinceTime === true) {\r\n                    if (next) { /*count > limit*/\r\n                        setAtBottom(false);\r\n                        getMessages(callback, beforeTime, count - limit, sinceTime, false, replaceAll);\r\n                        return false;\r\n                    }\r\n                }\r\n\r\n                const preparedMessages = {};\r\n                response.data.results.reverse().forEach((message) => {\r\n                    const prepared = new ChatMessageClass(message);\r\n                    preparedMessages[prepared.id] = prepared;\r\n                });\r\n\r\n                if (getObjLength(preparedMessages) > 0) {\r\n                    // To persist scroll position, we store current scroll information\r\n                    const prevScrollTop = messagesContainer.current.scrollTop;\r\n                    const prevScrollHeight = messagesContainer.current.scrollHeight;\r\n\r\n                    setMessages((prevState => {\r\n                        if (replaceAll) {\r\n                            return preparedMessages;\r\n                        }\r\n\r\n                        if (sinceTime) {\r\n                            return {...prevState, ...preparedMessages}\r\n                        }\r\n\r\n                        return {...preparedMessages, ...prevState}\r\n                    }));\r\n\r\n                    // Persisting scroll position by calculating container height difference\r\n                    /*if (sinceTime) {\r\n                        messagesContainer.current.scrollTop = prevScrollTop;\r\n                    } else {\r\n                        const nextScrollHeight = messagesContainer.current.scrollHeight;\r\n                        messagesContainer.current.scrollTop = (nextScrollHeight - prevScrollHeight) + prevScrollTop - SCROLL_OFFSET;\r\n                    }*/\r\n\r\n                    if (!sinceTime || replaceAll) {\r\n                        const nextScrollHeight = messagesContainer.current.scrollHeight;\r\n                        messagesContainer.current.scrollTop = (nextScrollHeight - prevScrollHeight) + prevScrollTop - SCROLL_OFFSET;\r\n                    } else if (sinceTime) {\r\n                        messagesContainer.current.scrollTop = prevScrollTop;\r\n                    }\r\n                }\r\n\r\n                setLoaded(true);\r\n                setLoadingMoreMessages(false);\r\n\r\n                // TODO: Check unread messages first and then decide to do it or not\r\n                // Mark messages as seen\r\n                if (!beforeTime && !sinceTime) {\r\n                    // beforeTime is not passed only for initial request\r\n                    // Mark messages as seen\r\n                    const lastMessageTimestamp = getLastMessageAndExtractTimestamp(preparedMessages);\r\n                    markAsSeen(lastMessageTimestamp);\r\n                }\r\n\r\n                // Promise\r\n                if (callback) {\r\n                    setTimeout(function () {\r\n                        callback(preparedMessages);\r\n                    }, 50);\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                setLoadingMoreMessages(false);\r\n\r\n                // TODO: Handle errors\r\n\r\n                props.displayError(error);\r\n            });\r\n    }\r\n\r\n    const sendMessage = (e) => {\r\n        e.preventDefault();\r\n\r\n        const preparedInput = translateHTMLInputToText(input);\r\n\r\n        if (preparedInput.trim() === '') {\r\n            return false;\r\n        }\r\n\r\n        console.log('You typed: ', preparedInput);\r\n\r\n        if (isLoaded) {\r\n            axios.post( `${BASE_URL}messages/`, {\r\n                wa_id: waId,\r\n                text: {\r\n                    body: preparedInput.trim()\r\n                }\r\n            }, getConfig())\r\n                .then((response) => {\r\n                    console.log(response.data);\r\n                })\r\n                .catch((error) => {\r\n                    // TODO: Handle errors\r\n\r\n                    props.displayError(error);\r\n\r\n                    if (error.response) {\r\n                        // Switch to expired mode if status code is 453\r\n                        if (error.response.status === 453) {\r\n                            setExpired(true);\r\n                        }\r\n                    }\r\n                });\r\n\r\n            setInput('');\r\n\r\n            // Close emoji picker\r\n            PubSub.publish(EVENT_TOPIC_EMOJI_PICKER_VISIBILITY, false);\r\n        }\r\n    }\r\n\r\n    const sendTemplateMessage = (templateMessage) => {\r\n        if (isLoaded) {\r\n            axios.post( `${BASE_URL}messages/`, {\r\n                wa_id: waId,\r\n                type: 'template',\r\n                template: {\r\n                    namespace: templateMessage.namespace,\r\n                    name: templateMessage.name,\r\n                    language: {\r\n                        code: templateMessage.language,\r\n                        policy: 'deterministic'\r\n                    },\r\n                    components: templateMessage.params\r\n                }\r\n            }, getConfig())\r\n                .then((response) => {\r\n                    console.log(response.data);\r\n\r\n                    // Hide dialog by this event\r\n                    PubSub.publish(EVENT_TOPIC_SENT_TEMPLATE_MESSAGE, true);\r\n\r\n                })\r\n                .catch((error) => {\r\n                    // TODO: Handle errors\r\n\r\n                    props.displayError(error);\r\n\r\n                    if (error.response) {\r\n                        const errors = error.response.data?.waba_response?.errors;\r\n                        PubSub.publish(EVENT_TOPIC_SEND_TEMPLATE_MESSAGE_ERROR, errors);\r\n                    }\r\n                });\r\n        }\r\n    }\r\n\r\n    const markAsSeen = (timestamp) => {\r\n        console.log('Marking as seen', timestamp);\r\n\r\n        axios.post( `${BASE_URL}mark_as_seen/`, {\r\n            timestamp: timestamp,\r\n            customer_wa_id: waId\r\n        }, getConfig(undefined, cancelTokenSourceRef.current.token))\r\n            .then((response) => {\r\n                //console.log(response.data);\r\n\r\n                PubSub.publish(EVENT_TOPIC_MARKED_AS_SEEN, waId);\r\n            })\r\n            .catch((error) => {\r\n                // TODO: Handle errors\r\n\r\n                props.displayError(error);\r\n            });\r\n    }\r\n\r\n    const sendFile = (fileURL, chosenFile, callback) => {\r\n        if (isLoaded) {\r\n            const caption = chosenFile.caption;\r\n            const type = chosenFile.attachmentType;\r\n            const file = chosenFile.file;\r\n            const filename = file.name;\r\n            const mimeType = file.type;\r\n\r\n            const body = {\r\n                wa_id: waId,\r\n                recipient_type: 'individual',\r\n                to: waId,\r\n                type: type\r\n            };\r\n\r\n            body[type] = {\r\n                link: fileURL,\r\n                mime_type: mimeType,\r\n            }\r\n\r\n            // caption param is accepted for only images and videos\r\n            if (type === ATTACHMENT_TYPE_IMAGE || type === ATTACHMENT_TYPE_VIDEO) {\r\n                body[type]['caption'] = caption;\r\n            }\r\n\r\n            // filename param is accepted for documents\r\n            if (type === ATTACHMENT_TYPE_DOCUMENT) {\r\n                body[type]['filename'] = filename;\r\n            }\r\n\r\n            axios.post( `${BASE_URL}messages/`, body, getConfig())\r\n                .then((response) => {\r\n                    console.log(response.data);\r\n\r\n                    // Send next request\r\n                    callback();\r\n\r\n                })\r\n                .catch((error) => {\r\n                    // TODO: Handle errors\r\n\r\n                    props.displayError(error);\r\n\r\n                    // Send next when it fails, a retry can be considered\r\n                    callback();\r\n                });\r\n        }\r\n    }\r\n\r\n    const handleChosenFiles = () => {\r\n        if (getObjLength(selectedFiles) > 0) {\r\n            const preparedFiles = prepareSelectedFiles(selectedFiles);\r\n\r\n            setPreviewSendMediaData(preparedFiles);\r\n            setPreviewSendMediaVisible(true);\r\n        }\r\n    }\r\n\r\n    const sendHandledChosenFiles = (preparedFiles) => {\r\n        if (isLoaded && preparedFiles) {\r\n            const requests = [];\r\n\r\n            // Sending all files in a loop\r\n            Object.entries(preparedFiles).forEach((curFile) => {\r\n                const curChosenFile = curFile[1];\r\n                const file = curChosenFile.file;\r\n\r\n                const formData = new FormData();\r\n                formData.append(\"file_encoded\", file);\r\n\r\n                requests.push({\r\n                    formData: formData,\r\n                    chosenFile: curChosenFile\r\n                });\r\n            });\r\n\r\n            let requestIndex = 0;\r\n\r\n            const sendRequest = (request) => {\r\n                const sendNextRequest = () => {\r\n                    requestIndex++;\r\n                    const nextRequest = requests[requestIndex];\r\n                    if (nextRequest) {\r\n                        sendRequest(nextRequest);\r\n                    }\r\n                }\r\n\r\n                axios.post(`${BASE_URL}media/`, request.formData, getConfig())\r\n                    .then((response) => {\r\n                        console.log(response.data);\r\n\r\n                        // Convert parameters to a ChosenFile object\r\n                        sendFile(response.data.file, request.chosenFile, function () {\r\n                            sendNextRequest();\r\n                        });\r\n\r\n                    })\r\n                    .catch((error) => {\r\n                        // TODO: Handle errors\r\n\r\n                        props.displayError(error);\r\n\r\n                        // Send next when it fails, a retry can be considered\r\n                        sendNextRequest();\r\n                    });\r\n            }\r\n\r\n            sendRequest(requests[requestIndex]);\r\n        }\r\n    }\r\n\r\n    const handleDrop = (event) => {\r\n        if (waId) {\r\n            setSelectedFiles(getDroppedFiles(event));\r\n        } else {\r\n            event.preventDefault();\r\n        }\r\n    }\r\n\r\n    let lastPrintedDate;\r\n    let lastSenderWaId;\r\n\r\n    return (\r\n        <div\r\n            className={\"chat\" + (waId ? \" chatOpen\" : \"\")}\r\n            onDrop={(event) => handleDrop(event)}\r\n            onDragOver={(event) => handleDragOver(event)}>\r\n\r\n            <ChatHeader contact={contact} />\r\n\r\n            <Zoom in={(isLoaded && !isLoadingMoreMessages && (fixedDateIndicatorText !== undefined && fixedDateIndicatorText.trim().length > 0))}>\r\n                <div className=\"chat__body__dateIndicator\">\r\n                    <MessageDateIndicator text={fixedDateIndicatorText} />\r\n                </div>\r\n            </Zoom>\r\n\r\n            <Zoom in={(waId && !isLoaded) || isLoadingMoreMessages}>\r\n                <div className=\"chat__body__loadingMore\">\r\n                    <div className=\"chat__body__loadingMore__wrapper\">\r\n                        <CircularProgress size={28} />\r\n                    </div>\r\n                </div>\r\n            </Zoom>\r\n\r\n            <div id=\"chat__body\" className=\"chat__body\" ref={messagesContainer} onDrop={(event) => event.preventDefault()}>\r\n                <div className=\"chat__empty\"/>\r\n\r\n                { Object.entries(messages).map((message, index) => {\r\n\r\n                    // Message date is created here and passed to ChatMessage for a better performance\r\n                    const curMsgDate = moment.unix(message[1].timestamp);\r\n\r\n                    if (index === 0) {\r\n                        lastPrintedDate = undefined;\r\n                        lastSenderWaId = undefined;\r\n                    }\r\n\r\n                    let willDisplayDate = false;\r\n                    if (lastPrintedDate === undefined) {\r\n                        willDisplayDate = true;\r\n                        lastPrintedDate = moment.unix(message[1].timestamp);\r\n                    } else {\r\n                        //const curMsgDate = moment.unix(message[1].timestamp);\r\n                        if (!curMsgDate.isSame(lastPrintedDate, 'day')) {\r\n                            willDisplayDate = true;\r\n                        }\r\n\r\n                        lastPrintedDate = curMsgDate;\r\n                    }\r\n\r\n                    let willDisplaySender = false;\r\n                    const curSenderWaId = message[1].getUniqueSender();\r\n                    if (lastSenderWaId === undefined) {\r\n                        willDisplaySender = true;\r\n                        lastSenderWaId = message[1].getUniqueSender();\r\n                    } else {\r\n                        if (lastSenderWaId !== curSenderWaId) {\r\n                            willDisplaySender = true;\r\n                        }\r\n\r\n                        lastSenderWaId = message[1].getUniqueSender();\r\n                    }\r\n\r\n                    return (<ChatMessage\r\n                        key={message[0]}\r\n                        messageData={message[1]}\r\n                        displayDate={willDisplayDate}\r\n                        displaySender={willDisplaySender}\r\n                        date={curMsgDate}\r\n                        onPreview={(chatMessage) => props.previewMedia(chatMessage)}\r\n                        templates={props.templates}\r\n                        goToMessageId={goToMessageId}\r\n                        onOptionsClick={(event, chatMessage) => displayOptionsMenu(event, chatMessage)} />)\r\n                }) }\r\n\r\n                <div className=\"chat__body__empty\" />\r\n            </div>\r\n\r\n            {isExpired\r\n                ?\r\n                <ChatFooterExpired />\r\n                :\r\n                <ChatFooter\r\n                    input={input}\r\n                    setInput={setInput}\r\n                    sendMessage={(e) => sendMessage(e)}\r\n                    setSelectedFiles={setSelectedFiles}\r\n                    isTemplateMessagesVisible={isTemplateMessagesVisible}\r\n                    setTemplateMessagesVisible={setTemplateMessagesVisible}\r\n                    sendHandledChosenFiles={sendHandledChosenFiles}\r\n                    accept={accept}\r\n                    setAccept={setAccept}\r\n                    displayError={props.displayError} />\r\n            }\r\n\r\n            {(isTemplateMessagesVisible || isExpired) &&\r\n            <TemplateMessages\r\n                waId={waId}\r\n                templatesData={props.templates}\r\n                onSend={(templateMessage) => sendTemplateMessage(templateMessage)}\r\n                isLoadingTemplates={props.isLoadingTemplates} />\r\n            }\r\n\r\n            {!waId &&\r\n            <div className=\"chat__default\">\r\n                <h2>Hey</h2>\r\n                <p>Choose a contact to start a conversation</p>\r\n            </div>\r\n            }\r\n\r\n            <ChatMessageOptionsMenu\r\n                menuAnchorEl={menuAnchorEl}\r\n                setMenuAnchorEl={setMenuAnchorEl}\r\n                optionsChatMessage={optionsChatMessage} />\r\n\r\n            {isPreviewSendMediaVisible &&\r\n            <PreviewSendMedia\r\n                data={previewSendMediaData}\r\n                setData={setPreviewSendMediaData}\r\n                setPreviewSendMediaVisible={setPreviewSendMediaVisible}\r\n                sendHandledChosenFiles={sendHandledChosenFiles}\r\n                accept={accept}\r\n            />\r\n            }\r\n\r\n        </div>\r\n    )\r\n}","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Sidebar.js",["245","246","247"],"import React, {useEffect, useState} from 'react';\r\nimport '../styles/Sidebar.css';\r\nimport {Avatar, IconButton, Menu, MenuItem} from \"@material-ui/core\";\r\nimport ChatIcon from \"@material-ui/icons/Chat\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport axios from \"axios\";\r\nimport {clearToken, getConfig, getObjLength} from \"../Helpers\";\r\nimport {BASE_URL, EVENT_TOPIC_MARKED_AS_SEEN, EVENT_TOPIC_NEW_CHAT_MESSAGES} from \"../Constants\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport SidebarContactResult from \"./SidebarContactResult\";\r\nimport ChatClass from \"../ChatClass\";\r\nimport UnseenMessageClass from \"../UnseenMessageClass\";\r\nimport PubSub from \"pubsub-js\";\r\n\r\nfunction Sidebar(props) {\r\n\r\n    const {waId} = useParams();\r\n\r\n    const history = useHistory();\r\n\r\n    const [chats, setChats] = useState({});\r\n    const [unseenMessages, setUnseenMessages] = useState({});\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [contactResults, setContactResults] = useState({});\r\n\r\n    const clearUserSession = () => {\r\n        clearToken();\r\n        history.push(\"/\");\r\n    }\r\n\r\n    const logOut = () => {\r\n        clearUserSession();\r\n        hideMenu();\r\n    }\r\n\r\n    const displayMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    };\r\n\r\n    const hideMenu = () => {\r\n        setAnchorEl(null);\r\n    };\r\n\r\n    let cancelToken;\r\n\r\n    useEffect(() => {\r\n        // Generate a token\r\n        cancelToken = axios.CancelToken.source();\r\n\r\n        getChats(cancelToken, true);\r\n\r\n        return () => {\r\n            if (cancelToken !== undefined) {\r\n                cancelToken.cancel(\"Operation canceled due to new request.\");\r\n            }\r\n        }\r\n    }, [keyword]);\r\n\r\n    useEffect(() => {\r\n        const onMarkedAsSeen = function (msg, data) {\r\n            const relatedWaId = data;\r\n\r\n            setUnseenMessages(prevState => {\r\n                const nextState = prevState;\r\n                delete nextState[relatedWaId];\r\n\r\n                return {...nextState};\r\n            });\r\n        }\r\n\r\n        const markedAsSeenEventToken = PubSub.subscribe(EVENT_TOPIC_MARKED_AS_SEEN, onMarkedAsSeen);\r\n\r\n        return () => {\r\n            PubSub.unsubscribe(markedAsSeenEventToken);\r\n        }\r\n    }, [unseenMessages]);\r\n\r\n    useEffect(() => {\r\n        // New messages\r\n        const onNewMessages = function (msg, data) {\r\n            // We don't need to update if chats are filtered\r\n            if (keyword.trim().length === 0) {\r\n                let willMakeRequest = false;\r\n\r\n                const nextState = chats;\r\n                let changedAny = false;\r\n\r\n                Object.entries(data).forEach((message) => {\r\n                    //const msgId = message[0];\r\n                    const chatMessage = message[1];\r\n                    const chatMessageWaId = chatMessage.waId;\r\n\r\n                    // Chats are ordered by incoming message date\r\n                    if (!chatMessage.isFromUs) {\r\n                        if (!nextState.hasOwnProperty(chatMessageWaId)) {\r\n                            willMakeRequest = true;\r\n\r\n                            // Create a chat here\r\n                            //nextState[chatMessageWaId] = new ChatClass({});\r\n                        } else {\r\n                            changedAny = true;\r\n\r\n                            // Update existing chat\r\n                            nextState[chatMessageWaId].setLastMessage(chatMessage.payload);\r\n                        }\r\n\r\n                        // Unseen\r\n                        if (waId !== chatMessageWaId) {\r\n                            const preparedUnseenMessages = unseenMessages;\r\n                            if (unseenMessages[chatMessageWaId] === undefined) {\r\n                                preparedUnseenMessages[chatMessageWaId] = new UnseenMessageClass(chatMessageWaId, 0);\r\n                            }\r\n\r\n                            // Increase number of unseen messages\r\n                            preparedUnseenMessages[chatMessageWaId].unseenMessages++;\r\n\r\n                            setUnseenMessages({...preparedUnseenMessages});\r\n\r\n                            // Display a notification\r\n                            props.showNotification(\"New messages\", \"You have new messages!\");\r\n                        }\r\n                    }\r\n                });\r\n\r\n                if (changedAny) {\r\n                    // Sorting\r\n                    let sortedNextState = Object.entries(nextState).sort((a, b) => b[1].lastMessageTimestamp - a[1].lastMessageTimestamp);\r\n                    sortedNextState = Object.fromEntries(sortedNextState);\r\n\r\n                    setChats({...sortedNextState});\r\n                }\r\n\r\n                // We do this to generate new (missing) chat\r\n                if (willMakeRequest) {\r\n                    getChats(cancelToken, false);\r\n                }\r\n            }\r\n        }\r\n\r\n        const newChatMessagesEventToken = PubSub.subscribe(EVENT_TOPIC_NEW_CHAT_MESSAGES, onNewMessages);\r\n\r\n        return () => {\r\n            PubSub.unsubscribe(newChatMessagesEventToken);\r\n        }\r\n    }, [waId, chats, unseenMessages, keyword]);\r\n\r\n    const search = async (_keyword) => {\r\n        setKeyword(_keyword);\r\n    }\r\n\r\n    const getChats = (cancelToken, isInitial) => {\r\n        axios.get(`${BASE_URL}chats/`,\r\n            getConfig({\r\n                search: keyword\r\n            }, cancelToken.token)\r\n        )\r\n            .then((response) => {\r\n                //console.log(\"Chats\", response.data)\r\n\r\n                const preparedChats = {};\r\n                response.data.results.forEach((contact) => {\r\n                    const prepared = new ChatClass(contact);\r\n                    preparedChats[prepared.waId] = prepared;\r\n                });\r\n\r\n                setChats(preparedChats);\r\n\r\n                // In case param is undefined\r\n                isInitial = isInitial === true;\r\n\r\n                if (isInitial) {\r\n                    props.setProgress(100);\r\n                }\r\n\r\n                const willNotify = !isInitial;\r\n\r\n                const preparedUnseenMessages = {};\r\n                response.data.results.forEach((unseenMessage) => {\r\n                    const unseenWaId = unseenMessage.contact.waba_payload.wa_id;\r\n                    const unseenAmount = unseenMessage.unseen_messages;\r\n                    const prepared = new UnseenMessageClass(unseenWaId, unseenAmount);\r\n                    preparedUnseenMessages[prepared.waId] = prepared;\r\n                });\r\n\r\n                if (willNotify) {\r\n                    let hasAnyNewMessages = false;\r\n                    setUnseenMessages((prevState => {\r\n                            Object.entries(preparedUnseenMessages).forEach((unseen) => {\r\n                                const unseenWaId = unseen[0]\r\n                                const number = unseen[1].unseenMessages;\r\n                                if (unseenWaId !== waId) {\r\n                                    // TODO: Consider a new contact (last part of the condition)\r\n                                    if ((prevState[unseenWaId] && number > prevState[unseenWaId].unseenMessages) /*|| (!prevState[unseenWaId] && number > 0)*/) {\r\n                                        hasAnyNewMessages = true;\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            // When state is a JSON object, it is unable to understand whether it is different or same and renders again\r\n                            // So we check if new state is actually different than previous state\r\n                            if (JSON.stringify(preparedUnseenMessages) !== JSON.stringify(prevState)) {\r\n                                return preparedUnseenMessages;\r\n                            } else {\r\n                                return prevState;\r\n                            }\r\n                        }\r\n                    ));\r\n\r\n                    // Display a notification\r\n                    if (hasAnyNewMessages) {\r\n                        props.showNotification(\"New messages\", \"You have new messages!\");\r\n                    }\r\n                } else {\r\n                    setUnseenMessages(preparedUnseenMessages);\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n\r\n                // TODO: Move this to a common interceptor\r\n                if (error.response) {\r\n                    if (error.response.status === 401) {\r\n                        // Invalid token\r\n                        clearUserSession();\r\n                    }\r\n                }\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className=\"sidebar\">\r\n            <div className=\"sidebar__header\">\r\n                <Avatar>?</Avatar>\r\n                <div className=\"sidebar__headerRight\">\r\n                    <IconButton>\r\n                        <ChatIcon />\r\n                    </IconButton>\r\n                    <IconButton onClick={displayMenu}>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n\r\n            <SearchBar onChange={(_keyword) => search(_keyword)} />\r\n\r\n            <div className=\"sidebar__results\">\r\n\r\n                {keyword.trim().length > 0 &&\r\n                <h3>Chats</h3>\r\n                }\r\n\r\n                <div className=\"sidebar__results__chats\">\r\n                    { Object.entries(chats).map((chat) =>\r\n                        <SidebarChat\r\n                            key={chat[0]}\r\n                            chatData={chat[1]}\r\n                            unseenMessages={unseenMessages}\r\n                            keyword={keyword}\r\n                        />\r\n                    )}\r\n\r\n                    { Object.keys(chats).length === 0 &&\r\n                    <span className=\"sidebar__results__chats__noResult\">\r\n                        {keyword.trim().length > 0 ?\r\n                            <span>No chats found for: <span className=\"searchOccurrence\">{keyword}</span></span>\r\n                            :\r\n                            <span>You don't have any chats yet.</span>\r\n                        }\r\n                    </span>\r\n                    }\r\n                </div>\r\n\r\n                {(keyword.trim().length > 0 && getObjLength(contactResults) > 0) &&\r\n                <h3>Contacts</h3>\r\n                }\r\n\r\n                {(keyword.trim().length > 0 && getObjLength(contactResults) > 0) &&\r\n                <div className=\"sidebar__results__contacts\">\r\n                    { Object.entries(contactResults).map((contactResult) =>\r\n                        <SidebarContactResult\r\n                            key={contactResult[0]}\r\n                            chatData={contactResult[1]}\r\n                        />\r\n                    )}\r\n                </div>\r\n                }\r\n            </div>\r\n\r\n            <Menu\r\n                anchorEl={anchorEl}\r\n                getContentAnchorEl={null}\r\n                anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\r\n                transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={hideMenu}\r\n                elevation={3}>\r\n                <MenuItem onClick={logOut}>Logout</MenuItem>\r\n            </Menu>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SidebarChat.js",["248"],"import React, {useEffect, useState} from 'react';\r\nimport '../styles/SidebarChat.css';\r\nimport {Avatar} from \"@material-ui/core\";\r\nimport {Link, useHistory, useParams} from \"react-router-dom\";\r\nimport Moment from \"react-moment\";\r\nimport {avatarStyles} from \"../AvatarStyles\";\r\nimport moment from \"moment\";\r\nimport {markOccurrences, replaceEmojis} from \"../Helpers\";\r\nimport {getDroppedFiles, handleDragOver} from \"../FileHelpers\";\r\nimport PubSub from \"pubsub-js\";\r\nimport {CALENDAR_SHORT, EVENT_TOPIC_DROPPED_FILES} from \"../Constants\";\r\nimport ChatMessageClass from \"../ChatMessageClass\";\r\nimport ChatMessageTypeIcon from \"./ChatMessageTypeIcon\";\r\n\r\nfunction SidebarChat(props) {\r\n\r\n    const history = useHistory();\r\n\r\n    const [timeLeft, setTimeLeft] = useState();\r\n    const {waId} = useParams();\r\n    const avatarClasses = avatarStyles();\r\n\r\n    useEffect(() => {\r\n\r\n        function calculateRemaining() {\r\n            const momentDate = moment.unix(props.chatData.lastMessageTimestamp);\r\n            momentDate.add(1, 'day');\r\n            const curDate = moment(new Date());\r\n            const hours = momentDate.diff(curDate, 'hours');\r\n\r\n            let suffix;\r\n\r\n            if (hours > 0) {\r\n                if (hours === 1) {\r\n                    suffix = ' hour';\r\n                } else {\r\n                    suffix = ' hours';\r\n                }\r\n                setTimeLeft(hours + suffix);\r\n            } else {\r\n                const minutes = momentDate.diff(curDate, 'minutes');\r\n                if (minutes > 1) {\r\n                    suffix = ' minutes';\r\n                } else {\r\n                    suffix = ' minute';\r\n                }\r\n                setTimeLeft(minutes + suffix);\r\n            }\r\n        }\r\n\r\n        // Initial\r\n        calculateRemaining();\r\n\r\n        let intervalId;\r\n        if (!props.chatData.isExpired) {\r\n            intervalId = setInterval(() => {\r\n                calculateRemaining();\r\n            }, 30000);\r\n        }\r\n\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        }\r\n\r\n    }, [props.chatData.lastMessageTimestamp]);\r\n\r\n    const handleDroppedFiles = (event) => {\r\n        if (props.chatData.isExpired) {\r\n\r\n        }\r\n\r\n        // Preparing dropped files\r\n        const files = getDroppedFiles(event);\r\n\r\n        // Switching to related chat\r\n        history.push(`/main/chat/${props.chatData.waId}`);\r\n\r\n        // Sending files via eventbus\r\n        PubSub.publish(EVENT_TOPIC_DROPPED_FILES, files);\r\n    }\r\n\r\n    return (\r\n        <Link to={ `/main/chat/${props.chatData.waId}` }>\r\n            <div\r\n                id={props.chatData.waId}\r\n                className={'sidebarChat ' + (waId === props.chatData.waId ? 'activeChat' : '')}\r\n                onDrop={(event) => handleDroppedFiles(event)}\r\n                onDragOver={(event) => handleDragOver(event)}>\r\n\r\n                <Avatar className={props.chatData.isExpired ? '' : avatarClasses[props.chatData.getAvatarClassName()]}>{props.chatData.initials}</Avatar>\r\n                <div className=\"sidebarChat__info\">\r\n\r\n                    <div className=\"sidebarChat__info__nameWrapper\">\r\n                        <h2>\r\n                            {(props.keyword !== undefined && props.keyword.trim().length > 0)\r\n                                ?\r\n                                <span dangerouslySetInnerHTML={{__html: markOccurrences(props.chatData.name, props.keyword)}}/>\r\n                                :\r\n                                <span>{props.chatData.name}</span>\r\n                            }\r\n\r\n                            <span className=\"sidebarChat__info__waId\">{'+' + props.chatData.waId}</span>\r\n                        </h2>\r\n\r\n                        <Moment\r\n                            className=\"sidebarChat__info__nameWrapper__lastMessageDate\"\r\n                            date={props.chatData.lastMessageTimestamp}\r\n                            calendar={CALENDAR_SHORT}\r\n                            unix />\r\n                    </div>\r\n\r\n                    <span className=\"sidebarChat__info__lastMessage\">\r\n                        {((props.unseenMessages[props.chatData.waId]?.unseenMessages ?? 0) > 0 /*&& waId !== props.chatData.waId*/)\r\n                            ?\r\n                            <span className=\"sidebarChat__info__lastMessage__new\">\r\n                                {props.unseenMessages[props.chatData.waId]?.unseenMessages} new message(s)\r\n                            </span>\r\n                            :\r\n                            <span className=\"sidebarChat__info__lastMessage__body\">\r\n                                {props.chatData.lastMessage?.type === ChatMessageClass.TYPE_TEXT\r\n                                    ?\r\n                                    <span dangerouslySetInnerHTML={{__html: replaceEmojis(props.chatData.lastMessageBody, true) }} />\r\n                                    :\r\n                                    <ChatMessageTypeIcon type={props.chatData.lastMessage?.type} />\r\n                                }\r\n                            </span>\r\n                        }\r\n                    </span>\r\n\r\n                    {props.chatData.isExpired\r\n                        ?\r\n                        <span className=\"sidebarChat__info__expired\">Expired</span>\r\n                        :\r\n                        <span className=\"sidebarChat__info__timeLeft\">{timeLeft} left</span>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default SidebarChat","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessage.js",["249","250"],"import React, {useEffect, useRef, useState} from 'react';\r\nimport DoneAll from \"@material-ui/icons/DoneAll\";\r\nimport DoneIcon from '@material-ui/icons/Done';\r\nimport Moment from \"react-moment\";\r\nimport {Avatar, IconButton} from \"@material-ui/core\";\r\nimport PlayArrowIcon from '@material-ui/icons/PlayArrow';\r\nimport '../styles/InputRange.css';\r\nimport PauseIcon from '@material-ui/icons/Pause';\r\nimport HeadsetIcon from '@material-ui/icons/Headset';\r\nimport '../AvatarStyles';\r\nimport {avatarStyles} from \"../AvatarStyles\";\r\nimport PubSub from 'pubsub-js';\r\nimport {formatMessage} from \"../Helpers\";\r\nimport {EVENT_TOPIC_CHAT_MESSAGE} from \"../Constants\";\r\nimport InsertDriveFileIcon from '@material-ui/icons/InsertDriveFile';\r\nimport NoteIcon from '@material-ui/icons/Note';\r\nimport SmsIcon from '@material-ui/icons/Sms';\r\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore';\r\nimport ChatMessageClass from \"../ChatMessageClass\";\r\nimport MessageDateIndicator from \"./MessageDateIndicator\";\r\n\r\nconst playIconStyles = {\r\n    fontSize: '38px'\r\n};\r\n\r\nconst iconStyles = {\r\n    fontSize: '15px'\r\n};\r\n\r\nfunction ChatMessage(props) {\r\n\r\n    const data = props.messageData;\r\n\r\n    const generateInitials = () => {\r\n        return (data.senderName ? data.senderName[0] : '')?.toUpperCase();\r\n    }\r\n\r\n    data.preparedInitials = generateInitials();\r\n    data.preparedAvatarClassName = data.preparedInitials ? data.preparedInitials[0] : '';\r\n\r\n    const [isPlaying, setPlaying] = useState(false);\r\n    const [progress, setProgress] = useState(0);\r\n    const [currentDuration, setCurrentDuration] = useState(\"0:00\");\r\n    const audio = useRef(null);\r\n    const range = useRef(null);\r\n    const duration = useRef(null);\r\n\r\n    const onChatMessageEvent = function (msg, data) {\r\n        if (data === 'pause') {\r\n            pauseVoice();\r\n        }\r\n    };\r\n\r\n    const pauseVoice = () => {\r\n        if (audio.current && range.current && !audio.current.paused) {\r\n            audio.current.pause();\r\n            setPlaying(false);\r\n        }\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Subscribing only if there is voice or audio\r\n        if (data.hasAnyAudio()) {\r\n            const token = PubSub.subscribe(EVENT_TOPIC_CHAT_MESSAGE, onChatMessageEvent);\r\n            return () => {\r\n                PubSub.unsubscribe(token);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const playVoice = () => {\r\n        if (audio.current && range.current) {\r\n            if (!audio.current.paused) {\r\n                audio.current.pause();\r\n                setPlaying(false);\r\n            } else {\r\n\r\n                // Pause others\r\n                PubSub.publishSync(EVENT_TOPIC_CHAT_MESSAGE, 'pause');\r\n\r\n                audio.current.play();\r\n                setPlaying(true);\r\n            }\r\n\r\n            const interval = setInterval(function () {\r\n                if (audio.current && range.current) {\r\n                    const duration = audio.current.duration;\r\n                    const currentTime = audio.current.currentTime;\r\n\r\n                    setCurrentDuration(formatDuration(currentTime));\r\n\r\n                    if (duration) {\r\n                        const percentage = (currentTime * 100) / duration\r\n\r\n                        if (percentage >= 100) {\r\n                            setProgress(0);\r\n                            setCurrentDuration(formatDuration(0));\r\n                            setPlaying(false);\r\n                            clearInterval(interval);\r\n                        } else {\r\n                            setProgress(percentage);\r\n                        }\r\n                    }\r\n\r\n                    if (audio.current.paused) {\r\n                        clearInterval(interval);\r\n                    }\r\n                } else {\r\n                    // In case component is reloaded\r\n                    clearInterval(interval);\r\n                }\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    const formatDuration = (s) => {\r\n        s = Math.floor(s);\r\n        return (s-(s%=60))/60+(9<s?':':':0')+s;\r\n    }\r\n\r\n    const changeDuration = (value) => {\r\n        if (audio.current && range.current && audio.current.duration !== Infinity) {\r\n            setProgress(value);\r\n            const nextCurrentTime = audio.current.duration / value;\r\n            if (nextCurrentTime !== Infinity && !isNaN(nextCurrentTime)) {\r\n                audio.current.currentTime = parseFloat(nextCurrentTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    const avatarClasses = avatarStyles();\r\n\r\n    const dateFormat = 'H:mm';\r\n\r\n    return (\r\n        <div id={'message_' + data.id} className={\"chat__message__outer\" + (data.isFromUs === true ? \" outgoing\" : \"\")}>\r\n\r\n            {props.displayDate &&\r\n            <MessageDateIndicator\r\n                timestamp={data.timestamp} />\r\n            }\r\n\r\n            {(props.displaySender || props.displayDate) &&\r\n            <span className=\"chat__name\">{data.senderName}</span>\r\n            }\r\n\r\n            {data.type === ChatMessageClass.TYPE_STICKER &&\r\n            <img className=\"chat__media chat__sticker\" src={data.generateStickerLink()} alt={data.caption} />\r\n            }\r\n\r\n            <div className={\"chat__message\"\r\n                + (data.hasMediaToPreview() ? \" hasMedia\" : \"\")\r\n                + (data.isFromUs === true ? (data.isRead() ? \" chat__seen\" : \"\") + \" chat__receiver\" : \"\")\r\n                + (!props.displaySender && !props.displayDate ? \" hiddenSender\" : \"\")\r\n                + (data.type === ChatMessageClass.TYPE_TEMPLATE ? \" chat__templateMsg\" : \"\")}>\r\n\r\n                <div className=\"chat__message__more\" onClick={(event => props.onOptionsClick(event, data))}>\r\n                    <ExpandMoreIcon />\r\n                </div>\r\n\r\n                {data.imageLink !== undefined &&\r\n                <img className=\"chat__media\" src={data.imageLink} alt={data.caption} onClick={() => props.onPreview(data)} />\r\n                }\r\n                {data.videoLink !== undefined &&\r\n                <div className=\"chat__videoWrapper\" onClick={() => props.onPreview(data)}>\r\n                    <video className=\"chat__media\" src={data.generateVideoLink()} preload=\"none\" />\r\n                    <span className=\"chat__videoWrapper__iconWrapper\">\r\n                    <PlayArrowIcon fontSize={\"large\"} style={{ fill: \"white\", fontSize: 40 }} />\r\n                </span>\r\n                </div>\r\n                }\r\n                {(data.type === ChatMessageClass.TYPE_VOICE || data.type === ChatMessageClass.TYPE_AUDIO) &&\r\n                <span className=\"chat__voice\">\r\n                    <span ref={duration} className=\"chat__voice__duration\">{currentDuration}</span>\r\n                    <IconButton onClick={() => playVoice()}>\r\n                        {isPlaying ? <PauseIcon style={playIconStyles}/> : <PlayArrowIcon style={playIconStyles}/>}\r\n                    </IconButton>\r\n                    <input ref={range} dir=\"ltr\" type=\"range\" className=\"chat__voice__range\" min=\"0\" max=\"100\" value={progress} onChange={(e) => changeDuration(e.target.value)} />\r\n                    <audio ref={audio} src={data.voiceId ? data.generateVoiceLink() : data.generateAudioLink()} preload=\"none\" onLoadedMetadata={event => console.log(event.target.duration)} />\r\n\r\n                    <Avatar className={(data.voiceId !== undefined ?? data.voiceLink !== undefined) ? avatarClasses[data.preparedInitials] : avatarClasses.orange + \" audioMessageAvatar\"}>\r\n                        {data.voiceId !== undefined ? <span>{data.preparedInitials}</span> : <HeadsetIcon/>}\r\n                    </Avatar>\r\n                </span>\r\n                }\r\n                {data.type === ChatMessageClass.TYPE_DOCUMENT &&\r\n                <a href={data.documentLink} target=\"_blank\" className=\"chat__document\">\r\n                    <InsertDriveFileIcon fontSize=\"small\" />\r\n                    <span className=\"chat__document__filename\">{data.documentCaption ?? (data.documentFileName ?? 'Document')}</span>\r\n                </a>\r\n                }\r\n\r\n                {data.type === ChatMessageClass.TYPE_STICKER &&\r\n                <span>\r\n                    <NoteIcon fontSize=\"small\" />\r\n                </span>\r\n                }\r\n\r\n                {data.type === ChatMessageClass.TYPE_TEMPLATE &&\r\n                <span className=\"chat__templateHeader\">\r\n                    <SmsIcon />Template message:<br/>\r\n                </span>\r\n                }\r\n\r\n                {data.type === ChatMessageClass.TYPE_TEMPLATE &&\r\n                <span className=\"wordBreak\" dangerouslySetInnerHTML={{__html: formatMessage(props.templates[data.templateName]?.text) }} />\r\n                }\r\n\r\n                {(data.text ?? data.caption) ? <span className=\"wordBreak\" dangerouslySetInnerHTML={{__html: formatMessage((data.text ?? data.caption))}} /> : '\\u00A0'}\r\n\r\n                <span className=\"chat__message__info\">\r\n                    <span className=\"chat__timestamp\"><Moment date={data.timestamp} format={dateFormat} unix /></span>\r\n\r\n                    {(data.isFromUs === true && !data.isDeliveredOrRead()) &&\r\n                    <DoneIcon className=\"chat__iconDone\" color=\"inherit\" style={iconStyles} />\r\n                    }\r\n\r\n                    {(data.isFromUs === true && data.isDeliveredOrRead()) &&\r\n                    <DoneAll className=\"chat__iconDoneAll\" color=\"inherit\" style={iconStyles} />\r\n                    }\r\n                </span>\r\n\r\n                <div style={{clear: \"both\"}} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatMessage","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Main.js",["251"],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\AppTheme.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\Helpers.js",["252","253","254"],"import {Emoji, getEmojiDataFromNative} from \"emoji-mart\";\r\nimport data from './EmojiData.json'; //from 'emoji-mart/data/all.json'\r\nimport {EMOJI_SET, EMOJI_SHEET_SIZE} from \"./Constants\";\r\n\r\nconst { htmlToText } = require('html-to-text');\r\nconst emojiRegex = require('emoji-regex/RGI_Emoji.js');\r\n\r\nexport const getToken = () => {\r\n    return localStorage.getItem(\"token\");\r\n}\r\n\r\nexport const getConfig = (params, cancelToken) => {\r\n    return {\r\n        params,\r\n        headers: {\r\n            'Authorization': 'Token ' + getToken(),\r\n            'Content-Type': 'application/json',\r\n            'Accept': 'application/json'\r\n        },\r\n        cancelToken: cancelToken\r\n    }\r\n}\r\n\r\nconst STORAGE_TAG_TOKEN = \"token\";\r\n\r\nexport const setToken = (token) => {\r\n    localStorage.setItem(STORAGE_TAG_TOKEN, token);\r\n}\r\n\r\nexport const clearToken = () => {\r\n    localStorage.removeItem(STORAGE_TAG_TOKEN);\r\n}\r\n\r\nexport const getObjLength = (obj) => {\r\n    return obj ? Object.keys(obj).length : 0;\r\n}\r\n\r\nfunction linkify(inputText) {\r\n    let replacedText, replacePattern1, replacePattern2, replacePattern3;\r\n\r\n    // URLs starting with http://, https://, or ftp://\r\n    replacePattern1 = /(\\b(https?|ftp):\\/\\/[-A-Z0-9+&@#/%?=~_|!:,.;]*[-A-Z0-9+&@#/%=~_|])/gim;\r\n    replacedText = inputText.replace(replacePattern1, '<a href=\"$1\" target=\"_blank\">$1</a>');\r\n\r\n    // URLs starting with \"www.\" (without // before it, or it'd re-link the ones done above).\r\n    replacePattern2 = /(^|[^/])(www\\.[\\S]+(\\b|$))/gim;\r\n    replacedText = replacedText.replace(replacePattern2, '$1<a href=\"http://$2\" target=\"_blank\">$2</a>');\r\n\r\n    // Change email addresses to mailto:: links.\r\n    replacePattern3 = /(([a-zA-Z0-9\\-_.])+@[a-zA-Z_]+?(\\.[a-zA-Z]{2,6})+)/gim;\r\n    replacedText = replacedText.replace(replacePattern3, '<a href=\"mailto:$1\">$1</a>');\r\n\r\n    return replacedText;\r\n}\r\n\r\nexport const formatMessage = (message) => {\r\n    if (!message) return;\r\n\r\n    let formatted = message.replaceAll('\\n', '<br/>');\r\n    formatted = linkify(formatted);\r\n    return replaceEmojis(formatted);\r\n}\r\n\r\nfunction containsOnlyEmojis(text) {\r\n    const onlyEmojis = text.replace(new RegExp('[\\u0000-\\u1eeff]', 'g'), '')\r\n    const visibleChars = text.replace(new RegExp('[\\n\\r\\s]+|( )+', 'g'), '')\r\n    return onlyEmojis.length === visibleChars.length\r\n}\r\n\r\nexport const replaceEmojis = (message, ignoreOnlyEmojis) => {\r\n    if (!message) return;\r\n\r\n    const onlyEmojis = !ignoreOnlyEmojis ? containsOnlyEmojis(message) : false;\r\n    const regex = emojiRegex();\r\n\r\n    return message.replace(regex, function (occurrence) {\r\n        // TODO: Finding emoji data is too slow, find an alternative or improve it\r\n        const emojiData = getEmojiDataFromNative(occurrence, EMOJI_SET, data);\r\n        if (emojiData) {\r\n            return Emoji({\r\n                html: true,\r\n                emoji: emojiData,\r\n                size: onlyEmojis ? 44 : 22,\r\n                set: EMOJI_SET,\r\n                sheetSize: EMOJI_SHEET_SIZE\r\n            })\r\n        } else {\r\n            return occurrence;\r\n        }\r\n    });\r\n}\r\n\r\nexport const translateHTMLInputToText = (html) => {\r\n    let result;\r\n    //const reg = new RegExp('((<span\\\\b[^>]*\\\\s\\\\bstyle=([\"\\'])([^\"]*)\\\\3[^>]*>)(.*?)</span>)', 'g');\r\n    const reg = new RegExp('<img\\\\s[^>]*?src\\\\s*=\\\\s*[\\'\\\\\"]([^\\'\\\\\"]*?)[\\'\\\\\"][^>]*?>', 'g');\r\n    result = html.replace(reg, function (occurrences) {\r\n        // Extract unicode from aria-label\r\n        const matches = occurrences.match(new RegExp('aria-label=\"\\\\s*(.*?)\\\\s*,'), '$1');\r\n        if (matches && matches.length >= 1) {\r\n            return matches[1];\r\n        }\r\n        return '';\r\n    });\r\n\r\n    // Convert it to plain text\r\n    result = htmlToText(result);\r\n\r\n    return result;\r\n}\r\n\r\nexport const markOccurrences = (message, sub) => {\r\n    if (!message) return;\r\n\r\n    const reg = new RegExp('(' + sub + ')', 'gi');\r\n    return message.replace(reg, '<span class=\"searchOccurrence\">$1</span>');\r\n}\r\n\r\nexport const getFirstObject = (jsonObject) => {\r\n    return jsonObject[Object.keys(jsonObject)[0]];\r\n}\r\n\r\nexport const getLastObject = (jsonObject) => {\r\n    return jsonObject[Object.keys(jsonObject)[Object.keys(jsonObject).length - 1]];\r\n}\r\n\r\nexport const getObjectByIndex = (jsonObject, index) => {\r\n    return jsonObject[Object.keys(jsonObject)[index]];\r\n}\r\n\r\nexport const getLastMessageAndExtractTimestamp = (messagesObject) => {\r\n    const last = getLastObject(messagesObject);\r\n    return extractTimestampFromMessage(last);\r\n}\r\n\r\nexport const extractTimestampFromMessage = (message) => {\r\n    return message ? parseInt(message.timestamp) : -1;\r\n}\r\n\r\nexport const stringContainsAnyInArray = (string, array) => {\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (string.includes(array[i])) {\r\n            return true;\r\n        }\r\n    }\r\n\r\n    return false;\r\n}\r\n\r\nexport const getSelectionHtml = () => {\r\n    let html = \"\";\r\n    if (typeof window.getSelection != \"undefined\") {\r\n        const sel = window.getSelection();\r\n        if (sel.rangeCount) {\r\n            const container = document.createElement(\"div\");\r\n            for (let i = 0, len = sel.rangeCount; i < len; ++i) {\r\n                container.appendChild(sel.getRangeAt(i).cloneContents());\r\n            }\r\n            html = container.innerHTML;\r\n        }\r\n    } else if (typeof document.selection != \"undefined\") {\r\n        if (document.selection.type === \"Text\") {\r\n            html = document.selection.createRange().htmlText;\r\n        }\r\n    }\r\n    return html;\r\n}\r\n\r\nexport const getBaseURL = () => {\r\n    const windowLocation = window.location;\r\n    return windowLocation.protocol + \"//\" + windowLocation.host + \"/\";\r\n}\r\n\r\nexport const getWebSocketURL = () => {\r\n    const baseURL = getBaseURL();\r\n    if (baseURL.includes('localhost')) {\r\n        return 'wss://websockets.whatsapp.kondz.io/';\r\n    } else {\r\n        return baseURL.replace('https://', 'wss://websockets.').replace('http://', 'wss://websockets.');\r\n    }\r\n}\r\n\r\nexport const displaySeconds = (seconds) => {\r\n    const format = val => `0${Math.floor(val)}`.slice(-2);\r\n    //const hours = seconds / 3600;\r\n    const minutes = (seconds % 3600) / 60;\r\n\r\n    return [minutes, seconds % 60].map(format).join(':');\r\n}","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\Constants.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\AvatarStyles.js",["255"],"import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nfunction hashCode(str) {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n    }\r\n    return hash;\r\n}\r\n\r\nfunction intToRGB(i) {\r\n    const c = (i & 0x00FFFFFF)\r\n        .toString(16)\r\n        .toUpperCase();\r\n\r\n    return \"00000\".substring(0, 6 - c.length) + c;\r\n}\r\n\r\nconst prepareStylesObject = () => {\r\n    let obj = {};\r\n    for (let i = 65; i <= 90; i++) {\r\n        const curLetter = String.fromCharCode(i);\r\n        obj[curLetter] = {\r\n            color: '#fff',\r\n            backgroundColor: '#' + intToRGB(hashCode(curLetter.repeat(6)))\r\n        };\r\n    }\r\n    obj[\"orange\"] = {\"color\": \"#fff\", \"backgroundColor\": \"#ff9a10\"};\r\n\r\n    return obj;\r\n}\r\n\r\n// In case generating colors is needed again, this can be enabled\r\n//const avatarStyles = makeStyles((theme) => (prepareStylesObject()));\r\n\r\nconst avatarStyles = makeStyles((theme) => ({\r\n    \"A\": {\"color\": \"#fff\", \"backgroundColor\": \"#9D8060\"},\r\n    \"B\": {\"color\": \"#fff\", \"backgroundColor\": \"#60E8C0\"},\r\n    \"C\": {\"color\": \"#fff\", \"backgroundColor\": \"#245120\"},\r\n    \"D\": {\"color\": \"#fff\", \"backgroundColor\": \"#E7B980\"},\r\n    \"E\": {\"color\": \"#fff\", \"backgroundColor\": \"#AB21E0\"},\r\n    \"F\": {\"color\": \"#fff\", \"backgroundColor\": \"#6E8A40\"},\r\n    \"G\": {\"color\": \"#fff\", \"backgroundColor\": \"#31d5f2\"},\r\n    \"H\": {\"color\": \"#fff\", \"backgroundColor\": \"#f55600\"},\r\n    \"I\": {\"color\": \"#fff\", \"backgroundColor\": \"#B8C360\"},\r\n    \"J\": {\"color\": \"#fff\", \"backgroundColor\": \"#7C2BC0\"},\r\n    \"K\": {\"color\": \"#fff\", \"backgroundColor\": \"#bc942e\"},\r\n    \"L\": {\"color\": \"#fff\", \"backgroundColor\": \"#02FC80\"},\r\n    \"M\": {\"color\": \"#fff\", \"backgroundColor\": \"#C664E0\"},\r\n    \"N\": {\"color\": \"#fff\", \"backgroundColor\": \"#89CD40\"},\r\n    \"O\": {\"color\": \"#fff\", \"backgroundColor\": \"#4e2a88\"},\r\n    \"P\": {\"color\": \"#fff\", \"backgroundColor\": \"#109E00\"},\r\n    \"Q\": {\"color\": \"#fff\", \"backgroundColor\": \"#ee2a81\"},\r\n    \"R\": {\"color\": \"#fff\", \"backgroundColor\": \"#976EC0\"},\r\n    \"S\": {\"color\": \"#fff\", \"backgroundColor\": \"#5AD720\"},\r\n    \"T\": {\"color\": \"#fff\", \"backgroundColor\": \"#1E3F80\"},\r\n    \"U\": {\"color\": \"#fff\", \"backgroundColor\": \"#E1A7E0\"},\r\n    \"V\": {\"color\": \"#fff\", \"backgroundColor\": \"#A51040\"},\r\n    \"W\": {\"color\": \"#fff\", \"backgroundColor\": \"#6878A0\"},\r\n    \"X\": {\"color\": \"#fff\", \"backgroundColor\": \"#2BE100\"},\r\n    \"Y\": {\"color\": \"#fff\", \"backgroundColor\": \"#EF4960\"},\r\n    \"Z\": {\"color\": \"#fff\", \"backgroundColor\": \"#B2B1C0\"},\r\n    \"orange\": {\"color\": \"#fff\", \"backgroundColor\": \"#ff9a10\"}\r\n}));\r\n\r\nexport {avatarStyles}","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ChatMessageClass.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\AttachmentTypesMenu.js",["256","257"],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ContactClass.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatFooterExpired.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\TemplateMessages.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\TemplateMessageClass.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatFooter.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatHeader.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\UnseenMessageClass.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\DateHelpers.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SearchMessage.js",["258"],"import React, {useEffect, useState} from 'react';\r\nimport '../styles/SearchMessage.css';\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport PubSub from \"pubsub-js\";\r\nimport {BASE_URL, EVENT_TOPIC_GO_TO_MSG_ID, EVENT_TOPIC_SEARCH_MESSAGES_VISIBILITY} from \"../Constants\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport {getConfig} from \"../Helpers\";\r\nimport ChatMessageClass from \"../ChatMessageClass\";\r\nimport SearchMessageResult from \"./SearchMessageResult\";\r\n\r\nfunction SearchMessage(props) {\r\n\r\n    const [results, setResults] = useState({});\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const {waId} = useParams();\r\n\r\n    useEffect(() => {\r\n        setResults({});\r\n    }, [waId]);\r\n\r\n    const hideSearchMessages = () => {\r\n        PubSub.publish(EVENT_TOPIC_SEARCH_MESSAGES_VISIBILITY, false);\r\n    }\r\n\r\n    let cancelToken;\r\n\r\n    const search = async (_keyword) => {\r\n        setKeyword(_keyword);\r\n\r\n        // Check if there are any previous pending requests\r\n        if (cancelToken !== undefined) {\r\n            cancelToken.cancel(\"Operation canceled due to new request.\");\r\n        }\r\n\r\n        // Generate a token\r\n        cancelToken = axios.CancelToken.source();\r\n\r\n        if (_keyword.trim().length === 0) {\r\n            setResults({});\r\n            return false;\r\n        }\r\n\r\n        axios.get( `${BASE_URL}messages/${waId}/`,\r\n            getConfig({\r\n                //offset: offset ?? 0,\r\n                limit: 30,\r\n                search: _keyword\r\n            }, cancelToken.token)\r\n        )\r\n            .then((response) => {\r\n                console.log(\"Messages\", response.data);\r\n\r\n                const preparedMessages = {};\r\n                response.data.results.map((message, index) => {\r\n                    const prepared = new ChatMessageClass(message);\r\n                    preparedMessages[prepared.id] = prepared;\r\n                });\r\n\r\n                setResults(preparedMessages);\r\n\r\n            })\r\n            .catch((error) => {\r\n                // TODO: Handle errors\r\n\r\n                //displayError(error);\r\n            });\r\n    }\r\n\r\n    const goToMessage = (data) => {\r\n        PubSub.publish(EVENT_TOPIC_GO_TO_MSG_ID, data);\r\n    }\r\n\r\n    return (\r\n        <div className=\"searchMessage\">\r\n            <div className=\"searchMessage__header\">\r\n                <IconButton onClick={hideSearchMessages}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n\r\n                <h3>Search For Messages</h3>\r\n            </div>\r\n\r\n            <SearchBar onChange={search} />\r\n\r\n            <div className=\"searchMessage__body\">\r\n                { Object.entries(results).map((message, index) =>\r\n                    <SearchMessageResult\r\n                        key={message[0]}\r\n                        waId={waId}\r\n                        messageData={message[1]}\r\n                        keyword={keyword}\r\n                        onClick={(chatMessage) => goToMessage(chatMessage)}/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchMessage;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SearchBar.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageOptionsMenu.js",["259"],"import React, {useState} from 'react';\r\nimport {Menu, MenuItem} from \"@material-ui/core\";\r\n\r\nfunction ChatMessageOptionsMenu(props) {\r\n\r\n    const hideMenu = () => {\r\n        props.setMenuAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <Menu\r\n            anchorEl={props.menuAnchorEl}\r\n            getContentAnchorEl={null}\r\n            anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\r\n            transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n            keepMounted\r\n            open={Boolean(props.menuAnchorEl)}\r\n            onClose={hideMenu}\r\n            elevation={3}\r\n            disableAutoFocusItem={true}>\r\n\r\n            <MenuItem>Delete</MenuItem>\r\n\r\n            {(props.optionsChatMessage && props.optionsChatMessage.isFromUs) &&\r\n            <MenuItem>Another option for outgoing messages</MenuItem>\r\n            }\r\n\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default ChatMessageOptionsMenu;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\CreateTemplate.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SearchMessageResult.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ContactDetails.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SidebarContactResult.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ChatClass.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\MessageDateIndicator.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\LoadingScreen.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\PreviewSendMedia.js",["260","261","262","263"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport '../styles/PreviewSendMedia.css';\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport {ButtonBase, IconButton, TextField} from \"@material-ui/core\";\r\nimport {getFirstObject, getLastObject, getObjLength} from \"../Helpers\";\r\nimport Send from \"@material-ui/icons/Send\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport {\r\n    ATTACHMENT_TYPE_AUDIO,\r\n    ATTACHMENT_TYPE_DOCUMENT,\r\n    ATTACHMENT_TYPE_IMAGE,\r\n    ATTACHMENT_TYPE_VIDEO,\r\n    EMPTY_IMAGE_BASE64, EVENT_TOPIC_RELOAD_PREVIEW\r\n} from \"../Constants\";\r\nimport FileInput from \"./FileInput\";\r\nimport {getDroppedFiles, handleDragOver, prepareSelectedFiles} from \"../FileHelpers\";\r\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\r\nimport AudiotrackIcon from \"@material-ui/icons/Audiotrack\";\r\n\r\nimport {Document, Page, pdfjs} from \"react-pdf\";\r\nimport PubSub from \"pubsub-js\";\r\nimport {useForceUpdate} from \"../hooks/useForceUpdate\";\r\n\r\nfunction PreviewSendMedia(props) {\r\n\r\n    const fileInput = useRef(null);\r\n\r\n    const [data, setData] = useState({});\r\n    const [chosenFile, setChosenFile] = useState();\r\n    const [captions, setCaptions] = useState({});\r\n    const [currentCaption, setCurrentCaption] = useState(\"\");\r\n    const [isDragOverlayVisible, setDragOverlayVisible] = useState(false);\r\n\r\n    const forceUpdate = useForceUpdate();\r\n\r\n    const hidePreview = () => {\r\n        props.setPreviewSendMediaVisible(false);\r\n    }\r\n\r\n    const changePreview = (index) => {\r\n        if (index >= 0 && data[index] !== undefined) {\r\n            setChosenFile(data[index]);\r\n        }\r\n    }\r\n\r\n    const deleteByIndex = (index) => {\r\n        const dataSize = getObjLength(data);\r\n        if (index >= 0 && data[index] !== undefined) {\r\n            if (dataSize === 1) {\r\n                props.setPreviewSendMediaVisible(false);\r\n            } else {\r\n                let nextState = {};\r\n                setData(prevState => {\r\n                    delete prevState[index];\r\n                    nextState = {...{}, ...prevState};\r\n                    return nextState;\r\n                });\r\n\r\n                if (chosenFile && chosenFile.key === index) {\r\n                    changePreview(getFirstObject(nextState).key);\r\n                }\r\n\r\n                setCaptions(prevState => {\r\n                    delete prevState[index];\r\n                    return prevState;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const send = () => {\r\n        const finalData = data;\r\n\r\n        // Inject captions\r\n        const finalPreparedData = {};\r\n        Object.entries(finalData).forEach((curChosenFile) => {\r\n            const copyCurChosenFile = curChosenFile[1];\r\n            copyCurChosenFile.caption = captions[copyCurChosenFile.key] ?? '';\r\n            finalPreparedData[copyCurChosenFile.key] = copyCurChosenFile;\r\n        });\r\n\r\n        // Send\r\n        props.sendHandledChosenFiles(finalData);\r\n\r\n        // Hide\r\n        props.setPreviewSendMediaVisible(false);\r\n    }\r\n\r\n    const handleSelectedFiles = (selectedFiles) => {\r\n        console.log(selectedFiles);\r\n\r\n        if (getObjLength(selectedFiles) > 0) {\r\n            const preparedFiles = prepareSelectedFiles(selectedFiles);\r\n\r\n            // Updating data with new files\r\n            setData(prevState => {\r\n                const newState = prevState;\r\n                let nextIndex = parseInt(getLastObject(newState).key) + 1;\r\n                Object.entries(preparedFiles).forEach((curPreparedFile) => {\r\n                    const preparedFile = curPreparedFile[1];\r\n                    preparedFile.key = nextIndex.toString();\r\n                    newState[nextIndex] = preparedFile;\r\n                    nextIndex++;\r\n                });\r\n\r\n                return {...{}, ...newState};\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // For PDF previews\r\n        pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\n        setData(props.data);\r\n        setCaptions({});\r\n\r\n        const reloadPreview = (msg, data) => {\r\n            // Just to rerender\r\n            forceUpdate();\r\n        }\r\n\r\n        // Force async codec information\r\n        const token = PubSub.subscribe(EVENT_TOPIC_RELOAD_PREVIEW, reloadPreview);\r\n\r\n        return () => {\r\n            // Clear data\r\n            props.setData({});\r\n\r\n            PubSub.unsubscribe(token);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (chosenFile && data) {\r\n            const handleKey = (event) => {\r\n                // If any element is focused, ignore key\r\n                if (document.activeElement.tagName === \"INPUT\") {\r\n                    return false;\r\n                }\r\n\r\n                if (event.keyCode === 27) { // Escape\r\n                    hidePreview();\r\n                } else if (event.keyCode === 37) { // Left arrow\r\n                    changePreview(parseInt(chosenFile.key) - 1);\r\n                } else if (event.keyCode === 39) { // Right arrow\r\n                    changePreview(parseInt(chosenFile.key) + 1);\r\n                }\r\n            };\r\n\r\n            document.addEventListener('keydown', handleKey);\r\n\r\n            return () => {\r\n                document.removeEventListener('keydown', handleKey);\r\n            };\r\n        }\r\n    }, [chosenFile, data]);\r\n\r\n    useEffect(() => {\r\n        if (chosenFile) {\r\n            setCaptions(prevState => {\r\n                const newState = {};\r\n                newState[chosenFile.key] = currentCaption;\r\n\r\n                return {...prevState, ...newState};\r\n            })\r\n        }\r\n    }, [currentCaption]);\r\n\r\n    useEffect(() => {\r\n        // Preview first one\r\n        if (!chosenFile && getObjLength(data) > 0) {\r\n            changePreview(0)\r\n        }\r\n\r\n    }, [data]);\r\n\r\n    useEffect(() => {\r\n        if (chosenFile) {\r\n            setCurrentCaption(captions[chosenFile.key] ?? '');\r\n        }\r\n    }, [chosenFile, captions]);\r\n\r\n    return (\r\n        <div\r\n            className=\"previewSendMedia\"\r\n            /*onDragEnter={() => setDragOverlayVisible(true)}*/\r\n            onDrop={(event) => handleSelectedFiles(getDroppedFiles(event))}\r\n            onDragOver={(event) => handleDragOver(event)}>\r\n            <div className=\"previewSendMedia__header\">\r\n\r\n                <CloseIcon onClick={hidePreview}/>\r\n                <span>Preview</span>\r\n            </div>\r\n\r\n            <div className=\"previewSendMedia__preview\">\r\n                <div className=\"previewSendMedia__preview__wrapper\">\r\n                    {(chosenFile && chosenFile.attachmentType === ATTACHMENT_TYPE_IMAGE) &&\r\n                    <img className=\"previewSendMedia__preview__image\" src={chosenFile.fileURL} alt=\"Preview\" />\r\n                    }\r\n                    {(chosenFile && chosenFile.attachmentType === ATTACHMENT_TYPE_VIDEO) &&\r\n                    <video className=\"previewSendMedia__preview__video\" src={chosenFile.fileURL} controls={true} />\r\n                    }\r\n                    {(chosenFile && chosenFile.isPDF) &&\r\n                    <Document\r\n                        className=\"previewSendMedia__preview__pdf\"\r\n                        file={chosenFile.fileURL}>\r\n                        <Page pageNumber={1} scale={0.75} />\r\n                    </Document>\r\n                    }\r\n                </div>\r\n\r\n                {(chosenFile && chosenFile.attachmentType !== ATTACHMENT_TYPE_IMAGE && chosenFile.attachmentType !== ATTACHMENT_TYPE_VIDEO && !chosenFile.isPDF) &&\r\n                <div>\r\n                    {chosenFile.attachmentType}, <span className=\"searchOccurrence\">{chosenFile.file?.name}</span>\r\n                </div>\r\n                }\r\n            </div>\r\n\r\n            {(chosenFile && (chosenFile.attachmentType === ATTACHMENT_TYPE_IMAGE || chosenFile.attachmentType === ATTACHMENT_TYPE_VIDEO)) &&\r\n            <div className=\"previewSendMedia__caption\">\r\n                <TextField value={currentCaption}\r\n                           onChange={e => setCurrentCaption(e.target.value)}\r\n                           label=\"Add a caption...\"\r\n                           size=\"medium\"\r\n                           fullWidth={true}/>\r\n            </div>\r\n            }\r\n\r\n            <div className=\"previewSendMedia__footer\">\r\n\r\n                <div className=\"previewSendMedia__footer__inner\">\r\n                    { Object.entries(data).map((file) => {\r\n                        return (\r\n                            <span key={file[0]} className=\"previewSendMedia__footer__thumbnailOuter\">\r\n                                <span\r\n                                    className={\"previewSendMedia__footer__thumbnail\" + (chosenFile === file[1] ? \" chosenFile\" : \"\")}\r\n                                    onClick={() => changePreview(file[0])}>\r\n\r\n                                    {(file[1].attachmentType === ATTACHMENT_TYPE_IMAGE || file[1].attachmentType === ATTACHMENT_TYPE_VIDEO) &&\r\n                                    <img\r\n                                        className=\"previewSendMedia__footer__thumbnail__image\"\r\n                                        src={file[1].attachmentType === ATTACHMENT_TYPE_IMAGE ? file[1].fileURL : EMPTY_IMAGE_BASE64}\r\n                                        alt=\"Thumbnail\"\r\n                                    />\r\n                                    }\r\n\r\n                                    {(file[1].attachmentType === ATTACHMENT_TYPE_DOCUMENT) &&\r\n                                    <span className=\"previewSendMedia__footer__thumbnail__iconWrapper\">\r\n                                        <InsertDriveFileIcon />\r\n                                    </span>\r\n                                    }\r\n\r\n                                    {(file[1].attachmentType === ATTACHMENT_TYPE_AUDIO) &&\r\n                                    <span className=\"previewSendMedia__footer__thumbnail__iconWrapper\">\r\n                                        <AudiotrackIcon />\r\n                                    </span>\r\n                                    }\r\n                                </span>\r\n\r\n                                <IconButton onClick={() => deleteByIndex(file[0])} className=\"previewSendMedia__footer__thumbnail__delete\">\r\n                                    <CloseIcon />\r\n                                </IconButton>\r\n\r\n                            </span>\r\n                        )\r\n                    }) }\r\n\r\n                    <ButtonBase className=\"previewSendMedia__footer__addMoreWrapper\" onClick={() => fileInput.current?.click()}>\r\n                        <div className=\"previewSendMedia__footer__addMore\">\r\n                            <AddIcon/>\r\n                            <span>Add more</span>\r\n                        </div>\r\n                    </ButtonBase>\r\n\r\n                    <div className=\"hidden\">\r\n                        <FileInput innerRef={fileInput} accept=\"*.*\" handleSelectedFiles={handleSelectedFiles} />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"previewSendMedia__footer__sendWrapper\">\r\n                    <IconButton className=\"previewSendMedia__footer__send\" onClick={send}>\r\n                        <Send />\r\n                    </IconButton>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {isDragOverlayVisible &&\r\n            <div className=\"previewSendMedia__dragOverlay\" onDragLeave={() => setDragOverlayVisible(false)}>\r\n                <div className=\"previewSendMedia__dragOverlay__innerWrapper\">\r\n                    Drag and drop here\r\n                </div>\r\n            </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PreviewSendMedia;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\FileInput.js",["264"],"import React, {useState} from \"react\";\r\n\r\nfunction FileInput(props) {\r\n\r\n    return (\r\n        <input\r\n            ref={props.innerRef}\r\n            type=\"file\"\r\n            onChange={(e) => props.handleSelectedFiles(e.target.files)}\r\n            multiple={true}\r\n            onClick={(event)=> {\r\n                event.target.value = null\r\n            }}\r\n            accept={props.accept}\r\n        />\r\n    )\r\n}\r\n\r\nexport default FileInput;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\FileHelpers.js",["265"],"import ChosenFileClass from \"./ChosenFileClass\";\r\nimport {\r\n    ATTACHMENT_TYPE_AUDIO,\r\n    ATTACHMENT_TYPE_DOCUMENT,\r\n    ATTACHMENT_TYPE_IMAGE,\r\n    ATTACHMENT_TYPE_VIDEO\r\n} from \"./Constants\";\r\nimport {stringContainsAnyInArray} from \"./Helpers\";\r\nimport * as musicMetadata from \"music-metadata-browser\";\r\n\r\nexport const prepareSelectedFiles = (selectedFiles) => {\r\n    const preparedFiles = {};\r\n    Object.entries(selectedFiles).forEach((file) => {\r\n        preparedFiles[file[0]] = new ChosenFileClass(file[0], file[1], true);\r\n    });\r\n\r\n    return preparedFiles;\r\n}\r\n\r\nexport const getDroppedFiles = (event) => {\r\n    event.preventDefault();\r\n\r\n    /*let i;\r\n    if (event.dataTransfer.items) {\r\n        // Use DataTransferItemList interface to access the file(s)\r\n        for (i = 0; i < event.dataTransfer.items.length; i++) {\r\n            // If dropped items aren't files, reject them\r\n            if (event.dataTransfer.items[i].kind === 'file') {\r\n                const file = event.dataTransfer.items[i].getAsFile();\r\n                console.log('... file[' + i + '].name = ' + file.name);\r\n            }\r\n        }\r\n    } else {\r\n        // Use DataTransfer interface to access the file(s)\r\n        for (i = 0; i < event.dataTransfer.files.length; i++) {\r\n            console.log('... file[' + i + '].name = ' + event.dataTransfer.files[i].name);\r\n        }\r\n    }*/\r\n\r\n    return {...event.dataTransfer.files};\r\n}\r\n\r\nexport const getAttachmentTypeByFile = (file, callback) => {\r\n    const mimeType = file.type;\r\n    if (mimeType.includes('image')) {\r\n        const supportedImageTypes = ['image/jpeg', 'image/png', 'image/webp'];\r\n        if (stringContainsAnyInArray(mimeType, supportedImageTypes)) {\r\n            return ATTACHMENT_TYPE_IMAGE;\r\n        }\r\n    } else if (mimeType.includes('video')) {\r\n        const supportedVideoTypes = ['video/mp4', 'video/3gpp'];\r\n        if (stringContainsAnyInArray(mimeType, supportedVideoTypes)) {\r\n            return ATTACHMENT_TYPE_VIDEO;\r\n        }\r\n    } else if (mimeType.includes('audio')) {\r\n        // OGG is an exception\r\n        if (mimeType.includes('audio/ogg')) {\r\n\r\n            // This will be skipped for voice recording, we know what is type\r\n            if (callback !== undefined) {\r\n\r\n                // Get codec information async\r\n                musicMetadata.parseBlob(file).then(metadata => {\r\n                    const codec = metadata?.format?.codec;\r\n                    // OGG files with Opus codec are supported\r\n                    if (codec && codec.toLowerCase().includes('opus')) {\r\n                        callback(ATTACHMENT_TYPE_AUDIO);\r\n                    } else {\r\n                        // Base OGG files are not supported\r\n                        callback(ATTACHMENT_TYPE_DOCUMENT);\r\n                    }\r\n                })\r\n            }\r\n\r\n            return ATTACHMENT_TYPE_DOCUMENT;\r\n\r\n        } else {\r\n            // If not OGG\r\n            const supportedAudioTypes = ['audio/aac', 'audio/mp4', 'audio/amr', 'audio/mpeg'];\r\n            if (stringContainsAnyInArray(mimeType, supportedAudioTypes)) {\r\n                return ATTACHMENT_TYPE_AUDIO;\r\n            }\r\n        }\r\n    }\r\n\r\n    return ATTACHMENT_TYPE_DOCUMENT;\r\n}\r\n\r\nexport const convertToBase64 = (file, callback) => {\r\n    const fileReader = new FileReader();\r\n    let base64;\r\n\r\n    fileReader.onload = function(fileLoadedEvent) {\r\n        base64 = fileLoadedEvent.target.result;\r\n\r\n        callback(base64);\r\n    };\r\n\r\n    fileReader.readAsDataURL(file);\r\n}\r\n\r\nexport const b64toBlob = (b64Data, contentType = '', sliceSize = 512) => {\r\n    const byteCharacters = atob(b64Data);\r\n    const byteArrays = [];\r\n\r\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n        const slice = byteCharacters.slice(offset, offset + sliceSize);\r\n\r\n        const byteNumbers = new Array(slice.length);\r\n        for (let i = 0; i < slice.length; i++) {\r\n            byteNumbers[i] = slice.charCodeAt(i);\r\n        }\r\n\r\n        const byteArray = new Uint8Array(byteNumbers);\r\n        byteArrays.push(byteArray);\r\n    }\r\n\r\n    return new Blob(byteArrays, {type: contentType});\r\n}\r\n\r\nexport const handleDragOver = (event) => {\r\n    event.preventDefault();\r\n}\r\n\r\nconst getVideoCover = (file, seekTo = 0.0) => {\r\n    console.log(\"getting video cover for file: \", file);\r\n    return new Promise((resolve, reject) => {\r\n        // load the file to a video player\r\n        const videoPlayer = document.createElement('video');\r\n        videoPlayer.setAttribute('src', URL.createObjectURL(file));\r\n        videoPlayer.load();\r\n        videoPlayer.addEventListener('error', (ex) => {\r\n            reject(\"error when loading video file\", ex);\r\n        });\r\n        // load metadata of the video to get video duration and dimensions\r\n        videoPlayer.addEventListener('loadedmetadata', () => {\r\n            // seek to user defined timestamp (in seconds) if possible\r\n            if (videoPlayer.duration < seekTo) {\r\n                reject(\"video is too short.\");\r\n                return;\r\n            }\r\n            // delay seeking or else 'seeked' event won't fire on Safari\r\n            setTimeout(() => {\r\n                videoPlayer.currentTime = seekTo;\r\n            }, 200);\r\n            // extract video thumbnail once seeking is complete\r\n            videoPlayer.addEventListener('seeked', () => {\r\n                console.log('video is now paused at %ss.', seekTo);\r\n                // define a canvas to have the same dimension as the video\r\n                const canvas = document.createElement(\"canvas\");\r\n                canvas.width = videoPlayer.videoWidth;\r\n                canvas.height = videoPlayer.videoHeight;\r\n                // draw the video frame to canvas\r\n                const ctx = canvas.getContext(\"2d\");\r\n                ctx.drawImage(videoPlayer, 0, 0, canvas.width, canvas.height);\r\n                // return the canvas image as a blob\r\n                ctx.canvas.toBlob(\r\n                    blob => {\r\n                        resolve(blob);\r\n                    },\r\n                    \"image/jpeg\",\r\n                    0.75 /* quality */\r\n                );\r\n            });\r\n        });\r\n    });\r\n}","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ChosenFileClass.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\hooks\\useForceUpdate.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageTypeIcon.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\VoiceRecorder.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\VoiceRecord.js",["266","267"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\";\r\nimport {displaySeconds} from \"../Helpers\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport '../styles/VoiceRecord.css';\r\nimport VoiceRecorder from \"../VoiceRecorder\";\r\nimport {EVENT_TOPIC_DISPLAY_ERROR, EVENT_TOPIC_REQUEST_MIC_PERMISSION} from \"../Constants\";\r\nimport PubSub from \"pubsub-js\";\r\nimport {useParams} from \"react-router-dom\";\r\n\r\nlet timerIntervalId;\r\n\r\nfunction VoiceRecord(props) {\r\n\r\n    const voiceRecorder = useRef(new VoiceRecorder());\r\n    const [timer, setTimer] = useState(0);\r\n\r\n    const {waId} = useParams();\r\n\r\n    useEffect(() => {\r\n        const onRequestMicPermission = function (msg, data) {\r\n            requestMicrophonePermission();\r\n        }\r\n\r\n        const token = PubSub.subscribe(EVENT_TOPIC_REQUEST_MIC_PERMISSION, onRequestMicPermission);\r\n\r\n        return () => {\r\n            PubSub.unsubscribe(token);\r\n\r\n            cancelVoiceRecord();\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        cancelVoiceRecord();\r\n    }, [waId]);\r\n\r\n    const cancelVoiceRecord = () => {\r\n        voiceRecorder.current?.cancel();\r\n\r\n        onVoiceRecordStop();\r\n    }\r\n\r\n    const onVoiceRecordStop = () => {\r\n        props.setRecording(false);\r\n\r\n        // Stop timer\r\n        clearInterval(timerIntervalId);\r\n        setTimer(0);\r\n    }\r\n\r\n    const requestMicrophonePermission = () => {\r\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n\r\n            const constraints = {\r\n                audio: {\r\n                    sampleRate: 48000,\r\n                    channelCount: 1,\r\n                    volume: 1.0,\r\n                    noiseSuppression: true\r\n                },\r\n                video: false\r\n            };\r\n\r\n            navigator.mediaDevices.getUserMedia(constraints)\r\n                .then(function (stream) {\r\n                    startVoiceRecord(stream);\r\n                })\r\n                .catch(function (err) {\r\n                    console.log('Permission denied');\r\n\r\n                    PubSub.publish(EVENT_TOPIC_DISPLAY_ERROR, 'You must grant microphone permission.');\r\n                });\r\n        } else {\r\n            console.log('Not supported on your browser.');\r\n\r\n            PubSub.publish(EVENT_TOPIC_DISPLAY_ERROR, 'This feature is not supported on your browser.');\r\n        }\r\n    }\r\n\r\n    const startVoiceRecord = (stream) => {\r\n        // If it is already recording, return\r\n        if (voiceRecorder.current?.isRecording()) return;\r\n\r\n        // Start recording\r\n        voiceRecorder.current?.start(\r\n            stream,\r\n            function () {\r\n                props.setRecording(true);\r\n\r\n                // Update timer every second\r\n                timerIntervalId = setInterval(function () {\r\n                    setTimer(prevState => prevState + 1);\r\n                }, 1000);\r\n            },\r\n            function () {\r\n                onVoiceRecordStop();\r\n            },\r\n            function (audioFile) {\r\n                //console.log(audioFile);\r\n            }\r\n        );\r\n    }\r\n\r\n    const stopVoiceRecord = () => {\r\n        voiceRecorder.current?.stop();\r\n    }\r\n\r\n    const sendVoiceRecord = () => {\r\n        stopVoiceRecord();\r\n\r\n        setTimeout(function () {\r\n            const chosenFile = voiceRecorder.current.lastAudioChosenFile;\r\n\r\n            // Send\r\n            if (chosenFile) {\r\n                props.sendHandledChosenFiles({0: voiceRecorder.current.lastAudioChosenFile});\r\n            } else {\r\n                console.log('Audio file is missing');\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    return (\r\n        <div className=\"voiceRecord\">\r\n            <IconButton onClick={stopVoiceRecord} className=\"voiceRecord__cancelButton\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n\r\n            <FiberManualRecordIcon className=\"voiceRecord__recordIcon\" />\r\n            <span className=\"voiceRecord__timer\">{ displaySeconds(timer) }</span>\r\n\r\n            <IconButton onClick={sendVoiceRecord} className=\"voiceRecord__sendButton\">\r\n                <DoneIcon />\r\n            </IconButton>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VoiceRecord;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\recorder\\worker.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ContextChatMessage.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageTypeLabel.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageShortContent.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SendTemplateMessage.js",["268","269","270"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport '../styles/SendTemplateMessage.css';\r\nimport {getConfig, getTemplateParams, templateParamToInteger} from \"../Helpers\";\r\nimport FileInput from \"./FileInput\";\r\nimport axios from \"axios\";\r\nimport {BASE_URL} from \"../Constants\";\r\n\r\nfunction SendTemplateMessage(props) {\r\n\r\n    const template = props.data;\r\n\r\n    const [params, setParams] = useState({});\r\n    const [headerFileURL, setHeaderFileURL] = useState('');\r\n    const [isUploading, setUploading] = useState(false);\r\n\r\n    const headerFileInput = useRef();\r\n\r\n    useEffect(() => {\r\n        const preparedParams = {};\r\n        const components = {...template.components};\r\n\r\n        Object.entries(components).forEach((paramEntry, paramIndex) => {\r\n            const key = paramEntry[0];\r\n            const component = paramEntry[1];\r\n            const componentType = component.type;\r\n\r\n            if (componentType === \"HEADER\") {\r\n                if (component.format === \"IMAGE\" || component.format === \"VIDEO\" || component.format === \"DOCUMENT\") {\r\n                    const format = component.format.toLowerCase();\r\n                    preparedParams[key] = {\r\n                        0: { type: format }\r\n                    };\r\n\r\n                    preparedParams[key][0][format] = { link: \"\" };\r\n                }\r\n            }\r\n\r\n            console.log(component.format);\r\n            console.log(preparedParams);\r\n\r\n            const paramText = component.text;\r\n            const templateParamsArray = getTemplateParams(paramText);\r\n\r\n            templateParamsArray.map((extractedParam, extractedParamIndex) => {\r\n                if (preparedParams[key] === undefined) {\r\n                    preparedParams[key] = {};\r\n                }\r\n                preparedParams[key][templateParamToInteger(extractedParam)] = {\r\n                    type: \"text\",\r\n                    text: \"\"\r\n                };\r\n            });\r\n        });\r\n\r\n        setParams(preparedParams);\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Update params when header image changes\r\n        setParams(prevState => {\r\n            // TODO: Do this in a better way depends on template headers complexity\r\n            if (prevState[0] && prevState[0][0] && prevState[0][0]['image']) {\r\n                prevState[0][0]['image']['link'] = headerFileURL;\r\n            } else if (prevState[0] && prevState[0][0] && prevState[0][0]['video']) {\r\n                prevState[0][0]['video']['link'] = headerFileURL;\r\n            } else if (prevState[0] && prevState[0][0] && prevState[0][0]['document']) {\r\n                prevState[0][0]['document']['link'] = headerFileURL;\r\n            }\r\n\r\n            return prevState;\r\n        });\r\n    }, [headerFileURL, params]);\r\n\r\n    const updateParam = (event, index, paramKey) => {\r\n        setParams(prevState => {\r\n            const nextState = prevState;\r\n            nextState[index][paramKey].text = event.target.value;\r\n\r\n            return {...nextState};\r\n        })\r\n    }\r\n\r\n    const send = () => {\r\n        const preparedParams = {};\r\n        const components = {...template.components};\r\n\r\n        Object.entries(components).forEach((paramEntry, paramIndex) => {\r\n            const key = paramEntry[0];\r\n            const component = paramEntry[1];\r\n\r\n            if (params[key]) {\r\n                const paramsArray = Object.values(params[key]);\r\n\r\n                /*const localizableParams = [];\r\n                paramsArray.forEach((paramArrayItem) => {\r\n                    localizableParams.push({\r\n                        \"default\": paramArrayItem.text\r\n                    })\r\n                });*/\r\n\r\n                preparedParams[component.type] = {\r\n                    type: component.type.toLowerCase(),\r\n                    parameters: paramsArray,\r\n                    //localizable_params: localizableParams\r\n                };\r\n            }\r\n        });\r\n\r\n        const finalData = template;\r\n        finalData.params = Object.values(preparedParams);\r\n\r\n        // TODO: Change this later\r\n        props.send(finalData);\r\n\r\n        /*Object.entries(params).forEach((paramEntry) => {\r\n            finalData.components[paramEntry[0]].params = paramEntry[1];\r\n        });*/\r\n    }\r\n\r\n    const handleChosenImage = (file) => {\r\n        if (!file) return;\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"file_encoded\", file[0]);\r\n\r\n        setUploading(true);\r\n\r\n        axios.post(`${BASE_URL}media/`, formData, getConfig())\r\n            .then((response) => {\r\n                console.log(response.data);\r\n\r\n                const fileURL = response.data.file;\r\n                setHeaderFileURL(fileURL);\r\n\r\n                setUploading(false);\r\n\r\n            })\r\n            .catch((error) => {\r\n                // TODO: Handle errors\r\n\r\n                setUploading(false);\r\n            });\r\n    }\r\n\r\n    const getMimetypeByFormat = (format) => {\r\n        if (format === \"IMAGE\") return \"image/jpeg, image/png\";\r\n        if (format === \"VIDEO\") return \"video/mp4, video/3gpp\";\r\n        if (format === \"DOCUMENT\") return \"*/*\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"sendTemplateMessage\">\r\n            <h4 className=\"sendTemplateMessage__title\">{template.name}</h4>\r\n\r\n            {template.components.map((comp, index) =>\r\n                <div key={index} className=\"sendTemplateMessage__component\">\r\n\r\n                    <div className=\"sendTemplateMessage__section\">\r\n                        <h6>{comp.type}</h6>\r\n                        <div>\r\n\r\n                            {(comp.format === \"IMAGE\" || comp.format === \"VIDEO\" || comp.format === \"DOCUMENT\") &&\r\n                            <div>\r\n                                <div>\r\n                                    {headerFileURL &&\r\n                                    <div>\r\n                                        <a href={headerFileURL} target=\"_blank\">{headerFileURL}</a>\r\n                                        {/*<img src={headerFileURL} className=\"sendTemplateMessage__component__header__preview\" alt=\"Header image preview\" />*/}\r\n                                    </div>\r\n                                    }\r\n                                </div>\r\n                                <FileInput innerRef={headerFileInput} multiple={false} accept={getMimetypeByFormat(comp.format)} handleSelectedFiles={handleChosenImage} />\r\n                                <Button color=\"primary\" onClick={() => headerFileInput.current.click()} disabled={isUploading}>Upload {comp.format.toLowerCase()}</Button>\r\n                                {headerFileURL &&\r\n                                <Button color=\"secondary\" onClick={() => setHeaderFileURL('')}>Delete</Button>\r\n                                }\r\n                            </div>\r\n                            }\r\n\r\n                            {comp.text}\r\n                            <div>\r\n                                {getTemplateParams(comp.text).map((param, paramIndex) =>\r\n                                    <TextField\r\n                                        value={params[index] ? params[index][templateParamToInteger(param)].text : ''}\r\n                                        onChange={(event) => updateParam(event, index, templateParamToInteger(param))}\r\n                                        className=\"templateMessage__param\"\r\n                                        key={paramIndex}\r\n                                        label={templateParamToInteger(param)}\r\n                                        fullWidth={true} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n\r\n                        {comp.type === \"BUTTONS\" &&\r\n                        <div>\r\n                            {comp.buttons.map((button, buttonIndex) =>\r\n                                <Button key={buttonIndex} color=\"primary\" disabled={true}>\r\n                                    {button.text}\r\n                                    {/*<br/>{button.type}*/}\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                        }\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            )}\r\n\r\n            <Button innerRef={props.sendButtonInnerRef} onClick={send} className=\"hidden\">Send</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SendTemplateMessage;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\BusinessProfile.js",["271","272"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport '../styles/BusinessProfile.css';\r\nimport axios from \"axios\";\r\nimport {BASE_URL} from \"../Constants\";\r\nimport {getConfig, getLastKey, getObjLength} from \"../Helpers\";\r\nimport {CircularProgress, FormControlLabel, IconButton, Radio, RadioGroup, TextField} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nfunction BusinessProfile(props) {\r\n\r\n    const [isLoaded, setLoaded] = useState(false);\r\n    const [isUpdating, setUpdating] = useState(false);\r\n    const [address, setAddress] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [vertical, setVertical] = useState('');\r\n    const [websites, setWebsites] = useState({});\r\n    const [about, setAbout] = useState('');\r\n    const [profilePhoto, setProfilePhoto] = useState();\r\n\r\n    const [websiteKeyToDelete, setWebsiteKeyToDelete] = useState();\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const imageElement = useRef();\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const getBusinessProfile = () => {\r\n        axios.get(`${BASE_URL}settings/business/profile/`, getConfig())\r\n            .then((response) => {\r\n                console.log(response.data);\r\n\r\n                const data = response.data;\r\n\r\n                setAddress(data.address);\r\n                setDescription(data.description);\r\n                setEmail(data.email);\r\n                setVertical(data.vertical);\r\n\r\n                let websitesArray = data.websites;\r\n                if (websitesArray.length === 0) {\r\n                    websitesArray = [\"\"];\r\n                }\r\n\r\n                setWebsites({...websitesArray});\r\n\r\n                // Load about\r\n                getAbout();\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n\r\n                props.displayError(error);\r\n            });\r\n    }\r\n\r\n    const updateBusinessProfile = async event => {\r\n        event.preventDefault();\r\n\r\n        setUpdating(true);\r\n\r\n        axios.patch( `${BASE_URL}settings/business/profile/`, {\r\n            address: address,\r\n            description: description,\r\n            email: email,\r\n            vertical: vertical,\r\n            websites: Object.values(websites)\r\n        }, getConfig())\r\n            .then((response) => {\r\n                console.log(response.data);\r\n\r\n                // Update about\r\n                updateAbout(event);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n\r\n                setUpdating(false);\r\n\r\n                props.displayError(error);\r\n            });\r\n    }\r\n\r\n    const getAbout = () => {\r\n        axios.get(`${BASE_URL}settings/profile/about/`, getConfig())\r\n            .then((response) => {\r\n                console.log(response.data);\r\n\r\n                const profile = response.data.settings?.profile;\r\n\r\n                setAbout(profile?.about?.text);\r\n\r\n                getProfilePhoto();\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n\r\n                props.displayError(error);\r\n            });\r\n    }\r\n\r\n    const updateAbout = async event => {\r\n        event.preventDefault();\r\n\r\n        axios.patch( `${BASE_URL}settings/profile/about/`, {\r\n            text: about\r\n        }, getConfig())\r\n            .then((response) => {\r\n                console.log(response.data);\r\n\r\n                setUpdating(false);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n\r\n                setUpdating(false);\r\n\r\n                props.displayError(error);\r\n            });\r\n    }\r\n\r\n    const getProfilePhoto = () => {\r\n        axios.get(`${BASE_URL}settings/profile/photo/`, getConfig())\r\n            .then((response) => {\r\n                console.log(response.data);\r\n\r\n                const profilePhotoData = btoa(unescape(encodeURIComponent(response.data)));\r\n\r\n                imageElement.current.\r\n\r\n                setProfilePhoto(profilePhotoData);\r\n\r\n                setLoaded(true);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n\r\n                props.displayError(error);\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getBusinessProfile();\r\n\r\n        const handleKey = (event) => {\r\n            // If any element is focused, ignore key\r\n            if (document.activeElement.tagName === \"INPUT\") {\r\n                return false;\r\n            }\r\n\r\n            if (event.keyCode === 27) { // Escape\r\n                props.setBusinessProfileVisible(false);\r\n            }\r\n        };\r\n\r\n        document.addEventListener('keydown', handleKey);\r\n\r\n        return () => {\r\n            document.removeEventListener('keydown', handleKey);\r\n        }\r\n    }, []);\r\n\r\n    const verticalOptions = [\r\n        \"Automotive\", \"Beauty, Spa and Salon\",\r\n        \"Clothing and Apparel\",\r\n        \"Education\",\r\n        \"Entertainment\",\r\n        \"Event Planning and Service\",\r\n        \"Finance and Banking\",\r\n        \"Food and Grocery\",\r\n        \"Public Service\",\r\n        \"Hotel and Lodging\",\r\n        \"Medical and Health\",\r\n        \"Non-profit\",\r\n        \"Professional Services\",\r\n        \"Shopping and Retail\",\r\n        \"Travel and Transportation\",\r\n        \"Restaurant\",\r\n        \"Other\"\r\n    ];\r\n\r\n    const addWebsite = () => {\r\n        setWebsites((prevState) => {\r\n            const nextState = prevState;\r\n            const nextKey = parseInt(getLastKey(websites)) + 1;\r\n            nextState[nextKey] = \"\";\r\n            return {...nextState};\r\n        });\r\n    }\r\n\r\n    const updateWebsite = (event, key) => {\r\n        setWebsites(prevState => {\r\n            const nextState = prevState;\r\n            nextState[key] = event.target.value;\r\n            return {...nextState};\r\n        });\r\n    }\r\n\r\n    const askToRemoveWebsite = (key) => {\r\n        setWebsiteKeyToDelete(key);\r\n        handleClickOpen();\r\n    }\r\n\r\n    const removeWebsite = () => {\r\n        setWebsites(prevState => {\r\n            const nextState = prevState;\r\n            delete nextState[websiteKeyToDelete];\r\n\r\n            const newObj = {};\r\n            Object.entries(nextState).forEach((websiteEntry, index) => {\r\n                newObj[index] = websiteEntry[1];\r\n            });\r\n\r\n            return {...newObj};\r\n        });\r\n\r\n        handleClose();\r\n    }\r\n\r\n    return (\r\n        <div className=\"businessProfileOuter\">\r\n\r\n            <IconButton className=\"businessProfileOuter__closeIcon\" onClick={() => props.setBusinessProfileVisible(false)}>\r\n                <CloseIcon />\r\n            </IconButton>\r\n\r\n            <div className=\"businessProfile\">\r\n                <div className=\"businessProfile__header\">\r\n                    <h2>Business Profile</h2>\r\n                </div>\r\n\r\n                <div className=\"businessProfile__fields\">\r\n\r\n                    <img ref={imageElement} alt=\"Profile photo\" />\r\n\r\n                    <form onSubmit={updateBusinessProfile}>\r\n                        <TextField value={about} onChange={e => setAbout(e.target.value)} label=\"About\" size=\"medium\" multiline={true} fullWidth={true} />\r\n\r\n                        <TextField value={address} onChange={e => setAddress(e.target.value)} label=\"Address\" size=\"medium\" fullWidth={true} />\r\n                        <TextField value={description} onChange={e => setDescription(e.target.value)} label=\"Description\" size=\"medium\" fullWidth={true} />\r\n                        <TextField value={email} onChange={e => setEmail(e.target.value)} label=\"E-mail\" size=\"medium\" fullWidth={true} />\r\n\r\n                        <h5>Vertical</h5>\r\n\r\n                        <RadioGroup row={true} className=\"businessProfile__fields__verticalOptions\">\r\n\r\n                            {verticalOptions.map((verticalOption, index) =>\r\n                                <FormControlLabel\r\n                                    key={index}\r\n                                    label={verticalOption}\r\n                                    value={verticalOption}\r\n                                    checked={vertical === verticalOption}\r\n                                    onChange={() => setVertical(verticalOption)}\r\n                                    control={<Radio />} />\r\n                            )}\r\n\r\n                        </RadioGroup>\r\n\r\n                        <h5>Websites</h5>\r\n\r\n                        <div className=\"businessProfile__fields__websites\">\r\n                            {Object.entries(websites).map((website, index) =>\r\n\r\n                                <div key={website[0]} className=\"businessProfile__fields__websites__wrapper\">\r\n                                    <TextField\r\n                                        value={website[1]}\r\n                                        label={\"Website \" + (parseInt(website[0]) + 1)}\r\n                                        size=\"medium\"\r\n                                        fullWidth={true}\r\n                                        onChange={(event) => updateWebsite(event, website[0])}/>\r\n\r\n                                    {getObjLength(websites) > 1 &&\r\n                                    <Button\r\n                                        typeof=\"button\"\r\n                                        color=\"secondary\"\r\n                                        onClick={() => askToRemoveWebsite(website[0])}>Delete</Button>\r\n                                    }\r\n                                </div>\r\n                            )}\r\n\r\n                            <Button type=\"button\" color=\"primary\" onClick={addWebsite} disableElevation>Add another website</Button>\r\n                        </div>\r\n\r\n                        <Button className=\"businessProfile__submit\" type=\"submit\" color=\"primary\" fullWidth={true} disabled={isUpdating} disableElevation>Update</Button>\r\n                    </form>\r\n                </div>\r\n\r\n                <Dialog\r\n                    open={open}\r\n                    onClose={handleClose}>\r\n                    <DialogTitle>{\"Are you sure?\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            Are you sure you want to delete this website?\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"secondary\">No</Button>\r\n                        <Button onClick={removeWebsite} color=\"primary\" autoFocus>Yes, delete</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                {!isLoaded &&\r\n                <div className=\"businessProfile__loading\">\r\n                    <CircularProgress color=\"primary\" />\r\n                </div>\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BusinessProfile;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageVideo.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageImage.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageDocument.js",["273"],"import React from \"react\";\r\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\r\n\r\nfunction ChatMessageDocument(props) {\r\n    return (\r\n        <a href={props.data.documentLink ?? props.data.getHeaderFileLink('document')} target=\"_blank\" className=\"chat__document\">\r\n            <InsertDriveFileIcon fontSize=\"small\" />\r\n            <span className=\"chat__document__filename\">{props.data.documentCaption ?? (props.data.documentFileName ?? 'Document')}</span>\r\n        </a>\r\n    )\r\n}\r\n\r\nexport default ChatMessageDocument;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\PreviewMedia.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChangePasswordDialog.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageVoice.js",["274"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Avatar, IconButton} from \"@material-ui/core\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport HeadsetIcon from \"@material-ui/icons/Headset\";\r\nimport PubSub from \"pubsub-js\";\r\nimport {EVENT_TOPIC_CHAT_MESSAGE} from \"../Constants\";\r\nimport {avatarStyles} from \"../AvatarStyles\";\r\n\r\nfunction ChatMessageVoice(props) {\r\n\r\n    const data = props.data;\r\n\r\n    const [isPlaying, setPlaying] = useState(false);\r\n    const duration = useRef(null);\r\n    const [progress, setProgress] = useState(0);\r\n    const [currentDuration, setCurrentDuration] = useState(\"0:00\");\r\n    const audio = useRef(null);\r\n    const range = useRef(null);\r\n\r\n    const onChatMessageEvent = function (msg, data) {\r\n        if (data === 'pause') {\r\n            pauseVoice();\r\n        }\r\n    };\r\n\r\n    const avatarClasses = avatarStyles();\r\n\r\n    const playIconStyles = {\r\n        fontSize: '38px'\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Subscribing only if there is voice or audio\r\n        if (data.hasAnyAudio()) {\r\n            const token = PubSub.subscribe(EVENT_TOPIC_CHAT_MESSAGE, onChatMessageEvent);\r\n            return () => {\r\n                PubSub.unsubscribe(token);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const pauseVoice = () => {\r\n        if (audio.current && range.current && !audio.current.paused) {\r\n            audio.current.pause();\r\n            setPlaying(false);\r\n        }\r\n    };\r\n\r\n    const playVoice = () => {\r\n        if (audio.current && range.current) {\r\n            if (!audio.current.paused) {\r\n                audio.current.pause();\r\n                setPlaying(false);\r\n            } else {\r\n\r\n                // Pause others\r\n                PubSub.publishSync(EVENT_TOPIC_CHAT_MESSAGE, 'pause');\r\n\r\n                audio.current.play();\r\n                setPlaying(true);\r\n            }\r\n\r\n            const interval = setInterval(function () {\r\n                if (audio.current && range.current) {\r\n                    const duration = audio.current.duration;\r\n                    const currentTime = audio.current.currentTime;\r\n\r\n                    setCurrentDuration(formatDuration(currentTime));\r\n\r\n                    if (duration) {\r\n                        const percentage = (currentTime * 100) / duration\r\n\r\n                        if (percentage >= 100) {\r\n                            setProgress(0);\r\n                            setCurrentDuration(formatDuration(0));\r\n                            setPlaying(false);\r\n                            clearInterval(interval);\r\n                        } else {\r\n                            setProgress(percentage);\r\n                        }\r\n                    }\r\n\r\n                    if (audio.current.paused) {\r\n                        clearInterval(interval);\r\n                    }\r\n                } else {\r\n                    // In case component is reloaded\r\n                    clearInterval(interval);\r\n                }\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    const formatDuration = (s) => {\r\n        s = Math.floor(s);\r\n        return (s-(s%=60))/60+(9<s?':':':0')+s;\r\n    }\r\n\r\n    const changeDuration = (value) => {\r\n        if (audio.current && range.current && audio.current.duration !== Infinity) {\r\n            setProgress(value);\r\n            const nextCurrentTime = audio.current.duration / value;\r\n            if (nextCurrentTime !== Infinity && !isNaN(nextCurrentTime)) {\r\n                audio.current.currentTime = parseFloat(nextCurrentTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat__voice\">\r\n            <span ref={duration} className=\"chat__voice__duration\">{currentDuration}</span>\r\n            <IconButton onClick={() => playVoice()}>\r\n                {isPlaying ? <PauseIcon style={playIconStyles}/> : <PlayArrowIcon style={playIconStyles}/>}\r\n            </IconButton>\r\n            <input ref={range} dir=\"ltr\" type=\"range\" className=\"chat__voice__range\" min=\"0\" max=\"100\" value={progress} onChange={(e) => changeDuration(e.target.value)} />\r\n            <audio ref={audio} src={data.voiceId ? data.generateVoiceLink() : data.generateAudioLink()} preload=\"none\" onLoadedMetadata={event => console.log(event.target.duration)} />\r\n\r\n            <Avatar className={(data.voiceId !== undefined ?? data.voiceLink !== undefined) ? avatarClasses[data.initials] : avatarClasses.orange + \" audioMessageAvatar\"}>\r\n                {data.voiceId !== undefined ? <span>{data.initials}</span> : <HeadsetIcon/>}\r\n            </Avatar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatMessageVoice;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageTemplate.js",[],{"ruleId":"275","replacedBy":"276"},{"ruleId":"277","replacedBy":"278"},{"ruleId":"279","severity":1,"message":"280","line":47,"column":8,"nodeType":"281","endLine":47,"endColumn":10,"suggestions":"282"},{"ruleId":"279","severity":1,"message":"283","line":133,"column":8,"nodeType":"281","endLine":133,"endColumn":14,"suggestions":"284"},{"ruleId":"279","severity":1,"message":"285","line":137,"column":8,"nodeType":"281","endLine":137,"endColumn":17,"suggestions":"286"},{"ruleId":"279","severity":1,"message":"287","line":189,"column":8,"nodeType":"281","endLine":189,"endColumn":63,"suggestions":"288"},{"ruleId":"279","severity":1,"message":"289","line":292,"column":8,"nodeType":"281","endLine":292,"endColumn":84,"suggestions":"290"},{"ruleId":"279","severity":1,"message":"291","line":384,"column":8,"nodeType":"281","endLine":384,"endColumn":30,"suggestions":"292"},{"ruleId":"279","severity":1,"message":"293","line":390,"column":8,"nodeType":"281","endLine":390,"endColumn":23,"suggestions":"294"},{"ruleId":"295","severity":1,"message":"296","line":27,"column":28,"nodeType":"297","messageId":"298","endLine":27,"endColumn":45},{"ruleId":"279","severity":1,"message":"299","line":51,"column":23,"nodeType":"300","endLine":51,"endColumn":49},{"ruleId":"279","severity":1,"message":"301","line":148,"column":8,"nodeType":"281","endLine":148,"endColumn":46,"suggestions":"302"},{"ruleId":"279","severity":1,"message":"303","line":67,"column":8,"nodeType":"281","endLine":67,"endColumn":45,"suggestions":"304"},{"ruleId":"279","severity":1,"message":"305","line":69,"column":8,"nodeType":"281","endLine":69,"endColumn":10,"suggestions":"306"},{"ruleId":"307","severity":1,"message":"308","line":187,"column":17,"nodeType":"309","endLine":187,"endColumn":88},{"ruleId":"279","severity":1,"message":"310","line":259,"column":8,"nodeType":"281","endLine":259,"endColumn":10,"suggestions":"311"},{"ruleId":"312","severity":1,"message":"313","line":65,"column":48,"nodeType":"314","messageId":"315","endLine":65,"endColumn":66},{"ruleId":"312","severity":1,"message":"316","line":66,"column":50,"nodeType":"314","messageId":"315","endLine":66,"endColumn":66},{"ruleId":"317","severity":1,"message":"318","line":66,"column":56,"nodeType":"314","messageId":"319","endLine":66,"endColumn":57,"suggestions":"320"},{"ruleId":"295","severity":1,"message":"321","line":19,"column":7,"nodeType":"297","messageId":"298","endLine":19,"endColumn":26},{"ruleId":"295","severity":1,"message":"322","line":9,"column":12,"nodeType":"297","messageId":"298","endLine":9,"endColumn":18},{"ruleId":"295","severity":1,"message":"323","line":11,"column":11,"nodeType":"297","messageId":"298","endLine":11,"endColumn":27},{"ruleId":"324","severity":1,"message":"325","line":57,"column":60,"nodeType":"326","messageId":"327","endLine":57,"endColumn":62},{"ruleId":"295","severity":1,"message":"328","line":1,"column":16,"nodeType":"297","messageId":"298","endLine":1,"endColumn":24},{"ruleId":"279","severity":1,"message":"329","line":132,"column":8,"nodeType":"281","endLine":132,"endColumn":10,"suggestions":"330"},{"ruleId":"279","severity":1,"message":"331","line":157,"column":8,"nodeType":"281","endLine":157,"endColumn":26,"suggestions":"332"},{"ruleId":"279","severity":1,"message":"333","line":168,"column":8,"nodeType":"281","endLine":168,"endColumn":24,"suggestions":"334"},{"ruleId":"279","severity":1,"message":"335","line":176,"column":8,"nodeType":"281","endLine":176,"endColumn":14,"suggestions":"336"},{"ruleId":"295","severity":1,"message":"328","line":1,"column":16,"nodeType":"297","messageId":"298","endLine":1,"endColumn":24},{"ruleId":"295","severity":1,"message":"337","line":125,"column":7,"nodeType":"297","messageId":"298","endLine":125,"endColumn":20},{"ruleId":"279","severity":1,"message":"338","line":34,"column":8,"nodeType":"281","endLine":34,"endColumn":10,"suggestions":"339"},{"ruleId":"279","severity":1,"message":"340","line":38,"column":8,"nodeType":"281","endLine":38,"endColumn":14,"suggestions":"341"},{"ruleId":"324","severity":1,"message":"325","line":45,"column":75,"nodeType":"326","messageId":"327","endLine":45,"endColumn":77},{"ruleId":"279","severity":1,"message":"342","line":58,"column":8,"nodeType":"281","endLine":58,"endColumn":10,"suggestions":"343"},{"ruleId":"307","severity":1,"message":"308","line":169,"column":41,"nodeType":"309","endLine":169,"endColumn":81},{"ruleId":"279","severity":1,"message":"344","line":175,"column":8,"nodeType":"281","endLine":175,"endColumn":10,"suggestions":"345"},{"ruleId":"346","severity":1,"message":"347","line":248,"column":21,"nodeType":"309","endLine":248,"endColumn":94},{"ruleId":"307","severity":1,"message":"308","line":6,"column":9,"nodeType":"309","endLine":6,"endColumn":130},{"ruleId":"279","severity":1,"message":"305","line":41,"column":8,"nodeType":"281","endLine":41,"endColumn":10,"suggestions":"348"},"no-native-reassign",["349"],"no-negated-in-lhs",["350"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.","ArrayExpression",["351"],"React Hook useEffect has missing dependencies: 'getContact' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["352"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["353"],"React Hook useEffect has a missing dependency: 'getMessages'. Either include it or remove the dependency array.",["354"],"React Hook useEffect has a missing dependency: 'markAsSeen'. Either include it or remove the dependency array.",["355"],"React Hook useEffect has a missing dependency: 'goToMessageId'. Either include it or remove the dependency array.",["356"],"React Hook useEffect has a missing dependency: 'handleChosenFiles'. Either include it or remove the dependency array.",["357"],"no-unused-vars","'setContactResults' is assigned a value but never used.","Identifier","unusedVar","Assignments to the 'cancelToken' variable from inside React Hook useEffect will be lost after each render. To preserve the value over time, store it in a useRef Hook and keep the mutable value in the '.current' property. Otherwise, you can move this variable directly inside useEffect.","CallExpression","React Hook useEffect has missing dependencies: 'cancelToken', 'getChats', and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["358"],"React Hook useEffect has a missing dependency: 'props.chatData.isExpired'. Either include it or remove the dependency array.",["359"],"React Hook useEffect has missing dependencies: 'data' and 'onChatMessageEvent'. Either include them or remove the dependency array.",["360"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","React Hook useEffect has missing dependencies: 'clearUserSession', 'onDisplayError', and 'retrieveCurrentUser'. Either include them or remove the dependency array.",["361"],"no-control-regex","Unexpected control character(s) in regular expression: \\x00.","Literal","unexpected","Unexpected control character(s) in regular expression: \\x0a, \\x0d.","no-useless-escape","Unnecessary escape character: \\s.","unnecessaryEscape",["362","363"],"'prepareStylesObject' is assigned a value but never used.","'hidden' is assigned a value but never used.","'handleVisibility' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","'useState' is defined but never used.","React Hook useEffect has missing dependencies: 'forceUpdate' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["364"],"React Hook useEffect has missing dependencies: 'changePreview' and 'hidePreview'. Either include them or remove the dependency array.",["365"],"React Hook useEffect has a missing dependency: 'chosenFile'. Either include it or remove the dependency array.",["366"],"React Hook useEffect has missing dependencies: 'changePreview' and 'chosenFile'. Either include them or remove the dependency array.",["367"],"'getVideoCover' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'cancelVoiceRecord' and 'requestMicrophonePermission'. Either include them or remove the dependency array.",["368"],"React Hook useEffect has a missing dependency: 'cancelVoiceRecord'. Either include it or remove the dependency array.",["369"],"React Hook useEffect has a missing dependency: 'template.components'. Either include it or remove the dependency array.",["370"],"React Hook useEffect has missing dependencies: 'getBusinessProfile' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["371"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.",["372"],"no-global-assign","no-unsafe-negation",{"desc":"373","fix":"374"},{"desc":"375","fix":"376"},{"desc":"377","fix":"378"},{"desc":"379","fix":"380"},{"desc":"381","fix":"382"},{"desc":"383","fix":"384"},{"desc":"385","fix":"386"},{"desc":"387","fix":"388"},{"desc":"389","fix":"390"},{"desc":"391","fix":"392"},{"desc":"393","fix":"394"},{"messageId":"395","fix":"396","desc":"397"},{"messageId":"398","fix":"399","desc":"400"},{"desc":"401","fix":"402"},{"desc":"403","fix":"404"},{"desc":"405","fix":"406"},{"desc":"407","fix":"408"},{"desc":"409","fix":"410"},{"desc":"411","fix":"412"},{"desc":"413","fix":"414"},{"desc":"415","fix":"416"},{"desc":"391","fix":"417"},"Update the dependencies array to be: [history]",{"range":"418","text":"419"},"Update the dependencies array to be: [getContact, props, waId]",{"range":"420","text":"421"},"Update the dependencies array to be: [contact, props]",{"range":"422","text":"423"},"Update the dependencies array to be: [messages, isLoaded, isLoadingMoreMessages, isAtBottom, getMessages]",{"range":"424","text":"425"},"Update the dependencies array to be: [waId, messages, isLoaded, isExpired, isAtBottom, markAsSeen]",{"range":"426","text":"427"},"Update the dependencies array to be: [messages, isAtBottom, goToMessageId]",{"range":"428","text":"429"},"Update the dependencies array to be: [handleChosenFiles, selectedFiles]",{"range":"430","text":"431"},"Update the dependencies array to be: [waId, chats, unseenMessages, keyword, props, getChats, cancelToken]",{"range":"432","text":"433"},"Update the dependencies array to be: [props.chatData.isExpired, props.chatData.lastMessageTimestamp]",{"range":"434","text":"435"},"Update the dependencies array to be: [data, onChatMessageEvent]",{"range":"436","text":"437"},"Update the dependencies array to be: [clearUserSession, onDisplayError, retrieveCurrentUser]",{"range":"438","text":"439"},"removeEscape",{"range":"440","text":"441"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"442","text":"443"},"Replace the `\\` with `\\\\` to include the actual backslash character.","Update the dependencies array to be: [forceUpdate, props]",{"range":"444","text":"445"},"Update the dependencies array to be: [changePreview, chosenFile, data, hidePreview]",{"range":"446","text":"447"},"Update the dependencies array to be: [chosenFile, currentCaption]",{"range":"448","text":"449"},"Update the dependencies array to be: [changePreview, chosenFile, data]",{"range":"450","text":"451"},"Update the dependencies array to be: [cancelVoiceRecord, requestMicrophonePermission]",{"range":"452","text":"453"},"Update the dependencies array to be: [cancelVoiceRecord, waId]",{"range":"454","text":"455"},"Update the dependencies array to be: [template.components]",{"range":"456","text":"457"},"Update the dependencies array to be: [getBusinessProfile, props]",{"range":"458","text":"459"},{"range":"460","text":"437"},[1576,1578],"[history]",[4546,4552],"[getContact, props, waId]",[4630,4639],"[contact, props]",[6858,6913],"[messages, isLoaded, isLoadingMoreMessages, isAtBottom, getMessages]",[10917,10993],"[waId, messages, isLoaded, isExpired, isAtBottom, markAsSeen]",[14219,14241],"[messages, isAtBottom, goToMessageId]",[14352,14367],"[handleChosenFiles, selectedFiles]",[5262,5300],"[waId, chats, unseenMessages, keyword, props, getChats, cancelToken]",[2101,2138],"[props.chatData.isExpired, props.chatData.lastMessageTimestamp]",[2357,2359],"[data, onChatMessageEvent]",[8945,8947],"[clearUserSession, onDisplayError, retrieveCurrentUser]",[2249,2250],"",[2249,2249],"\\",[4488,4490],"[forceUpdate, props]",[5367,5385],"[changePreview, chosenFile, data, hidePreview]",[5668,5684],"[chosenFile, currentCaption]",[5847,5853],"[changePreview, chosenFile, data]",[1140,1142],"[cancelVoiceRecord, requestMicrophonePermission]",[1208,1214],"[cancelVoiceRecord, waId]",[2072,2074],"[template.components]",[5202,5204],"[getBusinessProfile, props]",[1321,1323]]