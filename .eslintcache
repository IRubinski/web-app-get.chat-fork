[{"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\index.js":"1","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\reportWebVitals.js":"2","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\App.js":"3","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Login.js":"4","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Chat.js":"5","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Sidebar.js":"6","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SidebarChat.js":"7","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessage.js":"8","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Main.js":"9","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\AppTheme.js":"10","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\Helpers.js":"11","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\Constants.js":"12","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\AvatarStyles.js":"13","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ChatMessageClass.js":"14","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\AttachmentTypesMenu.js":"15","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\TemplateMessages.js":"16","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\TemplateMessageClass.js":"17","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatFooter.js":"18","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatHeader.js":"19","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\DateHelpers.js":"20","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SearchMessage.js":"21","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SearchBar.js":"22","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageOptionsMenu.js":"23","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\CreateTemplate.js":"24","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SearchMessageResult.js":"25","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ContactDetails.js":"26","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SidebarContactResult.js":"27","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ChatClass.js":"28","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\MessageDateIndicator.js":"29","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\LoadingScreen.js":"30","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\PreviewSendMedia.js":"31","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\FileInput.js":"32","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\FileHelpers.js":"33","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ChosenFileClass.js":"34","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\hooks\\useForceUpdate.js":"35","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageTypeIcon.js":"36","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\VoiceRecorder.js":"37","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\VoiceRecord.js":"38","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\recorder\\worker.js":"39","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ContextChatMessage.js":"40","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageTypeLabel.js":"41","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageShortContent.js":"42","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SendTemplateMessage.js":"43","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\BusinessProfile.js":"44","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageVideo.js":"45","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageImage.js":"46","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageDocument.js":"47","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\PreviewMedia.js":"48","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChangePasswordDialog.js":"49","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageVoice.js":"50","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageTemplate.js":"51","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\NewMessageClass.js":"52","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Contacts.js":"53","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Contact.js":"54","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\PersonClass.js":"55","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ContactClass.js":"56","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ContactProviderHeader.js":"57","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Person.js":"58","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\StorageHelper.js":"59","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatAssignment.js":"60","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatTags.js":"61","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatTagsList.js":"62","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatAssignmentEvent.js":"63","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatTaggingEvent.js":"64","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\DownloadUnsupportedFile.js":"65","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\UnsupportedFileClass.js":"66"},{"size":493,"mtime":1611658611905,"results":"67","hashOfConfig":"68"},{"size":362,"mtime":499162500000,"results":"69","hashOfConfig":"68"},{"size":794,"mtime":1615904185249,"results":"70","hashOfConfig":"68"},{"size":5804,"mtime":1620116815381,"results":"71","hashOfConfig":"68"},{"size":45251,"mtime":1622708792938,"results":"72","hashOfConfig":"68"},{"size":22987,"mtime":1622709143429,"results":"73","hashOfConfig":"68"},{"size":9434,"mtime":1622644308064,"results":"74","hashOfConfig":"68"},{"size":6608,"mtime":1622636854545,"results":"75","hashOfConfig":"68"},{"size":23909,"mtime":1622463653170,"results":"76","hashOfConfig":"68"},{"size":470,"mtime":1614783203762,"results":"77","hashOfConfig":"68"},{"size":9421,"mtime":1622707512332,"results":"78","hashOfConfig":"68"},{"size":2215,"mtime":1621948839326,"results":"79","hashOfConfig":"68"},{"size":3190,"mtime":1615884022638,"results":"80","hashOfConfig":"68"},{"size":7918,"mtime":1622200075045,"results":"81","hashOfConfig":"68"},{"size":1144,"mtime":1613394017720,"results":"82","hashOfConfig":"68"},{"size":5872,"mtime":1619689351438,"results":"83","hashOfConfig":"68"},{"size":385,"mtime":1621949173114,"results":"84","hashOfConfig":"68"},{"size":12730,"mtime":1622468605012,"results":"85","hashOfConfig":"68"},{"size":4158,"mtime":1622628001350,"results":"86","hashOfConfig":"68"},{"size":256,"mtime":1612860915449,"results":"87","hashOfConfig":"68"},{"size":3584,"mtime":1617283173122,"results":"88","hashOfConfig":"68"},{"size":832,"mtime":1617352969214,"results":"89","hashOfConfig":"68"},{"size":913,"mtime":1614778984447,"results":"90","hashOfConfig":"68"},{"size":2139,"mtime":1612957974714,"results":"91","hashOfConfig":"68"},{"size":1989,"mtime":1616412471631,"results":"92","hashOfConfig":"68"},{"size":7764,"mtime":1622628001362,"results":"93","hashOfConfig":"68"},{"size":902,"mtime":1613038108492,"results":"94","hashOfConfig":"68"},{"size":3009,"mtime":1620823713831,"results":"95","hashOfConfig":"68"},{"size":662,"mtime":1614241660266,"results":"96","hashOfConfig":"68"},{"size":1400,"mtime":1621601535116,"results":"97","hashOfConfig":"68"},{"size":11716,"mtime":1614854116933,"results":"98","hashOfConfig":"68"},{"size":547,"mtime":1614936205165,"results":"99","hashOfConfig":"68"},{"size":6379,"mtime":1621948266692,"results":"100","hashOfConfig":"68"},{"size":932,"mtime":1614607327077,"results":"101","hashOfConfig":"68"},{"size":203,"mtime":1614162338987,"results":"102","hashOfConfig":"68"},{"size":1364,"mtime":1614778839272,"results":"103","hashOfConfig":"68"},{"size":2494,"mtime":1614684068270,"results":"104","hashOfConfig":"68"},{"size":5830,"mtime":1620222948029,"results":"105","hashOfConfig":"68"},{"size":118,"mtime":1614680945459,"results":"106","hashOfConfig":"68"},{"size":1437,"mtime":1620303428790,"results":"107","hashOfConfig":"68"},{"size":1028,"mtime":1615282678274,"results":"108","hashOfConfig":"68"},{"size":1218,"mtime":1620303125998,"results":"109","hashOfConfig":"68"},{"size":8460,"mtime":1617288896763,"results":"110","hashOfConfig":"68"},{"size":11764,"mtime":1620135993610,"results":"111","hashOfConfig":"68"},{"size":549,"mtime":1615383360076,"results":"112","hashOfConfig":"68"},{"size":253,"mtime":1615385937537,"results":"113","hashOfConfig":"68"},{"size":539,"mtime":1615454217344,"results":"114","hashOfConfig":"68"},{"size":1974,"mtime":1622553473426,"results":"115","hashOfConfig":"68"},{"size":4464,"mtime":1615890281818,"results":"116","hashOfConfig":"68"},{"size":5265,"mtime":1621949173120,"results":"117","hashOfConfig":"68"},{"size":3326,"mtime":1620997116031,"results":"118","hashOfConfig":"68"},{"size":178,"mtime":1616405971376,"results":"119","hashOfConfig":"68"},{"size":9805,"mtime":1620287062161,"results":"120","hashOfConfig":"68"},{"size":3037,"mtime":1618566407233,"results":"121","hashOfConfig":"68"},{"size":1075,"mtime":1620721533825,"results":"122","hashOfConfig":"68"},{"size":353,"mtime":1620644199040,"results":"123","hashOfConfig":"68"},{"size":714,"mtime":1618400027911,"results":"124","hashOfConfig":"68"},{"size":1520,"mtime":1617708662818,"results":"125","hashOfConfig":"68"},{"size":1764,"mtime":1617787720707,"results":"126","hashOfConfig":"68"},{"size":6547,"mtime":1622208752317,"results":"127","hashOfConfig":"68"},{"size":6735,"mtime":1622642486384,"results":"128","hashOfConfig":"68"},{"size":2924,"mtime":1622642486375,"results":"129","hashOfConfig":"68"},{"size":1788,"mtime":1621585829369,"results":"130","hashOfConfig":"68"},{"size":1161,"mtime":1621586387437,"results":"131","hashOfConfig":"68"},{"size":1037,"mtime":1621949418528,"results":"132","hashOfConfig":"68"},{"size":169,"mtime":1621949069241,"results":"133","hashOfConfig":"68"},{"filePath":"134","messages":"135","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"qxyosp",{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"143","usedDeprecatedRules":"136"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"136"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"136"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"156","usedDeprecatedRules":"136"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"136"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"170","messages":"171","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"178","messages":"179","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"182","usedDeprecatedRules":"136"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"136"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"190","messages":"191","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"192","messages":"193","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"194","usedDeprecatedRules":"136"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"136"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"136"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"136"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"216","messages":"217","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"218","messages":"219","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"136"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"229","messages":"230","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"136"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"136"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"239","messages":"240","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"241","messages":"242","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"243","usedDeprecatedRules":"136"},{"filePath":"244","messages":"245","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"246","messages":"247","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"248","messages":"249","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"250","usedDeprecatedRules":"136"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"253","messages":"254","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"255","messages":"256","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"257","usedDeprecatedRules":"136"},{"filePath":"258","messages":"259","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"260","messages":"261","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"262","messages":"263","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"264","messages":"265","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"266","usedDeprecatedRules":"136"},{"filePath":"267","messages":"268","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"269","messages":"270","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"271","messages":"272","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"273","messages":"274","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"275","messages":"276","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"277","messages":"278","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"279","messages":"280","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"281","messages":"282","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},{"filePath":"283","messages":"284","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"136"},"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\index.js",[],["285","286"],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\reportWebVitals.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\App.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Login.js",["287"],"import React, {useEffect, useState} from 'react';\r\nimport '../styles/Login.css';\r\nimport {Backdrop, CircularProgress, Fade, TextField} from '@material-ui/core';\r\nimport Button from '@material-ui/core/Button';\r\nimport {useHistory, useLocation, useParams} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {makeStyles} from '@material-ui/core/styles';\r\nimport {getConfig} from \"../Helpers\";\r\nimport {Alert} from \"@material-ui/lab\";\r\nimport {BASE_URL, VERSION} from \"../Constants\";\r\nimport {clearToken, getToken, storeToken} from \"../StorageHelper\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    backdrop: {\r\n        zIndex: theme.zIndex.drawer + 1,\r\n        color: '#fff',\r\n    },\r\n}));\r\n\r\nexport default function Login(props) {\r\n\r\n    const {errorCase} = useParams();\r\n\r\n    const errorMessages = {\r\n        \"incorrectRole\": \"Only admins and users can access to our web app.\",\r\n        \"notLoggedIn\": \"You are not logged in.\",\r\n        \"invalidToken\": \"Invalid token.\"\r\n    };\r\n\r\n    const classes = useStyles();\r\n\r\n    const [username, setUsername] = useState('');\r\n    const [password, setPassword] = useState('');\r\n    const [isLoggingIn, setLoggingIn] = useState(false);\r\n    const [isValidatingToken, setValidatingToken] = useState(false);\r\n    const [loginError, setLoginError] = useState();\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n\r\n    useEffect(() => {\r\n        if (errorCase) {\r\n            setLoginError(errorMessages[errorCase]);\r\n\r\n            if (errorCase === \"invalidToken\") {\r\n                logoutToClearSession();\r\n            }\r\n        }\r\n\r\n        const token = getToken();\r\n        if (token) {\r\n            setValidatingToken(true);\r\n            axios.get(BASE_URL, getConfig())\r\n                .then((response) => {\r\n                    // Redirect to main route\r\n                    history.push(\"/main\");\r\n                })\r\n                .catch((error) => {\r\n                    setValidatingToken(false);\r\n\r\n                    // TODO: Make sure the response is Unauthorized\r\n                    clearToken();\r\n                });\r\n        }\r\n    }, []);\r\n\r\n    const doLogin = async e => {\r\n        e.preventDefault();\r\n\r\n        // Check if username or password is empty\r\n        if (username.trim() === '' || password.trim() === '') {\r\n            // TODO: Display error on UI\r\n            console.log(\"Empty credentials\");\r\n            return false;\r\n        }\r\n\r\n        // Display the loading animation\r\n        setLoggingIn(true);\r\n\r\n        axios.post(`${BASE_URL}auth/token/`, {\r\n            username : username,\r\n            password : password\r\n        }).then((response) => {\r\n            // Store token in local storage\r\n            storeToken(response.data.token);\r\n\r\n            // Android web interface\r\n            if (window.AndroidWebInterface) {\r\n                window.AndroidWebInterface.registerUserToken(response.data.token ?? \"\");\r\n            }\r\n\r\n            // Redirect to main route\r\n            history.push(location.nextPath ?? \"/main\");\r\n        }).catch((error) => {\r\n\r\n            // Hide the loading animation\r\n            setLoggingIn(false);\r\n            setLoginError(undefined);\r\n\r\n            // Handle the error\r\n            if (error.response) {\r\n                // Request made and server responded\r\n                console.log(error.response.data);\r\n                console.log(error.response.status);\r\n                console.log(error.response.headers);\r\n\r\n                setLoginError(\"Incorrect username or password.\");\r\n            } else if (error.request) {\r\n                // The request was made but no response was received\r\n                console.log(error.request);\r\n\r\n                setLoginError(\"An error has occurred.\");\r\n            } else {\r\n                // Something happened in setting up the request that triggered an Error\r\n                console.log('Error', error.message);\r\n\r\n                setLoginError(\"An error has occurred.\");\r\n            }\r\n        })\r\n    }\r\n\r\n    const logoutToClearSession = () => {\r\n        axios.get( `${BASE_URL}auth/logout/`, getConfig())\r\n            .then((response) => {\r\n                console.log(\"Logout: \", response.data);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.error(error);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <div className=\"login\">\r\n\r\n            <Fade in={true}>\r\n                <div className=\"login__body\">\r\n                    <span className=\"login__body__version\">Version: { VERSION }</span>\r\n\r\n                    <h2>Welcome</h2>\r\n                    <p>Please login to start</p>\r\n\r\n                    <form onSubmit={doLogin}>\r\n                        <TextField value={username} onChange={e => setUsername(e.target.value)} label=\"Username\" size=\"medium\" fullWidth={true} />\r\n                        <TextField value={password} onChange={e => setPassword(e.target.value)} type=\"password\" label=\"Password\" size=\"medium\" fullWidth={true} />\r\n                        <Button type=\"submit\" color=\"primary\" fullWidth={true} disableElevation>Login</Button>\r\n                    </form>\r\n\r\n                    {isValidatingToken &&\r\n                    <div className=\"login__validatingToken\">\r\n                        <h2>Welcome</h2>\r\n                        <p>We are validating your session, please wait.</p>\r\n                    </div>\r\n                    }\r\n\r\n                    {loginError &&\r\n                    <Alert severity=\"error\">{loginError}</Alert>\r\n                    }\r\n                </div>\r\n            </Fade>\r\n\r\n            <Backdrop className={classes.backdrop} open={isLoggingIn}>\r\n                <CircularProgress color=\"inherit\" />\r\n            </Backdrop>\r\n\r\n        </div>\r\n    )\r\n}","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Chat.js",["288","289","290","291","292","293","294","295"],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Sidebar.js",["296","297","298","299"],"import React, {useEffect, useRef, useState} from 'react';\r\nimport '../styles/Sidebar.css';\r\nimport {Avatar, Divider, IconButton, Link, Menu, MenuItem, Tab, Tabs} from \"@material-ui/core\";\r\nimport MoreVertIcon from \"@material-ui/icons/MoreVert\";\r\nimport SidebarChat from \"./SidebarChat\";\r\nimport axios from \"axios\";\r\nimport {containsLetters, generateInitialsHelper, getConfig, getHubURL, getObjLength, isScrollable} from \"../Helpers\";\r\nimport {\r\n    BASE_URL,\r\n    EVENT_TOPIC_GO_TO_MSG_ID,\r\n    EVENT_TOPIC_NEW_CHAT_MESSAGES,\r\n    EVENT_TOPIC_UPDATE_PERSON_NAME\r\n} from \"../Constants\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport SidebarContactResult from \"./SidebarContactResult\";\r\nimport ChatClass from \"../ChatClass\";\r\nimport NewMessageClass from \"../NewMessageClass\";\r\nimport PubSub from \"pubsub-js\";\r\nimport {avatarStyles} from \"../AvatarStyles\";\r\nimport BusinessProfile from \"./BusinessProfile\";\r\nimport ChangePasswordDialog from \"./ChangePasswordDialog\";\r\nimport ChatMessageClass from \"../ChatMessageClass\";\r\nimport SearchMessageResult from \"./SearchMessageResult\";\r\nimport {isMobile} from 'react-device-detect';\r\nimport ChatIcon from '@material-ui/icons/Chat';\r\nimport Contacts from \"./Contacts\";\r\nimport {clearContactProvidersData} from \"../StorageHelper\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\n\r\nfunction Sidebar(props) {\r\n\r\n    const {waId} = useParams();\r\n    const chatsContainer = useRef(null);\r\n    const [anchorEl, setAnchorEl] = useState(null);\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [chatMessages, setChatMessages] = useState({});\r\n    const [contactResults, setContactResults] = useState({});\r\n    const [isProfileVisible, setProfileVisible] = useState(false);\r\n    const [isContactsVisible, setContactsVisible] = useState(false);\r\n    const [isChangePasswordDialogVisible, setChangePasswordDialogVisible] = useState(false);\r\n    const [tabCase, setTabCase] = useState(\"all\")\r\n\r\n    const history = useHistory();\r\n\r\n    const avatarClasses = avatarStyles();\r\n\r\n    const logOut = () => {\r\n        props.clearUserSession();\r\n        hideMenu();\r\n    }\r\n\r\n    const forceClearContactProvidersData = () => {\r\n        clearContactProvidersData();\r\n        window.location.reload();\r\n    }\r\n\r\n    const displayMenu = (event) => {\r\n        setAnchorEl(event.currentTarget);\r\n    }\r\n\r\n    const hideMenu = () => {\r\n        setAnchorEl(null);\r\n    }\r\n\r\n    let cancelTokenSourceRef = useRef();\r\n\r\n    useEffect(() => {\r\n        // Generate a token\r\n        cancelTokenSourceRef.current = axios.CancelToken.source();\r\n\r\n        getChats(cancelTokenSourceRef.current, true);\r\n\r\n        if (keyword.trim().length > 0) {\r\n            searchMessages(cancelTokenSourceRef.current);\r\n        }\r\n\r\n        return () => {\r\n            if (cancelTokenSourceRef.current) {\r\n                cancelTokenSourceRef.current.cancel(\"Operation canceled due to new request.\");\r\n            }\r\n        }\r\n    }, [keyword]);\r\n\r\n    useEffect(() => {\r\n        // New chatMessages\r\n        const onNewMessages = function (msg, data) {\r\n            // We don't need to update if chats are filtered\r\n            if (keyword.trim().length === 0) {\r\n                let willMakeRequest = false;\r\n\r\n                const nextState = props.chats;\r\n                let changedAny = false;\r\n\r\n                Object.entries(data).forEach((message) => {\r\n                    //const msgId = message[0];\r\n                    const chatMessage = message[1];\r\n                    const chatMessageWaId = chatMessage.waId;\r\n\r\n                    // New chat, incoming or outgoing message\r\n                    // Check if chat with waId already exists\r\n                    if (!nextState.hasOwnProperty(chatMessageWaId)) {\r\n                        willMakeRequest = true;\r\n                    }\r\n\r\n                    // Chats are ordered by incoming message date\r\n                    if (nextState.hasOwnProperty(chatMessageWaId)) {\r\n                        changedAny = true;\r\n\r\n                        // Update existing chat\r\n                        nextState[chatMessageWaId].setLastMessage(chatMessage.payload);\r\n\r\n                        // Incoming\r\n                        if (!chatMessage.isFromUs) {\r\n                            // Update name and initials on incoming message if name is missing\r\n                            const chat = nextState[chatMessageWaId];\r\n                            if (chat) {\r\n                                const chatName = chat.name;\r\n                                if (!containsLetters(chatName)) {\r\n                                    // Update sidebar chat name\r\n                                    nextState[chatMessageWaId].setName(chatMessage.senderName);\r\n\r\n                                    // Check if current chat\r\n                                    if (waId === chatMessageWaId) {\r\n                                        PubSub.publish(EVENT_TOPIC_UPDATE_PERSON_NAME, chatMessage.senderName);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n\r\n                    // New chatMessages\r\n                    if (!chatMessage.isFromUs && (waId !== chatMessageWaId || document.visibilityState === 'hidden')) {\r\n                        const preparedNewMessages = props.newMessages;\r\n                        if (props.newMessages[chatMessageWaId] === undefined) {\r\n                            preparedNewMessages[chatMessageWaId] = new NewMessageClass(chatMessageWaId, 0);\r\n                        }\r\n\r\n                        // Increase number of new chatMessages\r\n                        preparedNewMessages[chatMessageWaId].newMessages++;\r\n\r\n                        props.setNewMessages({...preparedNewMessages});\r\n\r\n                        // Display a notification\r\n                        if (!chatMessage.isFromUs) {\r\n                            props.displayNotification(\"New messages\", \"You have new messages!\", chatMessageWaId);\r\n                        }\r\n                    }\r\n                });\r\n\r\n                // If anything has changed, sort chats\r\n                if (changedAny) {\r\n                    // Sorting\r\n                    let sortedNextState = Object.entries(nextState).sort((a, b) => b[1].lastMessageTimestamp - a[1].lastMessageTimestamp);\r\n                    sortedNextState = Object.fromEntries(sortedNextState);\r\n\r\n                    props.setChats({...sortedNextState});\r\n                }\r\n\r\n                // We do this to generate new (missing) chat\r\n                if (willMakeRequest) {\r\n                    getChats(cancelTokenSourceRef.current, false);\r\n                }\r\n            }\r\n        }\r\n\r\n        const newChatMessagesEventToken = PubSub.subscribe(EVENT_TOPIC_NEW_CHAT_MESSAGES, onNewMessages);\r\n\r\n        return () => {\r\n            PubSub.unsubscribe(newChatMessagesEventToken);\r\n        }\r\n    }, [waId, props.chats, props.newMessages, keyword]);\r\n\r\n    useEffect(() => {\r\n        const chatsContainerCopy = chatsContainer.current;\r\n\r\n        // To optimize scroll event\r\n        let debounceTimer;\r\n\r\n        function handleScroll(e) {\r\n            if (debounceTimer) {\r\n                window.clearTimeout(debounceTimer);\r\n            }\r\n\r\n            debounceTimer = setTimeout(function () {\r\n                const threshold = 0;\r\n                const el = e.target;\r\n\r\n                if (isScrollable(el)) {\r\n                    console.log('Scrollable');\r\n                }\r\n            }, 100);\r\n        }\r\n\r\n        chatsContainerCopy.addEventListener(\"scroll\", handleScroll);\r\n\r\n        return () => {\r\n            clearTimeout(debounceTimer);\r\n            chatsContainerCopy.removeEventListener(\"scroll\", handleScroll);\r\n        }\r\n    }, [props.chats]);\r\n\r\n    const search = async (_keyword) => {\r\n        setKeyword(_keyword);\r\n    }\r\n\r\n    const getChats = (cancelTokenSource, isInitial) => {\r\n        axios.get(`${BASE_URL}chats/`,\r\n            getConfig({\r\n                search: keyword\r\n            }, cancelTokenSource.token)\r\n        )\r\n            .then((response) => {\r\n                console.log(\"Chats\", response.data)\r\n\r\n                const preparedChats = {};\r\n                response.data.results.forEach((contact) => {\r\n                    const prepared = new ChatClass(contact);\r\n                    preparedChats[prepared.waId] = prepared;\r\n                });\r\n\r\n                props.setChats(preparedChats);\r\n\r\n                // In case param is undefined\r\n                isInitial = isInitial === true;\r\n\r\n                if (isInitial) {\r\n                    props.setProgress(100);\r\n                }\r\n\r\n                const willNotify = !isInitial;\r\n\r\n                const preparedNewMessages = {};\r\n                response.data.results.forEach((newMessage) => {\r\n                    const newWaId = newMessage.contact.waba_payload.wa_id;\r\n                    const newAmount = newMessage.new_messages;\r\n                    const prepared = new NewMessageClass(newWaId, newAmount);\r\n                    preparedNewMessages[prepared.waId] = prepared;\r\n                });\r\n\r\n                if (willNotify) {\r\n                    let hasAnyNewMessages = false;\r\n                    let chatMessageWaId;\r\n\r\n                    props.setNewMessages((prevState => {\r\n                            Object.entries(preparedNewMessages).forEach((newMsg) => {\r\n                                const newMsgWaId = newMsg[0]\r\n                                const number = newMsg[1].newMessages;\r\n                                if (newMsgWaId !== waId) {\r\n                                    // TODO: Consider a new contact (last part of the condition)\r\n                                    if ((prevState[newMsgWaId] && number > prevState[newMsgWaId].newMessages) /*|| (!prevState[newMsgWaId] && number > 0)*/) {\r\n                                        hasAnyNewMessages = true;\r\n\r\n                                        // There can be multiple new chats, we take first one\r\n                                        if (chatMessageWaId === newMsgWaId) chatMessageWaId = newMsgWaId;\r\n                                    }\r\n                                }\r\n                            });\r\n\r\n                            // When state is a JSON object, it is unable to understand whether it is different or same and renders again\r\n                            // So we check if new state is actually different than previous state\r\n                            if (JSON.stringify(preparedNewMessages) !== JSON.stringify(prevState)) {\r\n                                return preparedNewMessages;\r\n                            } else {\r\n                                return prevState;\r\n                            }\r\n                        }\r\n                    ));\r\n\r\n                    // Display a notification\r\n                    if (hasAnyNewMessages) {\r\n                        props.displayNotification(\"New messages\", \"You have new messages!\", chatMessageWaId);\r\n                    }\r\n                } else {\r\n                    props.setNewMessages(preparedNewMessages);\r\n                }\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n\r\n                // TODO: Move this to a common interceptor\r\n                if (error.response) {\r\n                    handleIfUnauthorized(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    const searchMessages = (cancelTokenSource) => {\r\n        axios.get( `${BASE_URL}messages/`,\r\n            getConfig({\r\n                //offset: offset ?? 0,\r\n                limit: 30,\r\n                search: keyword\r\n            }, cancelTokenSource.token)\r\n        )\r\n            .then((response) => {\r\n                console.log(\"Messages\", response.data);\r\n\r\n                const preparedMessages = {};\r\n                response.data.results.forEach((message) => {\r\n                    const prepared = new ChatMessageClass(message);\r\n                    preparedMessages[prepared.id] = prepared;\r\n                });\r\n\r\n                setChatMessages(preparedMessages);\r\n\r\n                console.log(preparedMessages);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n\r\n                if (error.response) {\r\n                    handleIfUnauthorized(error);\r\n                }\r\n            });\r\n    }\r\n\r\n    const goToMessage = (chatMessage) => {\r\n        if (waId !== chatMessage.waId) {\r\n            history.push({\r\n                'pathname': `/main/chat/${chatMessage.waId}`,\r\n                'goToMessage': chatMessage,\r\n            });\r\n        } else {\r\n            PubSub.publish(EVENT_TOPIC_GO_TO_MSG_ID, chatMessage);\r\n        }\r\n    }\r\n\r\n    const handleIfUnauthorized = (error) => {\r\n        if (error.response.status === 401) {\r\n            props.clearUserSession(\"invalidToken\");\r\n        }\r\n    }\r\n\r\n    const displayEditBusinessProfile = () => {\r\n        setAnchorEl(null);\r\n        props.setBusinessProfileVisible(true);\r\n    }\r\n\r\n    const goToSettings = () => {\r\n        setAnchorEl(null);\r\n        if (window.AndroidWebInterface) {\r\n            window.AndroidWebInterface.goToSettings();\r\n        }\r\n    }\r\n\r\n    const showChangePassword = () => {\r\n        setAnchorEl(null);\r\n        setChangePasswordDialogVisible(true);\r\n    }\r\n\r\n    const showChatTagsList = () => {\r\n        setAnchorEl(null);\r\n        props.setChatTagsListVisible(true);\r\n    }\r\n\r\n    const displayContacts = () => {\r\n        setContactsVisible(true);\r\n    }\r\n\r\n    const handleTabChange = (event, newValue) => {\r\n        setTabCase(newValue);\r\n    }\r\n\r\n    const clearFilter = () => {\r\n        props.setFilterTag(undefined);\r\n    }\r\n\r\n    return (\r\n        <div className={\"sidebar\" + (props.isChatOnly ? \" hidden\" : \"\")}>\r\n            <div className=\"sidebar__header\">\r\n                <Avatar\r\n                    onClick={() => setProfileVisible(true)}\r\n                    className={\"cursorPointer \" + (props.currentUser ? avatarClasses[generateInitialsHelper(props.currentUser.username)?.[0]] : '')}>\r\n                    {props.currentUser ? generateInitialsHelper(props.currentUser.username) : ''}\r\n                </Avatar>\r\n                <div className=\"sidebar__headerRight\">\r\n                    <IconButton onClick={displayContacts}>\r\n                        <ChatIcon />\r\n                    </IconButton>\r\n                    <IconButton onClick={displayMenu}>\r\n                        <MoreVertIcon />\r\n                    </IconButton>\r\n                </div>\r\n            </div>\r\n\r\n            <SearchBar onChange={(_keyword) => search(_keyword)} />\r\n\r\n            {props.filterTag &&\r\n            <div className=\"sidebar__clearFilter\" onClick={clearFilter}>\r\n                <CloseIcon />\r\n                Clear filter:&nbsp;\r\n                <span className=\"bold\">{props.filterTag.name}</span>\r\n            </div>\r\n            }\r\n\r\n            <div className=\"sidebar__tabs\">\r\n                <Tabs\r\n                    textColor=\"primary\"\r\n                    indicatorColor=\"primary\"\r\n                    variant={\"fullWidth\"}\r\n                    value={tabCase}\r\n                    scrollButtons=\"auto\"\r\n                    onChange={handleTabChange}>\r\n\r\n                    <Tab label={\"All\"} value={\"all\"} />\r\n                    <Tab label={\"Me\"} value={\"me\"} />\r\n                    <Tab label={\"Group\"} value={\"group\"} />\r\n\r\n                </Tabs>\r\n            </div>\r\n\r\n            <div className=\"sidebar__results\">\r\n\r\n                {keyword.trim().length > 0 &&\r\n                <h3>Chats</h3>\r\n                }\r\n\r\n                <div\r\n                    className=\"sidebar__results__chats\"\r\n                     ref={chatsContainer}>\r\n                    { Object.entries(props.chats)\r\n                        .filter((chat) => {\r\n                            const curChat = chat[1];\r\n\r\n                            // Filter by tag\r\n                            if (props.filterTag) {\r\n                                if (!curChat.tags) {\r\n                                    return false;\r\n                                }\r\n                                let hasTag = false;\r\n                                for (let i = 0; i < curChat.tags.length; i++) {\r\n                                    const curTag = curChat.tags[i];\r\n                                    if (curTag.id === props.filterTag.id) {\r\n                                        hasTag = true;\r\n                                        break;\r\n                                    }\r\n                                }\r\n                                if (!hasTag) return false;\r\n                            }\r\n\r\n                            // Filter by case\r\n                            switch (tabCase) {\r\n                                case \"all\": {\r\n                                    return true;\r\n                                }\r\n                                case \"me\": {\r\n                                    if (curChat.assignedToUser?.id === props.currentUser.id) {\r\n                                        return true;\r\n                                    }\r\n                                    break;\r\n                                }\r\n                                case \"group\": {\r\n                                    if (curChat.assignedGroup && props.currentUser.groups) {\r\n                                        const assignedGroupId = curChat.assignedGroup.id;\r\n                                        for (let i = 0; i < props.currentUser.groups.length; i++) {\r\n                                            const group = props.currentUser.groups[i];\r\n\r\n                                            if (group?.id === assignedGroupId) {\r\n                                                return true;\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                    break;\r\n                                }\r\n                                default: {\r\n                                    break;\r\n                                }\r\n                            }\r\n                        })\r\n                        .map((chat) =>\r\n                        <SidebarChat\r\n                            key={chat[0]}\r\n                            chatData={chat[1]}\r\n                            newMessages={props.newMessages}\r\n                            keyword={keyword}\r\n                            contactProvidersData={props.contactProvidersData}\r\n                            retrieveContactData={props.retrieveContactData}\r\n                            tabCase={tabCase} />\r\n                    )}\r\n\r\n                    { Object.keys(props.chats).length === 0 &&\r\n                    <span className=\"sidebar__results__chats__noResult\">\r\n                        {keyword.trim().length > 0 ?\r\n                            <span>No chats found for: <span className=\"searchOccurrence\">{keyword}</span></span>\r\n                            :\r\n                            <span>You don't have any chats yet.</span>\r\n                        }\r\n                    </span>\r\n                    }\r\n                </div>\r\n\r\n                {(keyword.trim().length > 0 && getObjLength(contactResults) > 0) &&\r\n                <h3>Contacts</h3>\r\n                }\r\n\r\n                {(keyword.trim().length > 0 && getObjLength(contactResults) > 0) &&\r\n                <div className=\"sidebar__results__contacts\">\r\n                    { Object.entries(contactResults).map((contactResult) =>\r\n                        <SidebarContactResult\r\n                            key={contactResult[0]}\r\n                            chatData={contactResult[1]}\r\n                        />\r\n                    )}\r\n                </div>\r\n                }\r\n\r\n                {(keyword.trim().length > 0 && getObjLength(chatMessages) > 0) &&\r\n                <h3>Messages</h3>\r\n                }\r\n\r\n                {(keyword.trim().length > 0 && getObjLength(chatMessages) > 0) &&\r\n                <div className=\"sidebar__results__messages\">\r\n                    { Object.entries(chatMessages).map((message) =>\r\n                        <SearchMessageResult\r\n                            key={message[0]}\r\n                            waId={waId}\r\n                            messageData={message[1]}\r\n                            keyword={keyword}\r\n                            displaySender={true}\r\n                            onClick={(chatMessage) => goToMessage(chatMessage)} />\r\n                    )}\r\n                </div>\r\n                }\r\n            </div>\r\n\r\n            {isContactsVisible &&\r\n            <Contacts\r\n                contactProvidersData={props.contactProvidersData}\r\n                onHide={() => setContactsVisible(false)} />\r\n            }\r\n\r\n            {isProfileVisible &&\r\n            <BusinessProfile\r\n                isAdmin={props.isAdmin}\r\n                currentUser={props.currentUser}\r\n                onHide={() => setProfileVisible(false)}\r\n                displayEditBusinessProfile={displayEditBusinessProfile}\r\n                setChangePasswordDialogVisible={setChangePasswordDialogVisible} />\r\n            }\r\n\r\n            <Menu\r\n                anchorEl={anchorEl}\r\n                getContentAnchorEl={null}\r\n                anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\r\n                transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n                keepMounted\r\n                open={Boolean(anchorEl)}\r\n                onClose={hideMenu}\r\n                elevation={3}>\r\n                <MenuItem onClick={showChatTagsList}>Tags</MenuItem>\r\n                <Divider />\r\n                <MenuItem className=\"sidebar__menu__refresh\" onClick={() => window.location.reload()}>Refresh</MenuItem>\r\n                <MenuItem onClick={showChangePassword}>Change password</MenuItem>\r\n                <MenuItem onClick={forceClearContactProvidersData}>Refresh contacts</MenuItem>\r\n                {props.isAdmin &&\r\n                <Divider />\r\n                }\r\n                {props.isAdmin &&\r\n                    <MenuItem component={Link} href={getHubURL()} target=\"_blank\" color=\"initial\">Admin panel</MenuItem>\r\n                }\r\n                {isMobile &&\r\n                <MenuItem onClick={goToSettings}>Settings (App Only)</MenuItem>\r\n                }\r\n                <Divider />\r\n                <MenuItem onClick={logOut}>Logout</MenuItem>\r\n            </Menu>\r\n\r\n            <ChangePasswordDialog\r\n                open={isChangePasswordDialogVisible}\r\n                setOpen={setChangePasswordDialogVisible} />\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Sidebar","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SidebarChat.js",["300","301","302"],"import React, {useEffect, useState} from 'react';\r\nimport '../styles/SidebarChat.css';\r\nimport {Avatar, ListItem, Tooltip} from \"@material-ui/core\";\r\nimport {Link, useHistory, useParams} from \"react-router-dom\";\r\nimport LabelIcon from '@material-ui/icons/Label';\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport Moment from \"react-moment\";\r\nimport {avatarStyles} from \"../AvatarStyles\";\r\nimport moment from \"moment\";\r\nimport {\r\n    addPlus,\r\n    extractAvatarFromContactProviderData,\r\n    generateInitialsHelper,\r\n    markOccurrences,\r\n    replaceEmojis\r\n} from \"../Helpers\";\r\nimport {getDroppedFiles, handleDragOver} from \"../FileHelpers\";\r\nimport PubSub from \"pubsub-js\";\r\nimport {CALENDAR_SHORT, EVENT_TOPIC_DROPPED_FILES} from \"../Constants\";\r\nimport ChatMessageShortContent from \"./ChatMessageShortContent\";\r\n\r\nfunction SidebarChat(props) {\r\n\r\n    const history = useHistory();\r\n\r\n    const [isExpired, setExpired] = useState(props.chatData.isExpired);\r\n    const [timeLeft, setTimeLeft] = useState();\r\n    const [remainingSeconds, setRemainingSeconds] = useState();\r\n    const {waId} = useParams();\r\n    const avatarClasses = avatarStyles();\r\n\r\n    useEffect(() => {\r\n        props.retrieveContactData(props.chatData.waId);\r\n    }, []);\r\n\r\n    const generateTagNames = () => {\r\n        const generatedTagNames = [];\r\n        props.chatData.tags?.forEach((tag) => {\r\n            generatedTagNames.push(tag.name);\r\n        });\r\n        return generatedTagNames.join(', ');\r\n    }\r\n\r\n    useEffect(() => {\r\n        function calculateRemaining() {\r\n            const momentDate = moment.unix(props.chatData.lastReceivedMessageTimestamp);\r\n            momentDate.add(1, 'day');\r\n            const curDate = moment(new Date());\r\n            const hours = momentDate.diff(curDate, 'hours');\r\n            const seconds = momentDate.diff(curDate, 'seconds');\r\n\r\n            setRemainingSeconds(seconds);\r\n\r\n            let suffix;\r\n\r\n            if (hours > 0) {\r\n                suffix = 'h';\r\n                setTimeLeft(hours + suffix);\r\n            } else {\r\n                const minutes = momentDate.diff(curDate, 'minutes');\r\n                if (minutes > 1) {\r\n                    suffix = 'm';\r\n                    setTimeLeft(minutes + suffix);\r\n                } else {\r\n                    if (seconds > 1) {\r\n                        suffix = 'm';\r\n                        setTimeLeft(minutes + suffix);\r\n                    } else {\r\n                        // Expired\r\n                        setExpired(true);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        setExpired(props.chatData.isExpired);\r\n\r\n        // Initial\r\n        calculateRemaining();\r\n\r\n        let intervalId;\r\n        if (!isExpired) {\r\n            intervalId = setInterval(() => {\r\n                calculateRemaining();\r\n            }, 30000);\r\n        }\r\n\r\n        return () => {\r\n            clearInterval(intervalId);\r\n        }\r\n    }, [isExpired, props.chatData.isExpired, props.chatData.lastMessageTimestamp]);\r\n\r\n    const handleDroppedFiles = (event) => {\r\n        if (isExpired) {\r\n            event.preventDefault();\r\n            return;\r\n        }\r\n\r\n        // Preparing dropped files\r\n        const files = getDroppedFiles(event);\r\n\r\n        // Switching to related chat\r\n        history.push(`/main/chat/${props.chatData.waId}`);\r\n\r\n        // Sending files via eventbus\r\n        PubSub.publish(EVENT_TOPIC_DROPPED_FILES, files);\r\n    }\r\n\r\n    return (\r\n        <Link to={ `/main/chat/${props.chatData.waId}` }>\r\n            <ListItem button>\r\n                <div\r\n                    id={props.chatData.waId}\r\n                    className={'sidebarChatWrapper ' + (waId === props.chatData.waId ? 'activeChat ' : '') + (isExpired ? 'expired ' : (remainingSeconds < 8 * 60 * 60 ? 'almostExpired ' : ''))}\r\n                    onDrop={(event) => handleDroppedFiles(event)}\r\n                    onDragOver={(event) => handleDragOver(event)}>\r\n\r\n                    <div className=\"sidebarChat\">\r\n\r\n                        <div className=\"sidebarChat__avatarWrapper\">\r\n                            <Avatar src={extractAvatarFromContactProviderData(props.contactProvidersData[props.chatData.waId])}\r\n                                    className={isExpired ? '' : avatarClasses[props.chatData.getAvatarClassName()]}>\r\n                                {props.chatData.initials}\r\n                            </Avatar>\r\n\r\n                            {(props.chatData.assignedToUser && ((props.tabCase === 'all') || (props.tabCase === 'group'))) &&\r\n                            <Tooltip title={props.chatData.generateAssignmentInformation()}>\r\n                                <Avatar className={\"sidebarChat__avatarWrapper__assignee \" + avatarClasses[props.chatData.generateAssignedToInitials()]}>\r\n                                    {generateInitialsHelper(props.chatData.generateAssignedToInitials())}\r\n                                </Avatar>\r\n                            </Tooltip>\r\n                            }\r\n\r\n                            {(props.chatData.assignedGroup\r\n                                && ((props.tabCase === 'all' && !props.chatData.assignedToUser) || (props.tabCase === 'me') || (props.tabCase === 'group' && !props.chatData.assignedToUser))) &&\r\n                            <Tooltip title={props.chatData.generateAssignmentInformation()}>\r\n                                <Avatar className={\"sidebarChat__avatarWrapper__assignee \" + avatarClasses[props.chatData.generateAssignedGroupInitials()]}>\r\n                                    <GroupIcon />\r\n                                </Avatar>\r\n                            </Tooltip>\r\n                            }\r\n                        </div>\r\n\r\n                        <div className=\"sidebarChat__info\">\r\n\r\n                            <div className=\"sidebarChat__info__nameWrapper\">\r\n                                <h2>\r\n                                    {(props.keyword !== undefined && props.keyword.trim().length > 0)\r\n                                        ?\r\n                                        <span dangerouslySetInnerHTML={{__html: markOccurrences(replaceEmojis(props.chatData.name), props.keyword)}}/>\r\n                                        :\r\n                                        <span dangerouslySetInnerHTML={{__html: replaceEmojis(props.contactProvidersData[props.chatData.waId]?.[0]?.name ?? props.chatData.name)}} />\r\n                                    }\r\n\r\n                                    {props.chatData.tags?.length > 0 &&\r\n                                    <div className=\"sidebarChat__info__tags\">\r\n                                        <Tooltip title={() => generateTagNames()}>\r\n                                            <LabelIcon className={props.chatData.tags.length > 1 ? \"multiple\" : \"\"} style={{fill: props.chatData.tags[0].web_inbox_color}} />\r\n                                        </Tooltip>\r\n                                    </div>\r\n                                    }\r\n                                </h2>\r\n\r\n                                <div className=\"sidebarChat__info__date\">\r\n                                    {props.chatData.lastMessageTimestamp &&\r\n                                    <Moment\r\n                                        className=\"sidebarChat__info__nameWrapper__lastMessageDate\"\r\n                                        date={props.chatData.lastMessageTimestamp}\r\n                                        calendar={CALENDAR_SHORT}\r\n                                        unix />\r\n                                    }\r\n\r\n                                    {!isExpired &&\r\n                                    <span className=\"sidebarChat__info__date__timeLeft\">{timeLeft} left</span>\r\n                                    }\r\n                                </div>\r\n                            </div>\r\n\r\n                            <div className=\"sidebarChat__info__lastMessage\">\r\n                                {((props.newMessages[props.chatData.waId]?.newMessages ?? 0) > 0 /*&& waId !== props.chatData.waId*/)\r\n                                    ?\r\n                                    <div className=\"sidebarChat__info__lastMessage__new\">\r\n                                        {props.newMessages[props.chatData.waId]?.newMessages} new message(s)\r\n                                    </div>\r\n                                    :\r\n                                    <div className=\"sidebarChat__info__lastMessage__body\">\r\n                                        <ChatMessageShortContent\r\n                                            type={props.chatData.lastMessageType}\r\n                                            buttonText={props.chatData.lastMessageButtonText}\r\n                                            text={props.chatData.lastMessageBody}\r\n                                            caption={props.chatData.lastMessageCaption}\r\n                                            isLastMessageFromUs={props.chatData.isLastMessageFromUs } />\r\n                                    </div>\r\n                                }\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <span className=\"sidebarChatWrapper__waId\">{addPlus(props.chatData.waId)}</span>\r\n\r\n                </div>\r\n            </ListItem>\r\n        </Link>\r\n    )\r\n}\r\n\r\nexport default SidebarChat","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessage.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Main.js",["303"],"import React, {useEffect, useState} from 'react';\r\nimport Sidebar from \"./Sidebar\";\r\nimport Chat from \"./Chat\";\r\nimport {Fade, Snackbar} from \"@material-ui/core\";\r\nimport PubSub from \"pubsub-js\";\r\nimport axios from \"axios\";\r\nimport {getConfig, getWebSocketURL} from \"../Helpers\";\r\nimport {useHistory, useLocation, useParams} from \"react-router-dom\";\r\nimport SearchMessage from \"./SearchMessage\";\r\nimport ContactDetails from \"./ContactDetails\";\r\nimport LoadingScreen from \"./LoadingScreen\";\r\nimport TemplateMessageClass from \"../TemplateMessageClass\";\r\nimport {Alert} from \"@material-ui/lab\";\r\nimport {\r\n    BASE_URL, EVENT_TOPIC_CHAT_ASSIGNMENT,\r\n    EVENT_TOPIC_CHAT_MESSAGE,\r\n    EVENT_TOPIC_CHAT_MESSAGE_STATUS_CHANGE, EVENT_TOPIC_CHAT_TAGGING,\r\n    EVENT_TOPIC_CONTACT_DETAILS_VISIBILITY,\r\n    EVENT_TOPIC_DISPLAY_ERROR, EVENT_TOPIC_MARKED_AS_RECEIVED,\r\n    EVENT_TOPIC_NEW_CHAT_MESSAGES,\r\n    EVENT_TOPIC_SEARCH_MESSAGES_VISIBILITY, EVENT_TOPIC_UNSUPPORTED_FILE\r\n} from \"../Constants\";\r\nimport ChatMessageClass from \"../ChatMessageClass\";\r\nimport PreviewMedia from \"./PreviewMedia\";\r\nimport logo from '../assets/images/logo.png';\r\nimport {\r\n    clearContactProvidersData,\r\n    clearToken,\r\n    getContactProvidersData,\r\n    getToken,\r\n    storeContactProvidersData\r\n} from \"../StorageHelper\";\r\nimport ChatAssignment from \"./ChatAssignment\";\r\nimport ChatTags from \"./ChatTags\";\r\nimport ChatTagsList from \"./ChatTagsList\";\r\nimport DownloadUnsupportedFile from \"./DownloadUnsupportedFile\";\r\n\r\nfunction useQuery() {\r\n    return new URLSearchParams(useLocation().search);\r\n}\r\n\r\nfunction Main() {\r\n\r\n    const {waId} = useParams();\r\n\r\n    const [progress, _setProgress] = useState(20);\r\n    const [checked, setChecked] = useState(false);\r\n\r\n    const [currentUser, setCurrentUser] = useState();\r\n    const [isAdmin, setAdmin] = useState(false);\r\n\r\n    const [chats, setChats] = useState({});\r\n    const [newMessages, setNewMessages] = useState({});\r\n    const [filterTag, setFilterTag] = useState();\r\n\r\n    const [templates, setTemplates] = useState({});\r\n    const [isLoadingTemplates, setLoadingTemplates] = useState(true);\r\n    const [templatesReady, setTemplatesReady] = useState(false);\r\n\r\n    const [isErrorVisible, setErrorVisible] = useState(false);\r\n    const [errorMessage, setErrorMessage] = useState('');\r\n\r\n    const [chatMessageToPreview, setChatMessageToPreview] = useState();\r\n\r\n    const [isSearchMessagesVisible, setSearchMessagesVisible] = useState(false);\r\n    const [isContactDetailsVisible, setContactDetailsVisible] = useState(false);\r\n    const [isChatAssignmentVisible, setChatAssignmentVisible] = useState(false);\r\n    const [isChatTagsVisible, setChatTagsVisible] = useState(false);\r\n    const [isChatTagsListVisible, setChatTagsListVisible] = useState(false);\r\n    const [isDownloadUnsupportedFileVisible, setDownloadUnsupportedFileVisible] = useState(false);\r\n\r\n    const [unsupportedFile, setUnsupportedFile] = useState();\r\n\r\n    const [chosenContact, setChosenContact] = useState();\r\n\r\n    const [contactProvidersData, setContactProvidersData] = useState(getContactProvidersData());\r\n\r\n    const history = useHistory();\r\n    const location = useLocation();\r\n    const query = useQuery();\r\n\r\n    const checkIsChatOnly = () => {\r\n        return query.get('chatonly') === '1';\r\n    }\r\n\r\n    const [isChatOnly,] = useState(checkIsChatOnly());\r\n\r\n    const setProgress = (value) => {\r\n        _setProgress(prevState => {\r\n            return value > prevState ? value : prevState;\r\n        })\r\n    }\r\n\r\n    const displayError = (error) => {\r\n        if (!axios.isCancel(error)) {\r\n            setErrorMessage(error.response?.data?.reason ?? 'An error has occurred.');\r\n            setErrorVisible(true);\r\n        }\r\n    }\r\n\r\n    const displayCustomError = (errorMessage) => {\r\n        setErrorMessage(errorMessage);\r\n        setErrorVisible(true);\r\n    }\r\n\r\n    const clearUserSession = (errorCase, nextLocation) => {\r\n        clearToken();\r\n        clearContactProvidersData();\r\n\r\n        let path;\r\n\r\n        if (errorCase) {\r\n            path = `/login/error/${errorCase}`;\r\n        } else {\r\n            path = \"/\";\r\n        }\r\n\r\n        history.push({\r\n            'pathname': path,\r\n            'nextPath': nextLocation?.pathname,\r\n            'search': nextLocation?.search\r\n        });\r\n    }\r\n\r\n    const handleClose = (event, reason) => {\r\n        if (reason === 'clickaway') {\r\n            return;\r\n        }\r\n\r\n        setErrorVisible(false);\r\n    };\r\n\r\n    const hideImageOrVideoPreview = () => {\r\n        setChatMessageToPreview(null);\r\n    }\r\n\r\n    const previewMedia = (chatMessage) => {\r\n        if (!chatMessage) {\r\n            hideImageOrVideoPreview();\r\n            return false;\r\n        }\r\n\r\n        // Pause any playing audios\r\n        PubSub.publishSync(EVENT_TOPIC_CHAT_MESSAGE, 'pause');\r\n\r\n        setChatMessageToPreview(chatMessage);\r\n    }\r\n\r\n    const goToChatByWaId = (_waId) => {\r\n        history.push(`/main/chat/${_waId}`);\r\n    }\r\n\r\n    const displayNotification = (title, body, chatWaId) => {\r\n        if (isChatOnly) return;\r\n\r\n        // Android web app interface\r\n        if (window.AndroidWebInterface) {\r\n            window.AndroidWebInterface.displayNotification(title, body, chatWaId);\r\n        }\r\n\r\n        function displayNtf() {\r\n            // eslint-disable-next-line no-unused-vars\r\n            const notification = new Notification(title, {\r\n                body: body,\r\n                icon: logo\r\n            });\r\n\r\n            notification.onclick = function (event) {\r\n                window.focus();\r\n\r\n                if (waId) {\r\n                    goToChatByWaId(chatWaId);\r\n                }\r\n            }\r\n        }\r\n        if (!window.Notification) {\r\n            console.log('Browser does not support notifications.');\r\n        } else {\r\n            // Check if permission is already granted\r\n            if (Notification.permission === 'granted') {\r\n                displayNtf();\r\n            } else {\r\n                // request permission from user\r\n                Notification.requestPermission().then(function (p) {\r\n                    if (p === 'granted') {\r\n                        displayNtf();\r\n                    } else {\r\n                        console.log('User blocked notifications.');\r\n                    }\r\n                }).catch(function (err) {\r\n                    console.error(err);\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const onSearchMessagesVisibilityEvent = function (msg, data) {\r\n        setSearchMessagesVisible(data);\r\n\r\n        // Hide other sections\r\n        if (data === true) {\r\n            setContactDetailsVisible(false);\r\n        }\r\n    };\r\n\r\n    const onContactDetailsVisibilityEvent = function (msg, data) {\r\n        setContactDetailsVisible(data);\r\n\r\n        // Hide other sections\r\n        if (data === true) {\r\n            setSearchMessagesVisible(false);\r\n        }\r\n    };\r\n\r\n    const onDisplayError = function (msg, data) {\r\n        displayCustomError(data);\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Display custom errors in any component\r\n        window.displayCustomError = displayCustomError;\r\n\r\n        // Display Axios errors in any component\r\n        window.displayError = displayError;\r\n\r\n        // We assign this method to window, to be able to call it from outside (eg: mobile app)\r\n        window.goToChatByWaId = goToChatByWaId;\r\n\r\n        if (!getToken()) {\r\n            clearUserSession(\"notLoggedIn\", location);\r\n        }\r\n\r\n        // Retrieve current user, this will trigger other requests\r\n        retrieveCurrentUser();\r\n\r\n        const onUnsupportedFileEvent = function (msg, data) {\r\n            setUnsupportedFile(data);\r\n            setDownloadUnsupportedFileVisible(true);\r\n        };\r\n\r\n        // EventBus\r\n        const searchMessagesVisibilityEventToken = PubSub.subscribe(EVENT_TOPIC_SEARCH_MESSAGES_VISIBILITY, onSearchMessagesVisibilityEvent);\r\n        const contactDetailsVisibilityEventToken = PubSub.subscribe(EVENT_TOPIC_CONTACT_DETAILS_VISIBILITY, onContactDetailsVisibilityEvent);\r\n        const displayErrorEventToken = PubSub.subscribe(EVENT_TOPIC_DISPLAY_ERROR, onDisplayError);\r\n        const unsupportedFileEventToken = PubSub.subscribe(EVENT_TOPIC_UNSUPPORTED_FILE, onUnsupportedFileEvent);\r\n\r\n        const CODE_NORMAL = 1000;\r\n        let ws;\r\n\r\n        let socketClosedAt;\r\n\r\n        const connect = () => {\r\n            console.log('Connecting to websocket server');\r\n\r\n            // WebSocket, consider a separate env variable for ws address\r\n            ws = new WebSocket(getWebSocketURL());\r\n\r\n            ws.onopen = function (event) {\r\n                console.log('Connected to websocket server.');\r\n\r\n                ws.send(JSON.stringify({token: getToken()}));\r\n\r\n                if (socketClosedAt) {\r\n                    const now = new Date();\r\n                    const differenceInMinutes = Math.abs(now.getTime() - socketClosedAt.getTime()) / 1000 / 60;\r\n\r\n                    console.log(differenceInMinutes);\r\n\r\n                    // If window was blurred for more than 3 hours\r\n                    if (differenceInMinutes >= 5) {\r\n                        window.location.reload();\r\n                    } else {\r\n                        socketClosedAt = undefined;\r\n                    }\r\n                }\r\n            }\r\n\r\n            ws.onclose = function (event) {\r\n                if (event.code !== CODE_NORMAL) {\r\n                    console.log('Retrying connection to websocket server in 1 second.');\r\n\r\n                    socketClosedAt = new Date();\r\n\r\n                    setTimeout(function () {\r\n                        connect();\r\n                    }, 1000);\r\n                }\r\n            }\r\n\r\n            ws.onerror = function (event) {\r\n                ws.close();\r\n            }\r\n\r\n            ws.onmessage = function (event) {\r\n                console.log('New message:', event.data);\r\n\r\n                try {\r\n                    const data = JSON.parse(event.data);\r\n\r\n                    if (data.type === 'waba_webhook') {\r\n                        const wabaPayload = data.waba_payload;\r\n\r\n                        // Incoming messages\r\n                        const incomingMessages = wabaPayload?.incoming_messages;\r\n\r\n                        if (incomingMessages) {\r\n                            const preparedMessages = {};\r\n\r\n                            incomingMessages.forEach((message) => {\r\n                                const messageObj = new ChatMessageClass(message);\r\n                                preparedMessages[messageObj.id] = messageObj;\r\n                            });\r\n\r\n                            PubSub.publish(EVENT_TOPIC_NEW_CHAT_MESSAGES, preparedMessages);\r\n                        }\r\n\r\n                        // Outgoing messages\r\n                        const outgoingMessages = wabaPayload?.outgoing_messages;\r\n\r\n                        if (outgoingMessages) {\r\n                            const preparedMessages = {};\r\n\r\n                            outgoingMessages.forEach((message) => {\r\n                                const messageObj = new ChatMessageClass(message);\r\n                                preparedMessages[messageObj.id] = messageObj;\r\n                            });\r\n\r\n                            PubSub.publish(EVENT_TOPIC_NEW_CHAT_MESSAGES, preparedMessages);\r\n                        }\r\n\r\n                        // Statuses\r\n                        const statuses = wabaPayload?.statuses;\r\n\r\n                        if (statuses) {\r\n                            const preparedStatuses = {};\r\n                            statuses.forEach((statusObj) => {\r\n                                if (!preparedStatuses.hasOwnProperty(statusObj.id)) {\r\n                                    preparedStatuses[statusObj.id] = {};\r\n                                }\r\n\r\n                                if (statusObj.status === 'sent') {\r\n                                    preparedStatuses[statusObj.id].sentTimestamp = statusObj.timestamp;\r\n                                }\r\n\r\n                                if (statusObj.status === 'delivered') {\r\n                                    preparedStatuses[statusObj.id].deliveredTimestamp = statusObj.timestamp;\r\n                                }\r\n\r\n                                if (statusObj.status === 'read') {\r\n                                    preparedStatuses[statusObj.id].readTimestamp = statusObj.timestamp;\r\n                                }\r\n                            });\r\n\r\n                            PubSub.publish(EVENT_TOPIC_CHAT_MESSAGE_STATUS_CHANGE, preparedStatuses);\r\n                        }\r\n\r\n                        // Chat assignment\r\n                        const chatAssignment = wabaPayload?.chat_assignment;\r\n\r\n                        if (chatAssignment) {\r\n                            const preparedMessages = {};\r\n                            const prepared = ChatMessageClass.fromAssignmentEvent(chatAssignment);\r\n                            preparedMessages[prepared.id] = prepared;\r\n\r\n                            PubSub.publish(EVENT_TOPIC_CHAT_ASSIGNMENT, preparedMessages);\r\n\r\n                            // Update chats\r\n                            setChats(prevState => {\r\n                                if (prevState.hasOwnProperty(prepared.waId)) {\r\n                                    prevState[prepared.waId].assignedToUser = prepared.assignmentEvent.assigned_to_user_set;\r\n                                    prevState[prepared.waId].assignedGroup = prepared.assignmentEvent.assigned_group_set;\r\n                                    return {...prevState};\r\n                                }\r\n                            });\r\n                        }\r\n\r\n                        // Chat tagging\r\n                        const chatTagging = wabaPayload?.chat_tagging;\r\n\r\n                        if (chatTagging) {\r\n                            const preparedMessages = {};\r\n                            const prepared = ChatMessageClass.fromTaggingEvent(chatTagging);\r\n                            preparedMessages[prepared.id] = prepared;\r\n\r\n                            PubSub.publish(EVENT_TOPIC_CHAT_TAGGING, preparedMessages);\r\n\r\n                            // Update chats\r\n                            setChats(prevState => {\r\n                                if (prevState.hasOwnProperty(prepared.waId)) {\r\n                                    if (chatTagging.action === \"added\") {\r\n                                        prevState[prepared.waId].tags.push(prepared.taggingEvent.tag);\r\n                                    } else if (chatTagging.action === \"removed\") {\r\n                                        prevState[prepared.waId].tags = prevState[prepared.waId].tags.filter((tag) => {\r\n                                            return tag.id !== prepared.taggingEvent.tag.id;\r\n                                        });\r\n                                    }\r\n\r\n                                    return {...prevState};\r\n                                }\r\n                            });\r\n                        }\r\n                    }\r\n\r\n                } catch (error) {\r\n                    console.error(error);\r\n                }\r\n            }\r\n        }\r\n\r\n        connect();\r\n\r\n        return () => {\r\n            PubSub.unsubscribe(searchMessagesVisibilityEventToken);\r\n            PubSub.unsubscribe(contactDetailsVisibilityEventToken);\r\n            PubSub.unsubscribe(displayErrorEventToken);\r\n            PubSub.unsubscribe(unsupportedFileEventToken);\r\n\r\n            ws.close(CODE_NORMAL);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        setChecked(true);\r\n\r\n        return () => {\r\n            // Hide search messages container\r\n            setSearchMessagesVisible(false);\r\n\r\n            // Hide contact details\r\n            setContactDetailsVisible(false);\r\n\r\n            // Hide chat assignment\r\n            setChatAssignmentVisible(false);\r\n        }\r\n    }, [waId]);\r\n\r\n    useEffect(() => {\r\n        const onMarkedAsReceived = function (msg, data) {\r\n            const relatedWaId = data;\r\n\r\n            setNewMessages(prevState => {\r\n                const nextState = prevState;\r\n                delete nextState[relatedWaId];\r\n\r\n                return {...nextState};\r\n            });\r\n        }\r\n\r\n        const markedAsReceivedEventToken = PubSub.subscribe(EVENT_TOPIC_MARKED_AS_RECEIVED, onMarkedAsReceived);\r\n\r\n        return () => {\r\n            PubSub.unsubscribe(markedAsReceivedEventToken);\r\n        }\r\n    }, [newMessages]);\r\n\r\n    useEffect(() => {\r\n        storeContactProvidersData(contactProvidersData);\r\n    }, [contactProvidersData]);\r\n\r\n    const retrieveCurrentUser = () => {\r\n        axios.get( `${BASE_URL}users/current/`, getConfig())\r\n            .then((response) => {\r\n                console.log(\"User: \", response.data);\r\n\r\n                setCurrentUser(response.data);\r\n\r\n                const role = response.data?.profile?.role;\r\n\r\n                // Only admins and users can access\r\n                if (role !== \"admin\" && role !== \"user\") {\r\n                    clearUserSession(\"incorrectRole\", location);\r\n                }\r\n\r\n                // Check if role is admin\r\n                const tempIsAdmin = role === \"admin\";\r\n                setAdmin(tempIsAdmin);\r\n\r\n                setProgress(30);\r\n\r\n                // Trigger next request\r\n                getTemplates();\r\n\r\n            })\r\n            .catch((error) => {\r\n                // TODO: Move this to a common interceptor\r\n                if (error.response) {\r\n                    if (error.response.status === 401) {\r\n                        // Invalid token\r\n                        console.log(location)\r\n                        clearUserSession(\"invalidToken\", location);\r\n                    }\r\n                }\r\n\r\n                displayError(error);\r\n            });\r\n    }\r\n\r\n    const getTemplates = () => {\r\n        axios.get( `${BASE_URL}templates/`, getConfig())\r\n            .then((response) => {\r\n                //console.log(\"Templates: \", response.data);\r\n\r\n                const preparedTemplates = {};\r\n                response.data.results.forEach((template) => {\r\n                    const prepared = new TemplateMessageClass(template);\r\n\r\n                    if (prepared.status === \"approved\") {\r\n                        preparedTemplates[prepared.name] = prepared;\r\n                    }\r\n                });\r\n\r\n                setTemplates(preparedTemplates);\r\n                setLoadingTemplates(false);\r\n                setTemplatesReady(true);\r\n\r\n                setProgress(50);\r\n\r\n            })\r\n            .catch((error) => {\r\n                // TODO: Handle errors\r\n\r\n                displayError(error);\r\n            });\r\n    }\r\n\r\n    const retrieveContactData = (personWaId) => {\r\n        if (contactProvidersData?.[personWaId] !== undefined) {\r\n            // Already retrieved\r\n            return;\r\n        }\r\n\r\n        axios.get( `${BASE_URL}contacts/${personWaId}`, getConfig())\r\n            .then((response) => {\r\n                console.log(\"Contact: \", response.data);\r\n\r\n                setContactProvidersData(prevState => {\r\n                    prevState[personWaId] = response.data.contact_provider_results;\r\n                    return {...prevState};\r\n                })\r\n            })\r\n            .catch((error) => {\r\n                displayError(error);\r\n            });\r\n    }\r\n\r\n    return (\r\n        <Fade in={checked}>\r\n            <div className=\"app__body\">\r\n\r\n                {templatesReady &&\r\n                <Sidebar\r\n                    isAdmin={isAdmin}\r\n                    chats={chats}\r\n                    setChats={setChats}\r\n                    newMessages={newMessages}\r\n                    setNewMessages={setNewMessages}\r\n                    filterTag={filterTag}\r\n                    setFilterTag={setFilterTag}\r\n                    currentUser={currentUser}\r\n                    setProgress={setProgress}\r\n                    displayNotification={displayNotification}\r\n                    clearUserSession={clearUserSession}\r\n                    contactProvidersData={contactProvidersData}\r\n                    retrieveContactData={retrieveContactData}\r\n                    isChatOnly={isChatOnly}\r\n                    setChatTagsListVisible={setChatTagsListVisible} />\r\n                }\r\n\r\n                {templatesReady &&\r\n                <Chat\r\n                    isAdmin={isAdmin}\r\n                    newMessages={newMessages}\r\n                    setChosenContact={setChosenContact}\r\n                    previewMedia={(chatMessage) => previewMedia(chatMessage)}\r\n                    templates={templates}\r\n                    isLoadingTemplates={isLoadingTemplates}\r\n                    clearUserSession={clearUserSession}\r\n                    contactProvidersData={contactProvidersData}\r\n                    retrieveContactData={retrieveContactData}\r\n                    isChatOnly={isChatOnly}\r\n                    setChatAssignmentVisible={setChatAssignmentVisible}\r\n                    setChatTagsVisible={setChatTagsVisible} />\r\n                }\r\n\r\n                {isSearchMessagesVisible &&\r\n                <SearchMessage />\r\n                }\r\n\r\n                {isContactDetailsVisible &&\r\n                <ContactDetails\r\n                    contactData={chosenContact}\r\n                    contactProvidersData={contactProvidersData}\r\n                    retrieveContactData={retrieveContactData}\r\n                    chats={chats}\r\n                    filterTag={filterTag}\r\n                    setFilterTag={setFilterTag} />\r\n                }\r\n\r\n                {isChatAssignmentVisible &&\r\n                <ChatAssignment\r\n                    waId={waId}\r\n                    open={isChatAssignmentVisible}\r\n                    setOpen={setChatAssignmentVisible}\r\n                    chats={chats}\r\n                    setChats={setChats} />\r\n                }\r\n\r\n                {isChatTagsVisible &&\r\n                <ChatTags\r\n                    waId={waId}\r\n                    open={isChatTagsVisible}\r\n                    setOpen={setChatTagsVisible}\r\n                    chats={chats}\r\n                    setChats={setChats}\r\n                />\r\n                }\r\n\r\n                {isChatTagsListVisible &&\r\n                <ChatTagsList\r\n                    waId={waId}\r\n                    open={isChatTagsListVisible}\r\n                    setOpen={setChatTagsListVisible}\r\n                    filterTag={filterTag}\r\n                    setFilterTag={setFilterTag}\r\n                />\r\n                }\r\n\r\n                {chatMessageToPreview &&\r\n                <PreviewMedia\r\n                    data={chatMessageToPreview}\r\n                    hideImageOrVideoPreview={hideImageOrVideoPreview} />\r\n                }\r\n\r\n                {isDownloadUnsupportedFileVisible &&\r\n                <DownloadUnsupportedFile\r\n                    open={isDownloadUnsupportedFileVisible}\r\n                    setOpen={setDownloadUnsupportedFileVisible}\r\n                    data={unsupportedFile} />\r\n                }\r\n\r\n                <Fade in={progress < 100} timeout={{exit: 1000}}>\r\n                    <div className=\"loadingScreenOuter\">\r\n                        <LoadingScreen\r\n                            progress={progress}\r\n                            setProgress={setProgress} />\r\n                    </div>\r\n                </Fade>\r\n\r\n                <Snackbar anchorOrigin={{ vertical: \"bottom\", horizontal: \"left\" }} open={isErrorVisible} autoHideDuration={6000} onClose={handleClose}>\r\n                    <Alert onClose={handleClose} severity=\"error\" elevation={4}>\r\n                        {errorMessage}\r\n                    </Alert>\r\n                </Snackbar>\r\n\r\n            </div>\r\n        </Fade>\r\n    )\r\n}\r\n\r\nexport default Main;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\AppTheme.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\Helpers.js",["304","305","306","307"],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\Constants.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\AvatarStyles.js",["308"],"import {makeStyles} from \"@material-ui/core/styles\";\r\n\r\nfunction hashCode(str) {\r\n    let hash = 0;\r\n    for (let i = 0; i < str.length; i++) {\r\n        hash = str.charCodeAt(i) + ((hash << 5) - hash);\r\n    }\r\n    return hash;\r\n}\r\n\r\nfunction intToRGB(i) {\r\n    const c = (i & 0x00FFFFFF)\r\n        .toString(16)\r\n        .toUpperCase();\r\n\r\n    return \"00000\".substring(0, 6 - c.length) + c;\r\n}\r\n\r\nconst prepareStylesObject = () => {\r\n    let obj = {};\r\n    for (let i = 65; i <= 90; i++) {\r\n        const curLetter = String.fromCharCode(i);\r\n        obj[curLetter] = {\r\n            color: '#fff',\r\n            backgroundColor: '#' + intToRGB(hashCode(curLetter.repeat(6)))\r\n        };\r\n    }\r\n    obj[\"orange\"] = {\"color\": \"#fff\", \"backgroundColor\": \"#ff9a10\"};\r\n\r\n    return obj;\r\n}\r\n\r\n// In case generating colors is needed again, this can be enabled\r\n//const avatarStyles = makeStyles((theme) => (prepareStylesObject()));\r\n\r\nconst avatarStyles = makeStyles((theme) => ({\r\n    \"A\": {\"color\": \"#fff\", \"backgroundColor\": \"#9D8060\"},\r\n    \"B\": {\"color\": \"#fff\", \"backgroundColor\": \"#60E8C0\"},\r\n    \"C\": {\"color\": \"#fff\", \"backgroundColor\": \"#245120\"},\r\n    \"D\": {\"color\": \"#fff\", \"backgroundColor\": \"#E7B980\"},\r\n    \"E\": {\"color\": \"#fff\", \"backgroundColor\": \"#AB21E0\"},\r\n    \"F\": {\"color\": \"#fff\", \"backgroundColor\": \"#6E8A40\"},\r\n    \"G\": {\"color\": \"#fff\", \"backgroundColor\": \"#31d5f2\"},\r\n    \"H\": {\"color\": \"#fff\", \"backgroundColor\": \"#f55600\"},\r\n    \"I\": {\"color\": \"#fff\", \"backgroundColor\": \"#B8C360\"},\r\n    \"J\": {\"color\": \"#fff\", \"backgroundColor\": \"#7C2BC0\"},\r\n    \"K\": {\"color\": \"#fff\", \"backgroundColor\": \"#bc942e\"},\r\n    \"L\": {\"color\": \"#fff\", \"backgroundColor\": \"#02FC80\"},\r\n    \"M\": {\"color\": \"#fff\", \"backgroundColor\": \"#C664E0\"},\r\n    \"N\": {\"color\": \"#fff\", \"backgroundColor\": \"#89CD40\"},\r\n    \"O\": {\"color\": \"#fff\", \"backgroundColor\": \"#4e2a88\"},\r\n    \"P\": {\"color\": \"#fff\", \"backgroundColor\": \"#109E00\"},\r\n    \"Q\": {\"color\": \"#fff\", \"backgroundColor\": \"#ee2a81\"},\r\n    \"R\": {\"color\": \"#fff\", \"backgroundColor\": \"#976EC0\"},\r\n    \"S\": {\"color\": \"#fff\", \"backgroundColor\": \"#5AD720\"},\r\n    \"T\": {\"color\": \"#fff\", \"backgroundColor\": \"#1E3F80\"},\r\n    \"U\": {\"color\": \"#fff\", \"backgroundColor\": \"#E1A7E0\"},\r\n    \"V\": {\"color\": \"#fff\", \"backgroundColor\": \"#A51040\"},\r\n    \"W\": {\"color\": \"#fff\", \"backgroundColor\": \"#6878A0\"},\r\n    \"X\": {\"color\": \"#fff\", \"backgroundColor\": \"#2BE100\"},\r\n    \"Y\": {\"color\": \"#fff\", \"backgroundColor\": \"#EF4960\"},\r\n    \"Z\": {\"color\": \"#fff\", \"backgroundColor\": \"#B2B1C0\"},\r\n    \"orange\": {\"color\": \"#fff\", \"backgroundColor\": \"#ff9a10\"}\r\n}));\r\n\r\nexport {avatarStyles}","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ChatMessageClass.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\AttachmentTypesMenu.js",["309","310"],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\TemplateMessages.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\TemplateMessageClass.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatFooter.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatHeader.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\DateHelpers.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SearchMessage.js",["311"],"import React, {useEffect, useState} from 'react';\r\nimport '../styles/SearchMessage.css';\r\nimport {IconButton} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport PubSub from \"pubsub-js\";\r\nimport {BASE_URL, EVENT_TOPIC_GO_TO_MSG_ID, EVENT_TOPIC_SEARCH_MESSAGES_VISIBILITY} from \"../Constants\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport axios from \"axios\";\r\nimport {getConfig} from \"../Helpers\";\r\nimport ChatMessageClass from \"../ChatMessageClass\";\r\nimport SearchMessageResult from \"./SearchMessageResult\";\r\n\r\nfunction SearchMessage(props) {\r\n\r\n    const [results, setResults] = useState({});\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const {waId} = useParams();\r\n\r\n    useEffect(() => {\r\n        setResults({});\r\n    }, [waId]);\r\n\r\n    const hideSearchMessages = () => {\r\n        PubSub.publish(EVENT_TOPIC_SEARCH_MESSAGES_VISIBILITY, false);\r\n    }\r\n\r\n    let cancelToken;\r\n\r\n    const search = async (_keyword) => {\r\n        setKeyword(_keyword);\r\n\r\n        // Check if there are any previous pending requests\r\n        if (cancelToken !== undefined) {\r\n            cancelToken.cancel(\"Operation canceled due to new request.\");\r\n        }\r\n\r\n        // Generate a token\r\n        cancelToken = axios.CancelToken.source();\r\n\r\n        if (_keyword.trim().length === 0) {\r\n            setResults({});\r\n            return false;\r\n        }\r\n\r\n        axios.get( `${BASE_URL}messages/${waId}/`,\r\n            getConfig({\r\n                //offset: offset ?? 0,\r\n                limit: 30,\r\n                search: _keyword\r\n            }, cancelToken.token)\r\n        )\r\n            .then((response) => {\r\n                console.log(\"Messages\", response.data);\r\n\r\n                const preparedMessages = {};\r\n                response.data.results.map((message, index) => {\r\n                    const prepared = new ChatMessageClass(message);\r\n                    preparedMessages[prepared.id] = prepared;\r\n                });\r\n\r\n                setResults(preparedMessages);\r\n\r\n            })\r\n            .catch((error) => {\r\n                // TODO: Handle errors\r\n\r\n                //displayError(error);\r\n            });\r\n    }\r\n\r\n    const goToMessage = (data) => {\r\n        PubSub.publish(EVENT_TOPIC_GO_TO_MSG_ID, data);\r\n    }\r\n\r\n    return (\r\n        <div className=\"searchMessage\">\r\n            <div className=\"searchMessage__header\">\r\n                <IconButton onClick={hideSearchMessages}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n\r\n                <h3>Search For Messages</h3>\r\n            </div>\r\n\r\n            <SearchBar onChange={search} />\r\n\r\n            <div className=\"searchMessage__body\">\r\n                { Object.entries(results).map((message, index) =>\r\n                    <SearchMessageResult\r\n                        key={message[0]}\r\n                        waId={waId}\r\n                        messageData={message[1]}\r\n                        keyword={keyword}\r\n                        onClick={(chatMessage) => goToMessage(chatMessage)}/>\r\n                )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchMessage;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SearchBar.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageOptionsMenu.js",["312"],"import React, {useState} from 'react';\r\nimport {Menu, MenuItem} from \"@material-ui/core\";\r\n\r\nfunction ChatMessageOptionsMenu(props) {\r\n\r\n    const hideMenu = () => {\r\n        props.setMenuAnchorEl(null);\r\n    };\r\n\r\n    return (\r\n        <Menu\r\n            anchorEl={props.menuAnchorEl}\r\n            getContentAnchorEl={null}\r\n            anchorOrigin={{ vertical: \"bottom\", horizontal: \"right\" }}\r\n            transformOrigin={{ vertical: \"top\", horizontal: \"right\" }}\r\n            keepMounted\r\n            open={Boolean(props.menuAnchorEl)}\r\n            onClose={hideMenu}\r\n            elevation={3}\r\n            disableAutoFocusItem={true}>\r\n\r\n            <MenuItem>Delete</MenuItem>\r\n\r\n            {(props.optionsChatMessage && props.optionsChatMessage.isFromUs) &&\r\n            <MenuItem>Another option for outgoing messages</MenuItem>\r\n            }\r\n\r\n        </Menu>\r\n    )\r\n}\r\n\r\nexport default ChatMessageOptionsMenu;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\CreateTemplate.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SearchMessageResult.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ContactDetails.js",["313"],"import React, {useEffect} from 'react';\r\nimport {Avatar, IconButton} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport PubSub from \"pubsub-js\";\r\nimport {CALENDAR_NORMAL, EVENT_TOPIC_CONTACT_DETAILS_VISIBILITY} from \"../Constants\";\r\nimport '../styles/ContactDetails.css';\r\nimport Moment from \"react-moment\";\r\nimport {avatarStyles} from \"../AvatarStyles\";\r\nimport googleLogo from '../assets/images/ic-google.png';\r\nimport hubspotLogo from '../assets/images/ic-hubspot.png';\r\n\r\nfunction ContactDetails(props)  {\r\n\r\n    const hideContactDetails = () => {\r\n        PubSub.publish(EVENT_TOPIC_CONTACT_DETAILS_VISIBILITY, false);\r\n    }\r\n\r\n    const avatarClasses = avatarStyles();\r\n\r\n    useEffect(() => {\r\n        props.retrieveContactData(props.contactData.waId);\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"contactDetails\">\r\n            <div className=\"contactDetails__header\">\r\n                <IconButton onClick={hideContactDetails}>\r\n                    <CloseIcon />\r\n                </IconButton>\r\n\r\n                <h3>Contact Details</h3>\r\n            </div>\r\n\r\n            {props.contactData &&\r\n            <div className=\"contactDetails__body\">\r\n\r\n                <div className=\"contactDetails__body__section\">\r\n                    <div className=\"contactDetails__body__avatarContainer\">\r\n                        <Avatar\r\n                            src={props.contactProvidersData[props.contactData.waId]?.[0]?.large_avatar}\r\n                            className={avatarClasses[props.contactData.getAvatarClassName()] + \" contactDetails__body__avatar\"}>{props.contactData.initials}</Avatar>\r\n                    </div>\r\n\r\n                    <h3>{props.contactProvidersData[props.contactData.waId]?.[0]?.name ?? props.contactData.name}</h3>\r\n\r\n                    {props.contactProvidersData[props.contactData.waId]?.[0]?.companies?.[0] !== undefined &&\r\n                        <div className=\"contactDetails__body__job\">\r\n                            <span>{props.contactProvidersData[props.contactData.waId]?.[0]?.companies?.[0]?.job_title}</span> at <span>{props.contactProvidersData[props.contactData.waId]?.[0]?.companies?.[0]?.company_name}</span>\r\n                        </div>\r\n                    }\r\n\r\n                    <span>Last message: <Moment unix calendar={CALENDAR_NORMAL}>{props.contactData.lastMessageTimestamp}</Moment></span>\r\n                </div>\r\n\r\n                <div className=\"contactDetails__body__section\">\r\n                    <div className=\"contactDetails__body__section__title\">Whatsapp Phone Number</div>\r\n                    <a href={\"tel:+\" + props.contactData.waId}>{'+' + props.contactData.waId}</a>\r\n                </div>\r\n\r\n                {props.contactProvidersData[props.contactData.waId]?.map((providerData, index) =>\r\n                    <div\r\n                        className=\"contactDetails__body__section\"\r\n                        key={providerData.contact_provider.id}>\r\n\r\n                        <div className=\"contactDetails__body__section__title mb-3\">\r\n                            <div className=\"contactDetails__body__section__providerTitle\">\r\n                                {providerData.contact_provider.type === \"google\" &&\r\n                                <img className=\"mr-1\" src={googleLogo} alt={providerData.contact_provider.name} />\r\n                                }\r\n                                {providerData.contact_provider.type === \"hubspot\" &&\r\n                                <img className=\"mr-1\" src={hubspotLogo} alt={providerData.contact_provider.name} />\r\n                                }\r\n                                {providerData.contact_provider.name}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"contactDetails__body__section__content mb-2\">\r\n                            <div className=\"contactDetails__body__section__subtitle\">Phone number</div>\r\n                            <div className=\"contactDetails__body__section__content__sub\">\r\n                                {providerData.phone_numbers?.map((phoneNumber, phoneNumberIndex) =>\r\n                                    <div key={phoneNumberIndex}>\r\n                                        <a href={\"tel:\" + phoneNumber.phone_number}>\r\n                                            <span>{phoneNumber.phone_number}</span></a>\r\n                                        {phoneNumber.description &&\r\n                                        <span className=\"ml-1\">({phoneNumber.description})</span>\r\n                                        }\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n\r\n                        <div className=\"contactDetails__body__section__content\">\r\n                            <div className=\"contactDetails__body__section__subtitle\">E-mail</div>\r\n                            <div className=\"contactDetails__body__section__content__sub\">\r\n                                {providerData.email_addresses?.map((emailAddress, emailAddressIndex) =>\r\n                                    <div key={emailAddressIndex}>\r\n                                        <a href={\"mailto:\" + emailAddress.email_address}>{emailAddress.email_address}</a>\r\n                                        {emailAddress.description &&\r\n                                        <span className=\"ml-1\">({emailAddress.description})</span>\r\n                                        }\r\n                                    </div>\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                )}\r\n\r\n            </div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactDetails;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SidebarContactResult.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ChatClass.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\MessageDateIndicator.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\LoadingScreen.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\PreviewSendMedia.js",["314","315","316","317"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport '../styles/PreviewSendMedia.css';\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport {ButtonBase, IconButton, TextField} from \"@material-ui/core\";\r\nimport {getFirstObject, getLastObject, getObjLength} from \"../Helpers\";\r\nimport Send from \"@material-ui/icons/Send\";\r\nimport AddIcon from '@material-ui/icons/Add';\r\nimport {\r\n    ATTACHMENT_TYPE_AUDIO,\r\n    ATTACHMENT_TYPE_DOCUMENT,\r\n    ATTACHMENT_TYPE_IMAGE,\r\n    ATTACHMENT_TYPE_VIDEO,\r\n    EMPTY_IMAGE_BASE64, EVENT_TOPIC_RELOAD_PREVIEW\r\n} from \"../Constants\";\r\nimport FileInput from \"./FileInput\";\r\nimport {getDroppedFiles, handleDragOver, prepareSelectedFiles} from \"../FileHelpers\";\r\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\r\nimport AudiotrackIcon from \"@material-ui/icons/Audiotrack\";\r\n\r\nimport {Document, Page, pdfjs} from \"react-pdf\";\r\nimport PubSub from \"pubsub-js\";\r\nimport {useForceUpdate} from \"../hooks/useForceUpdate\";\r\n\r\nfunction PreviewSendMedia(props) {\r\n\r\n    const fileInput = useRef(null);\r\n\r\n    const [data, setData] = useState({});\r\n    const [chosenFile, setChosenFile] = useState();\r\n    const [captions, setCaptions] = useState({});\r\n    const [currentCaption, setCurrentCaption] = useState(\"\");\r\n    const [isDragOverlayVisible, setDragOverlayVisible] = useState(false);\r\n\r\n    const forceUpdate = useForceUpdate();\r\n\r\n    const hidePreview = () => {\r\n        props.setPreviewSendMediaVisible(false);\r\n    }\r\n\r\n    const changePreview = (index) => {\r\n        if (index >= 0 && data[index] !== undefined) {\r\n            setChosenFile(data[index]);\r\n        }\r\n    }\r\n\r\n    const deleteByIndex = (index) => {\r\n        const dataSize = getObjLength(data);\r\n        if (index >= 0 && data[index] !== undefined) {\r\n            if (dataSize === 1) {\r\n                props.setPreviewSendMediaVisible(false);\r\n            } else {\r\n                let nextState = {};\r\n                setData(prevState => {\r\n                    delete prevState[index];\r\n                    nextState = {...{}, ...prevState};\r\n                    return nextState;\r\n                });\r\n\r\n                if (chosenFile && chosenFile.key === index) {\r\n                    changePreview(getFirstObject(nextState).key);\r\n                }\r\n\r\n                setCaptions(prevState => {\r\n                    delete prevState[index];\r\n                    return prevState;\r\n                });\r\n            }\r\n        }\r\n    }\r\n\r\n    const send = () => {\r\n        const finalData = data;\r\n\r\n        // Inject captions\r\n        const finalPreparedData = {};\r\n        Object.entries(finalData).forEach((curChosenFile) => {\r\n            const copyCurChosenFile = curChosenFile[1];\r\n            copyCurChosenFile.caption = captions[copyCurChosenFile.key] ?? '';\r\n            finalPreparedData[copyCurChosenFile.key] = copyCurChosenFile;\r\n        });\r\n\r\n        // Send\r\n        props.sendHandledChosenFiles(finalData);\r\n\r\n        // Hide\r\n        props.setPreviewSendMediaVisible(false);\r\n    }\r\n\r\n    const handleSelectedFiles = (selectedFiles) => {\r\n        console.log(selectedFiles);\r\n\r\n        if (getObjLength(selectedFiles) > 0) {\r\n            const preparedFiles = prepareSelectedFiles(selectedFiles);\r\n\r\n            // Updating data with new files\r\n            setData(prevState => {\r\n                const newState = prevState;\r\n                let nextIndex = parseInt(getLastObject(newState).key) + 1;\r\n                Object.entries(preparedFiles).forEach((curPreparedFile) => {\r\n                    const preparedFile = curPreparedFile[1];\r\n                    preparedFile.key = nextIndex.toString();\r\n                    newState[nextIndex] = preparedFile;\r\n                    nextIndex++;\r\n                });\r\n\r\n                return {...{}, ...newState};\r\n            });\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        // For PDF previews\r\n        pdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\r\n\r\n        setData(props.data);\r\n        setCaptions({});\r\n\r\n        const reloadPreview = (msg, data) => {\r\n            // Just to rerender\r\n            forceUpdate();\r\n        }\r\n\r\n        // Force async codec information\r\n        const token = PubSub.subscribe(EVENT_TOPIC_RELOAD_PREVIEW, reloadPreview);\r\n\r\n        return () => {\r\n            // Clear data\r\n            props.setData({});\r\n\r\n            PubSub.unsubscribe(token);\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        if (chosenFile && data) {\r\n            const handleKey = (event) => {\r\n                // If any element is focused, ignore key\r\n                if (document.activeElement.tagName === \"INPUT\") {\r\n                    return false;\r\n                }\r\n\r\n                if (event.keyCode === 27) { // Escape\r\n                    hidePreview();\r\n                } else if (event.keyCode === 37) { // Left arrow\r\n                    changePreview(parseInt(chosenFile.key) - 1);\r\n                } else if (event.keyCode === 39) { // Right arrow\r\n                    changePreview(parseInt(chosenFile.key) + 1);\r\n                }\r\n            };\r\n\r\n            document.addEventListener('keydown', handleKey);\r\n\r\n            return () => {\r\n                document.removeEventListener('keydown', handleKey);\r\n            };\r\n        }\r\n    }, [chosenFile, data]);\r\n\r\n    useEffect(() => {\r\n        if (chosenFile) {\r\n            setCaptions(prevState => {\r\n                const newState = {};\r\n                newState[chosenFile.key] = currentCaption;\r\n\r\n                return {...prevState, ...newState};\r\n            })\r\n        }\r\n    }, [currentCaption]);\r\n\r\n    useEffect(() => {\r\n        // Preview first one\r\n        if (!chosenFile && getObjLength(data) > 0) {\r\n            changePreview(0)\r\n        }\r\n\r\n    }, [data]);\r\n\r\n    useEffect(() => {\r\n        if (chosenFile) {\r\n            setCurrentCaption(captions[chosenFile.key] ?? '');\r\n        }\r\n    }, [chosenFile, captions]);\r\n\r\n    return (\r\n        <div\r\n            className=\"previewSendMedia\"\r\n            /*onDragEnter={() => setDragOverlayVisible(true)}*/\r\n            onDrop={(event) => handleSelectedFiles(getDroppedFiles(event))}\r\n            onDragOver={(event) => handleDragOver(event)}>\r\n            <div className=\"previewSendMedia__header\">\r\n\r\n                <CloseIcon onClick={hidePreview}/>\r\n                <span>Preview</span>\r\n            </div>\r\n\r\n            <div className=\"previewSendMedia__preview\">\r\n                <div className=\"previewSendMedia__preview__wrapper\">\r\n                    {(chosenFile && chosenFile.attachmentType === ATTACHMENT_TYPE_IMAGE) &&\r\n                    <img className=\"previewSendMedia__preview__image\" src={chosenFile.fileURL} alt=\"Preview\" />\r\n                    }\r\n                    {(chosenFile && chosenFile.attachmentType === ATTACHMENT_TYPE_VIDEO) &&\r\n                    <video className=\"previewSendMedia__preview__video\" src={chosenFile.fileURL} controls={true} />\r\n                    }\r\n                    {(chosenFile && chosenFile.isPDF) &&\r\n                    <Document\r\n                        className=\"previewSendMedia__preview__pdf\"\r\n                        file={chosenFile.fileURL}>\r\n                        <Page pageNumber={1} scale={0.75} />\r\n                    </Document>\r\n                    }\r\n                </div>\r\n\r\n                {(chosenFile && chosenFile.attachmentType !== ATTACHMENT_TYPE_IMAGE && chosenFile.attachmentType !== ATTACHMENT_TYPE_VIDEO && !chosenFile.isPDF) &&\r\n                <div>\r\n                    {chosenFile.attachmentType}, <span className=\"searchOccurrence\">{chosenFile.file?.name}</span>\r\n                </div>\r\n                }\r\n            </div>\r\n\r\n            {(chosenFile && (chosenFile.attachmentType === ATTACHMENT_TYPE_IMAGE || chosenFile.attachmentType === ATTACHMENT_TYPE_VIDEO)) &&\r\n            <div className=\"previewSendMedia__caption\">\r\n                <TextField value={currentCaption}\r\n                           onChange={e => setCurrentCaption(e.target.value)}\r\n                           label=\"Add a caption...\"\r\n                           size=\"medium\"\r\n                           fullWidth={true}/>\r\n            </div>\r\n            }\r\n\r\n            <div className=\"previewSendMedia__footer\">\r\n\r\n                <div className=\"previewSendMedia__footer__inner\">\r\n                    { Object.entries(data).map((file) => {\r\n                        return (\r\n                            <span key={file[0]} className=\"previewSendMedia__footer__thumbnailOuter\">\r\n                                <span\r\n                                    className={\"previewSendMedia__footer__thumbnail\" + (chosenFile === file[1] ? \" chosenFile\" : \"\")}\r\n                                    onClick={() => changePreview(file[0])}>\r\n\r\n                                    {(file[1].attachmentType === ATTACHMENT_TYPE_IMAGE || file[1].attachmentType === ATTACHMENT_TYPE_VIDEO) &&\r\n                                    <img\r\n                                        className=\"previewSendMedia__footer__thumbnail__image\"\r\n                                        src={file[1].attachmentType === ATTACHMENT_TYPE_IMAGE ? file[1].fileURL : EMPTY_IMAGE_BASE64}\r\n                                        alt=\"Thumbnail\"\r\n                                    />\r\n                                    }\r\n\r\n                                    {(file[1].attachmentType === ATTACHMENT_TYPE_DOCUMENT) &&\r\n                                    <span className=\"previewSendMedia__footer__thumbnail__iconWrapper\">\r\n                                        <InsertDriveFileIcon />\r\n                                    </span>\r\n                                    }\r\n\r\n                                    {(file[1].attachmentType === ATTACHMENT_TYPE_AUDIO) &&\r\n                                    <span className=\"previewSendMedia__footer__thumbnail__iconWrapper\">\r\n                                        <AudiotrackIcon />\r\n                                    </span>\r\n                                    }\r\n                                </span>\r\n\r\n                                <IconButton onClick={() => deleteByIndex(file[0])} className=\"previewSendMedia__footer__thumbnail__delete\">\r\n                                    <CloseIcon />\r\n                                </IconButton>\r\n\r\n                            </span>\r\n                        )\r\n                    }) }\r\n\r\n                    <ButtonBase className=\"previewSendMedia__footer__addMoreWrapper\" onClick={() => fileInput.current?.click()}>\r\n                        <div className=\"previewSendMedia__footer__addMore\">\r\n                            <AddIcon/>\r\n                            <span>Add more</span>\r\n                        </div>\r\n                    </ButtonBase>\r\n\r\n                    <div className=\"hidden\">\r\n                        <FileInput innerRef={fileInput} accept=\"*.*\" handleSelectedFiles={handleSelectedFiles} />\r\n                    </div>\r\n\r\n                </div>\r\n\r\n                <div className=\"previewSendMedia__footer__sendWrapper\">\r\n                    <IconButton className=\"previewSendMedia__footer__send\" onClick={send}>\r\n                        <Send />\r\n                    </IconButton>\r\n                </div>\r\n\r\n            </div>\r\n\r\n            {isDragOverlayVisible &&\r\n            <div className=\"previewSendMedia__dragOverlay\" onDragLeave={() => setDragOverlayVisible(false)}>\r\n                <div className=\"previewSendMedia__dragOverlay__innerWrapper\">\r\n                    Drag and drop here\r\n                </div>\r\n            </div>\r\n            }\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PreviewSendMedia;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\FileInput.js",["318"],"import React, {useState} from \"react\";\r\n\r\nfunction FileInput(props) {\r\n\r\n    return (\r\n        <input\r\n            ref={props.innerRef}\r\n            type=\"file\"\r\n            onChange={(e) => props.handleSelectedFiles(e.target.files)}\r\n            multiple={true}\r\n            onClick={(event)=> {\r\n                event.target.value = null\r\n            }}\r\n            accept={props.accept}\r\n        />\r\n    )\r\n}\r\n\r\nexport default FileInput;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\FileHelpers.js",["319"],"import ChosenFileClass from \"./ChosenFileClass\";\r\nimport {\r\n    ATTACHMENT_TYPE_AUDIO,\r\n    ATTACHMENT_TYPE_DOCUMENT,\r\n    ATTACHMENT_TYPE_IMAGE,\r\n    ATTACHMENT_TYPE_VIDEO\r\n} from \"./Constants\";\r\nimport {stringContainsAnyInArray} from \"./Helpers\";\r\nimport * as musicMetadata from \"music-metadata-browser\";\r\n\r\nexport const prepareSelectedFiles = (selectedFiles) => {\r\n    const preparedFiles = {};\r\n    Object.entries(selectedFiles).forEach((file) => {\r\n        preparedFiles[file[0]] = new ChosenFileClass(file[0], file[1], true);\r\n    });\r\n\r\n    return preparedFiles;\r\n}\r\n\r\nexport const getDroppedFiles = (event) => {\r\n    event.preventDefault();\r\n\r\n    /*let i;\r\n    if (event.dataTransfer.items) {\r\n        // Use DataTransferItemList interface to access the file(s)\r\n        for (i = 0; i < event.dataTransfer.items.length; i++) {\r\n            // If dropped items aren't files, reject them\r\n            if (event.dataTransfer.items[i].kind === 'file') {\r\n                const file = event.dataTransfer.items[i].getAsFile();\r\n                console.log('... file[' + i + '].name = ' + file.name);\r\n            }\r\n        }\r\n    } else {\r\n        // Use DataTransfer interface to access the file(s)\r\n        for (i = 0; i < event.dataTransfer.files.length; i++) {\r\n            console.log('... file[' + i + '].name = ' + event.dataTransfer.files[i].name);\r\n        }\r\n    }*/\r\n\r\n    return {...event.dataTransfer.files};\r\n}\r\n\r\nexport const getAttachmentTypeByFile = (file, callback) => {\r\n    const mimeType = file.type;\r\n    if (mimeType.includes('image')) {\r\n        const supportedImageTypes = ['image/jpeg', 'image/png', 'image/webp'];\r\n        if (stringContainsAnyInArray(mimeType, supportedImageTypes)) {\r\n            return ATTACHMENT_TYPE_IMAGE;\r\n        }\r\n    } else if (mimeType.includes('video')) {\r\n        const supportedVideoTypes = ['video/mp4', 'video/3gpp'];\r\n        if (stringContainsAnyInArray(mimeType, supportedVideoTypes)) {\r\n            return ATTACHMENT_TYPE_VIDEO;\r\n        }\r\n    } else if (mimeType.includes('audio')) {\r\n        // OGG is an exception\r\n        if (mimeType.includes('audio/ogg')) {\r\n\r\n            // This will be skipped for voice recording, we know what is type\r\n            if (callback !== undefined) {\r\n\r\n                // Get codec information async\r\n                musicMetadata.parseBlob(file).then(metadata => {\r\n                    const codec = metadata?.format?.codec;\r\n                    // OGG files with Opus codec are supported\r\n                    if (codec && codec.toLowerCase().includes('opus')) {\r\n                        callback(ATTACHMENT_TYPE_AUDIO);\r\n                    } else {\r\n                        // Base OGG files are not supported\r\n                        callback(ATTACHMENT_TYPE_DOCUMENT);\r\n                    }\r\n                })\r\n            }\r\n\r\n            return ATTACHMENT_TYPE_DOCUMENT;\r\n\r\n        } else {\r\n            // If not OGG\r\n            const supportedAudioTypes = ['audio/aac', 'audio/mp4', 'audio/amr', 'audio/mpeg'];\r\n            if (stringContainsAnyInArray(mimeType, supportedAudioTypes)) {\r\n                return ATTACHMENT_TYPE_AUDIO;\r\n            }\r\n        }\r\n    }\r\n\r\n    return ATTACHMENT_TYPE_DOCUMENT;\r\n}\r\n\r\nexport const convertToBase64 = (file, callback) => {\r\n    const fileReader = new FileReader();\r\n    let base64;\r\n\r\n    fileReader.onload = function(fileLoadedEvent) {\r\n        base64 = fileLoadedEvent.target.result;\r\n\r\n        callback(base64);\r\n    };\r\n\r\n    fileReader.readAsDataURL(file);\r\n}\r\n\r\nexport const b64toBlob = (b64Data, contentType = '', sliceSize = 512) => {\r\n    const byteCharacters = atob(b64Data);\r\n    const byteArrays = [];\r\n\r\n    for (let offset = 0; offset < byteCharacters.length; offset += sliceSize) {\r\n        const slice = byteCharacters.slice(offset, offset + sliceSize);\r\n\r\n        const byteNumbers = new Array(slice.length);\r\n        for (let i = 0; i < slice.length; i++) {\r\n            byteNumbers[i] = slice.charCodeAt(i);\r\n        }\r\n\r\n        const byteArray = new Uint8Array(byteNumbers);\r\n        byteArrays.push(byteArray);\r\n    }\r\n\r\n    return new Blob(byteArrays, {type: contentType});\r\n}\r\n\r\nexport const handleDragOver = (event) => {\r\n    event.preventDefault();\r\n}\r\n\r\nconst getVideoCover = (file, seekTo = 0.0) => {\r\n    console.log(\"getting video cover for file: \", file);\r\n    return new Promise((resolve, reject) => {\r\n        // load the file to a video player\r\n        const videoPlayer = document.createElement('video');\r\n        videoPlayer.setAttribute('src', URL.createObjectURL(file));\r\n        videoPlayer.load();\r\n        videoPlayer.addEventListener('error', (ex) => {\r\n            reject(\"error when loading video file\", ex);\r\n        });\r\n        // load metadata of the video to get video duration and dimensions\r\n        videoPlayer.addEventListener('loadedmetadata', () => {\r\n            // seek to user defined timestamp (in seconds) if possible\r\n            if (videoPlayer.duration < seekTo) {\r\n                reject(\"video is too short.\");\r\n                return;\r\n            }\r\n            // delay seeking or else 'seeked' event won't fire on Safari\r\n            setTimeout(() => {\r\n                videoPlayer.currentTime = seekTo;\r\n            }, 200);\r\n            // extract video thumbnail once seeking is complete\r\n            videoPlayer.addEventListener('seeked', () => {\r\n                console.log('video is now paused at %ss.', seekTo);\r\n                // define a canvas to have the same dimension as the video\r\n                const canvas = document.createElement(\"canvas\");\r\n                canvas.width = videoPlayer.videoWidth;\r\n                canvas.height = videoPlayer.videoHeight;\r\n                // draw the video frame to canvas\r\n                const ctx = canvas.getContext(\"2d\");\r\n                ctx.drawImage(videoPlayer, 0, 0, canvas.width, canvas.height);\r\n                // return the canvas image as a blob\r\n                ctx.canvas.toBlob(\r\n                    blob => {\r\n                        resolve(blob);\r\n                    },\r\n                    \"image/jpeg\",\r\n                    0.75 /* quality */\r\n                );\r\n            });\r\n        });\r\n    });\r\n}","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ChosenFileClass.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\hooks\\useForceUpdate.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageTypeIcon.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\VoiceRecorder.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\VoiceRecord.js",["320","321","322"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Dialog, DialogActions, DialogContent, DialogContentText, DialogTitle, IconButton} from \"@material-ui/core\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport FiberManualRecordIcon from \"@material-ui/icons/FiberManualRecord\";\r\nimport {displaySeconds} from \"../Helpers\";\r\nimport DoneIcon from \"@material-ui/icons/Done\";\r\nimport '../styles/VoiceRecord.css';\r\nimport VoiceRecorder from \"../VoiceRecorder\";\r\nimport {EVENT_TOPIC_DISPLAY_ERROR, EVENT_TOPIC_REQUEST_MIC_PERMISSION} from \"../Constants\";\r\nimport PubSub from \"pubsub-js\";\r\nimport {useParams} from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nlet timerIntervalId;\r\n\r\nfunction VoiceRecord(props) {\r\n\r\n    const voiceRecorder = useRef(new VoiceRecorder());\r\n    const [timer, setTimer] = useState(0);\r\n\r\n    const {waId} = useParams();\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    useEffect(() => {\r\n        const onRequestMicPermission = function (msg, data) {\r\n            requestMicrophonePermission();\r\n        }\r\n\r\n        const token = PubSub.subscribe(EVENT_TOPIC_REQUEST_MIC_PERMISSION, onRequestMicPermission);\r\n\r\n        return () => {\r\n            PubSub.unsubscribe(token);\r\n\r\n            cancelVoiceRecord();\r\n        }\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        cancelVoiceRecord();\r\n    }, [waId]);\r\n\r\n    const cancelVoiceRecord = () => {\r\n        voiceRecorder.current?.cancel();\r\n\r\n        onVoiceRecordStop();\r\n    }\r\n\r\n    const onVoiceRecordStop = () => {\r\n        props.setRecording(false);\r\n\r\n        // Stop timer\r\n        clearInterval(timerIntervalId);\r\n        setTimer(0);\r\n    }\r\n\r\n    const requestMicrophonePermission = () => {\r\n        if (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) {\r\n\r\n            const constraints = {\r\n                audio: {\r\n                    sampleRate: 48000,\r\n                    channelCount: 1,\r\n                    volume: 1.0,\r\n                    noiseSuppression: true\r\n                },\r\n                video: false\r\n            };\r\n\r\n            navigator.mediaDevices.getUserMedia(constraints)\r\n                .then(function (stream) {\r\n                    startVoiceRecord(stream);\r\n                })\r\n                .catch(function (err) {\r\n                    console.log('Permission denied');\r\n\r\n                    PubSub.publish(EVENT_TOPIC_DISPLAY_ERROR, 'You must grant microphone permission.');\r\n\r\n                    if (window.AndroidWebInterface) {\r\n                        window.AndroidWebInterface.requestPermissions();\r\n                    }\r\n\r\n                    // Check if iframe\r\n                    if (window.self !== window.top) {\r\n                        setOpen(true);\r\n                    }\r\n                });\r\n        } else {\r\n            console.log('Not supported on your browser.');\r\n\r\n            PubSub.publish(EVENT_TOPIC_DISPLAY_ERROR, 'This feature is not supported on your browser.');\r\n        }\r\n    }\r\n\r\n    const startVoiceRecord = (stream) => {\r\n        // If it is already recording, return\r\n        if (voiceRecorder.current?.isRecording()) return;\r\n\r\n        // Start recording\r\n        voiceRecorder.current?.start(\r\n            stream,\r\n            function () {\r\n                props.setRecording(true);\r\n\r\n                // Update timer every second\r\n                timerIntervalId = setInterval(function () {\r\n                    setTimer(prevState => prevState + 1);\r\n                }, 1000);\r\n            },\r\n            function () {\r\n                onVoiceRecordStop();\r\n            },\r\n            function (audioFile) {\r\n                //console.log(audioFile);\r\n            }\r\n        );\r\n    }\r\n\r\n    const stopVoiceRecord = () => {\r\n        voiceRecorder.current?.stop();\r\n    }\r\n\r\n    const sendVoiceRecord = () => {\r\n        stopVoiceRecord();\r\n\r\n        setTimeout(function () {\r\n            const chosenFile = voiceRecorder.current.lastAudioChosenFile;\r\n\r\n            // Send\r\n            if (chosenFile) {\r\n                props.sendHandledChosenFiles({0: voiceRecorder.current.lastAudioChosenFile});\r\n            } else {\r\n                console.log('Audio file is missing');\r\n            }\r\n        }, 1000);\r\n    }\r\n\r\n    const goToInbox = () => {\r\n        window.open(window.location.href, '_blank');\r\n        handleClose();\r\n    }\r\n\r\n    return (\r\n        <div className=\"voiceRecord\">\r\n            <IconButton onClick={stopVoiceRecord} className=\"voiceRecord__cancelButton\">\r\n                <CloseIcon />\r\n            </IconButton>\r\n\r\n            <FiberManualRecordIcon className=\"voiceRecord__recordIcon\" />\r\n            <span className=\"voiceRecord__timer\">{ displaySeconds(timer) }</span>\r\n\r\n            <IconButton onClick={sendVoiceRecord} className=\"voiceRecord__sendButton\">\r\n                <DoneIcon />\r\n            </IconButton>\r\n\r\n            <Dialog\r\n                open={open}\r\n                onClose={handleClose}>\r\n                <DialogTitle>Oops!</DialogTitle>\r\n                <DialogContent>\r\n                    <DialogContentText>\r\n                        You must open the inbox in a new tab to access this feature.\r\n                    </DialogContentText>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <Button onClick={handleClose} color=\"secondary\">\r\n                        Close\r\n                    </Button>\r\n                    <Button onClick={goToInbox} color=\"primary\" autoFocus>\r\n                        Go to inbox\r\n                    </Button>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default VoiceRecord;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\recorder\\worker.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ContextChatMessage.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageTypeLabel.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageShortContent.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\SendTemplateMessage.js",["323","324","325"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Button, TextField} from \"@material-ui/core\";\r\nimport '../styles/SendTemplateMessage.css';\r\nimport {getConfig, getTemplateParams, templateParamToInteger} from \"../Helpers\";\r\nimport FileInput from \"./FileInput\";\r\nimport axios from \"axios\";\r\nimport {BASE_URL} from \"../Constants\";\r\n\r\nfunction SendTemplateMessage(props) {\r\n\r\n    const template = props.data;\r\n\r\n    const [params, setParams] = useState({});\r\n    const [headerFileURL, setHeaderFileURL] = useState('');\r\n    const [isUploading, setUploading] = useState(false);\r\n\r\n    const headerFileInput = useRef();\r\n\r\n    useEffect(() => {\r\n        const preparedParams = {};\r\n        const components = {...template.components};\r\n\r\n        Object.entries(components).forEach((paramEntry, paramIndex) => {\r\n            const key = paramEntry[0];\r\n            const component = paramEntry[1];\r\n            const componentType = component.type;\r\n\r\n            if (componentType === \"HEADER\") {\r\n                if (component.format === \"IMAGE\" || component.format === \"VIDEO\" || component.format === \"DOCUMENT\") {\r\n                    const format = component.format.toLowerCase();\r\n                    preparedParams[key] = {\r\n                        0: { type: format }\r\n                    };\r\n\r\n                    preparedParams[key][0][format] = { link: \"\" };\r\n                }\r\n            }\r\n\r\n            console.log(component.format);\r\n            console.log(preparedParams);\r\n\r\n            const paramText = component.text;\r\n            const templateParamsArray = getTemplateParams(paramText);\r\n\r\n            templateParamsArray.map((extractedParam, extractedParamIndex) => {\r\n                if (preparedParams[key] === undefined) {\r\n                    preparedParams[key] = {};\r\n                }\r\n                preparedParams[key][templateParamToInteger(extractedParam)] = {\r\n                    type: \"text\",\r\n                    text: \"\"\r\n                };\r\n            });\r\n        });\r\n\r\n        setParams(preparedParams);\r\n\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        // Update params when header image changes\r\n        setParams(prevState => {\r\n            // TODO: Do this in a better way depends on template headers complexity\r\n            if (prevState[0] && prevState[0][0] && prevState[0][0]['image']) {\r\n                prevState[0][0]['image']['link'] = headerFileURL;\r\n            } else if (prevState[0] && prevState[0][0] && prevState[0][0]['video']) {\r\n                prevState[0][0]['video']['link'] = headerFileURL;\r\n            } else if (prevState[0] && prevState[0][0] && prevState[0][0]['document']) {\r\n                prevState[0][0]['document']['link'] = headerFileURL;\r\n            }\r\n\r\n            return prevState;\r\n        });\r\n    }, [headerFileURL, params]);\r\n\r\n    const updateParam = (event, index, paramKey) => {\r\n        setParams(prevState => {\r\n            const nextState = prevState;\r\n            nextState[index][paramKey].text = event.target.value;\r\n\r\n            return {...nextState};\r\n        })\r\n    }\r\n\r\n    const send = () => {\r\n        const preparedParams = {};\r\n        const components = {...template.components};\r\n\r\n        Object.entries(components).forEach((paramEntry, paramIndex) => {\r\n            const key = paramEntry[0];\r\n            const component = paramEntry[1];\r\n\r\n            if (params[key]) {\r\n                const paramsArray = Object.values(params[key]);\r\n\r\n                /*const localizableParams = [];\r\n                paramsArray.forEach((paramArrayItem) => {\r\n                    localizableParams.push({\r\n                        \"default\": paramArrayItem.text\r\n                    })\r\n                });*/\r\n\r\n                preparedParams[component.type] = {\r\n                    type: component.type.toLowerCase(),\r\n                    parameters: paramsArray,\r\n                    //localizable_params: localizableParams\r\n                };\r\n            }\r\n        });\r\n\r\n        const finalData = template;\r\n        finalData.params = Object.values(preparedParams);\r\n\r\n        // TODO: Change this later\r\n        props.send(finalData);\r\n\r\n        /*Object.entries(params).forEach((paramEntry) => {\r\n            finalData.components[paramEntry[0]].params = paramEntry[1];\r\n        });*/\r\n    }\r\n\r\n    const handleChosenImage = (file) => {\r\n        if (!file) return;\r\n\r\n        const formData = new FormData();\r\n        formData.append(\"file_encoded\", file[0]);\r\n\r\n        setUploading(true);\r\n\r\n        axios.post(`${BASE_URL}media/`, formData, getConfig())\r\n            .then((response) => {\r\n                console.log(response.data);\r\n\r\n                const fileURL = response.data.file;\r\n                setHeaderFileURL(fileURL);\r\n\r\n                setUploading(false);\r\n\r\n            })\r\n            .catch((error) => {\r\n                // TODO: Handle errors\r\n\r\n                setUploading(false);\r\n            });\r\n    }\r\n\r\n    const getMimetypeByFormat = (format) => {\r\n        if (format === \"IMAGE\") return \"image/jpeg, image/png\";\r\n        if (format === \"VIDEO\") return \"video/mp4, video/3gpp\";\r\n        if (format === \"DOCUMENT\") return \"*/*\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"sendTemplateMessage\">\r\n            <h4 className=\"sendTemplateMessage__title\">{template.name}</h4>\r\n\r\n            {template.components.map((comp, index) =>\r\n                <div key={index} className=\"sendTemplateMessage__component\">\r\n\r\n                    <div className=\"sendTemplateMessage__section\">\r\n                        <h6>{comp.type}</h6>\r\n                        <div>\r\n\r\n                            {(comp.format === \"IMAGE\" || comp.format === \"VIDEO\" || comp.format === \"DOCUMENT\") &&\r\n                            <div>\r\n                                <div>\r\n                                    {headerFileURL &&\r\n                                    <div>\r\n                                        <a href={headerFileURL} target=\"_blank\">{headerFileURL}</a>\r\n                                        {/*<img src={headerFileURL} className=\"sendTemplateMessage__component__header__preview\" alt=\"Header image preview\" />*/}\r\n                                    </div>\r\n                                    }\r\n                                </div>\r\n                                <FileInput innerRef={headerFileInput} multiple={false} accept={getMimetypeByFormat(comp.format)} handleSelectedFiles={handleChosenImage} />\r\n                                <Button color=\"primary\" onClick={() => headerFileInput.current.click()} disabled={isUploading}>Upload {comp.format.toLowerCase()}</Button>\r\n                                {headerFileURL &&\r\n                                <Button color=\"secondary\" onClick={() => setHeaderFileURL('')}>Delete</Button>\r\n                                }\r\n                            </div>\r\n                            }\r\n\r\n                            {comp.text}\r\n                            <div>\r\n                                {getTemplateParams(comp.text).map((param, paramIndex) =>\r\n                                    <TextField\r\n                                        value={params[index] ? params[index][templateParamToInteger(param)].text : ''}\r\n                                        onChange={(event) => updateParam(event, index, templateParamToInteger(param))}\r\n                                        className=\"templateMessage__param\"\r\n                                        key={paramIndex}\r\n                                        label={templateParamToInteger(param)}\r\n                                        fullWidth={true} />\r\n                                )}\r\n                            </div>\r\n                        </div>\r\n\r\n                        {comp.type === \"BUTTONS\" &&\r\n                        <div>\r\n                            {comp.buttons.map((button, buttonIndex) =>\r\n                                <Button key={buttonIndex} color=\"primary\" disabled={true}>\r\n                                    {button.text}\r\n                                    {/*<br/>{button.type}*/}\r\n                                </Button>\r\n                            )}\r\n                        </div>\r\n                        }\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            )}\r\n\r\n            <Button innerRef={props.sendButtonInnerRef} onClick={send} className=\"hidden\">Send</Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SendTemplateMessage;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\BusinessProfile.js",["326","327"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport '../styles/BusinessProfile.css';\r\nimport axios from \"axios\";\r\nimport {BASE_URL} from \"../Constants\";\r\nimport {getConfig, getLastKey, getObjLength} from \"../Helpers\";\r\nimport {CircularProgress, FormControlLabel, IconButton, Radio, RadioGroup, TextField} from \"@material-ui/core\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport CloseIcon from \"@material-ui/icons/Close\";\r\nimport Dialog from '@material-ui/core/Dialog';\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\n\r\nfunction BusinessProfile(props) {\r\n\r\n    const [isLoaded, setLoaded] = useState(false);\r\n    const [isUpdating, setUpdating] = useState(false);\r\n    const [address, setAddress] = useState('');\r\n    const [description, setDescription] = useState('');\r\n    const [email, setEmail] = useState('');\r\n    const [vertical, setVertical] = useState('');\r\n    const [websites, setWebsites] = useState({});\r\n    const [about, setAbout] = useState('');\r\n    const [profilePhoto, setProfilePhoto] = useState();\r\n\r\n    const [websiteKeyToDelete, setWebsiteKeyToDelete] = useState();\r\n\r\n    const [open, setOpen] = React.useState(false);\r\n\r\n    const imageElement = useRef();\r\n\r\n    const handleClickOpen = () => {\r\n        setOpen(true);\r\n    };\r\n\r\n    const handleClose = () => {\r\n        setOpen(false);\r\n    };\r\n\r\n    const getBusinessProfile = () => {\r\n        axios.get(`${BASE_URL}settings/business/profile/`, getConfig())\r\n            .then((response) => {\r\n                console.log(response.data);\r\n\r\n                const data = response.data;\r\n\r\n                setAddress(data.address);\r\n                setDescription(data.description);\r\n                setEmail(data.email);\r\n                setVertical(data.vertical);\r\n\r\n                let websitesArray = data.websites;\r\n                if (websitesArray.length === 0) {\r\n                    websitesArray = [\"\"];\r\n                }\r\n\r\n                setWebsites({...websitesArray});\r\n\r\n                // Load about\r\n                getAbout();\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n\r\n                props.displayError(error);\r\n            });\r\n    }\r\n\r\n    const updateBusinessProfile = async event => {\r\n        event.preventDefault();\r\n\r\n        setUpdating(true);\r\n\r\n        axios.patch( `${BASE_URL}settings/business/profile/`, {\r\n            address: address,\r\n            description: description,\r\n            email: email,\r\n            vertical: vertical,\r\n            websites: Object.values(websites)\r\n        }, getConfig())\r\n            .then((response) => {\r\n                console.log(response.data);\r\n\r\n                // Update about\r\n                updateAbout(event);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n\r\n                setUpdating(false);\r\n\r\n                props.displayError(error);\r\n            });\r\n    }\r\n\r\n    const getAbout = () => {\r\n        axios.get(`${BASE_URL}settings/profile/about/`, getConfig())\r\n            .then((response) => {\r\n                console.log(response.data);\r\n\r\n                const profile = response.data.settings?.profile;\r\n\r\n                setAbout(profile?.about?.text);\r\n\r\n                getProfilePhoto();\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n\r\n                props.displayError(error);\r\n            });\r\n    }\r\n\r\n    const updateAbout = async event => {\r\n        event.preventDefault();\r\n\r\n        axios.patch( `${BASE_URL}settings/profile/about/`, {\r\n            text: about\r\n        }, getConfig())\r\n            .then((response) => {\r\n                console.log(response.data);\r\n\r\n                setUpdating(false);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n\r\n                setUpdating(false);\r\n\r\n                props.displayError(error);\r\n            });\r\n    }\r\n\r\n    const getProfilePhoto = () => {\r\n        axios.get(`${BASE_URL}settings/profile/photo/`, getConfig())\r\n            .then((response) => {\r\n                console.log(response.data);\r\n\r\n                const profilePhotoData = btoa(unescape(encodeURIComponent(response.data)));\r\n\r\n                imageElement.current.\r\n\r\n                setProfilePhoto(profilePhotoData);\r\n\r\n                setLoaded(true);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n\r\n                props.displayError(error);\r\n            });\r\n    }\r\n\r\n    useEffect(() => {\r\n        getBusinessProfile();\r\n\r\n        const handleKey = (event) => {\r\n            // If any element is focused, ignore key\r\n            if (document.activeElement.tagName === \"INPUT\") {\r\n                return false;\r\n            }\r\n\r\n            if (event.keyCode === 27) { // Escape\r\n                props.setBusinessProfileVisible(false);\r\n            }\r\n        };\r\n\r\n        document.addEventListener('keydown', handleKey);\r\n\r\n        return () => {\r\n            document.removeEventListener('keydown', handleKey);\r\n        }\r\n    }, []);\r\n\r\n    const verticalOptions = [\r\n        \"Automotive\", \"Beauty, Spa and Salon\",\r\n        \"Clothing and Apparel\",\r\n        \"Education\",\r\n        \"Entertainment\",\r\n        \"Event Planning and Service\",\r\n        \"Finance and Banking\",\r\n        \"Food and Grocery\",\r\n        \"Public Service\",\r\n        \"Hotel and Lodging\",\r\n        \"Medical and Health\",\r\n        \"Non-profit\",\r\n        \"Professional Services\",\r\n        \"Shopping and Retail\",\r\n        \"Travel and Transportation\",\r\n        \"Restaurant\",\r\n        \"Other\"\r\n    ];\r\n\r\n    const addWebsite = () => {\r\n        setWebsites((prevState) => {\r\n            const nextState = prevState;\r\n            const nextKey = parseInt(getLastKey(websites)) + 1;\r\n            nextState[nextKey] = \"\";\r\n            return {...nextState};\r\n        });\r\n    }\r\n\r\n    const updateWebsite = (event, key) => {\r\n        setWebsites(prevState => {\r\n            const nextState = prevState;\r\n            nextState[key] = event.target.value;\r\n            return {...nextState};\r\n        });\r\n    }\r\n\r\n    const askToRemoveWebsite = (key) => {\r\n        setWebsiteKeyToDelete(key);\r\n        handleClickOpen();\r\n    }\r\n\r\n    const removeWebsite = () => {\r\n        setWebsites(prevState => {\r\n            const nextState = prevState;\r\n            delete nextState[websiteKeyToDelete];\r\n\r\n            const newObj = {};\r\n            Object.entries(nextState).forEach((websiteEntry, index) => {\r\n                newObj[index] = websiteEntry[1];\r\n            });\r\n\r\n            return {...newObj};\r\n        });\r\n\r\n        handleClose();\r\n    }\r\n\r\n    return (\r\n        <div className=\"businessProfileOuter\">\r\n\r\n            <IconButton className=\"businessProfileOuter__closeIcon\" onClick={() => props.setBusinessProfileVisible(false)}>\r\n                <CloseIcon />\r\n            </IconButton>\r\n\r\n            <div className=\"businessProfile\">\r\n                <div className=\"businessProfile__header\">\r\n                    <h2>Business Profile</h2>\r\n                </div>\r\n\r\n                <div className=\"businessProfile__fields\">\r\n\r\n                    <img ref={imageElement} alt=\"Profile photo\" />\r\n\r\n                    <form onSubmit={updateBusinessProfile}>\r\n                        <TextField value={about} onChange={e => setAbout(e.target.value)} label=\"About\" size=\"medium\" multiline={true} fullWidth={true} />\r\n\r\n                        <TextField value={address} onChange={e => setAddress(e.target.value)} label=\"Address\" size=\"medium\" fullWidth={true} />\r\n                        <TextField value={description} onChange={e => setDescription(e.target.value)} label=\"Description\" size=\"medium\" fullWidth={true} />\r\n                        <TextField value={email} onChange={e => setEmail(e.target.value)} label=\"E-mail\" size=\"medium\" fullWidth={true} />\r\n\r\n                        <h5>Vertical</h5>\r\n\r\n                        <RadioGroup row={true} className=\"businessProfile__fields__verticalOptions\">\r\n\r\n                            {verticalOptions.map((verticalOption, index) =>\r\n                                <FormControlLabel\r\n                                    key={index}\r\n                                    label={verticalOption}\r\n                                    value={verticalOption}\r\n                                    checked={vertical === verticalOption}\r\n                                    onChange={() => setVertical(verticalOption)}\r\n                                    control={<Radio />} />\r\n                            )}\r\n\r\n                        </RadioGroup>\r\n\r\n                        <h5>Websites</h5>\r\n\r\n                        <div className=\"businessProfile__fields__websites\">\r\n                            {Object.entries(websites).map((website, index) =>\r\n\r\n                                <div key={website[0]} className=\"businessProfile__fields__websites__wrapper\">\r\n                                    <TextField\r\n                                        value={website[1]}\r\n                                        label={\"Website \" + (parseInt(website[0]) + 1)}\r\n                                        size=\"medium\"\r\n                                        fullWidth={true}\r\n                                        onChange={(event) => updateWebsite(event, website[0])}/>\r\n\r\n                                    {getObjLength(websites) > 1 &&\r\n                                    <Button\r\n                                        typeof=\"button\"\r\n                                        color=\"secondary\"\r\n                                        onClick={() => askToRemoveWebsite(website[0])}>Delete</Button>\r\n                                    }\r\n                                </div>\r\n                            )}\r\n\r\n                            <Button type=\"button\" color=\"primary\" onClick={addWebsite} disableElevation>Add another website</Button>\r\n                        </div>\r\n\r\n                        <Button className=\"businessProfile__submit\" type=\"submit\" color=\"primary\" fullWidth={true} disabled={isUpdating} disableElevation>Update</Button>\r\n                    </form>\r\n                </div>\r\n\r\n                <Dialog\r\n                    open={open}\r\n                    onClose={handleClose}>\r\n                    <DialogTitle>{\"Are you sure?\"}</DialogTitle>\r\n                    <DialogContent>\r\n                        <DialogContentText>\r\n                            Are you sure you want to delete this website?\r\n                        </DialogContentText>\r\n                    </DialogContent>\r\n                    <DialogActions>\r\n                        <Button onClick={handleClose} color=\"secondary\">No</Button>\r\n                        <Button onClick={removeWebsite} color=\"primary\" autoFocus>Yes, delete</Button>\r\n                    </DialogActions>\r\n                </Dialog>\r\n\r\n                {!isLoaded &&\r\n                <div className=\"businessProfile__loading\">\r\n                    <CircularProgress color=\"primary\" />\r\n                </div>\r\n                }\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BusinessProfile;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageVideo.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageImage.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageDocument.js",["328"],"import React from \"react\";\r\nimport InsertDriveFileIcon from \"@material-ui/icons/InsertDriveFile\";\r\n\r\nfunction ChatMessageDocument(props) {\r\n    return (\r\n        <a href={props.data.documentLink ?? props.data.getHeaderFileLink('document')} target=\"_blank\" className=\"chat__document\">\r\n            <InsertDriveFileIcon fontSize=\"small\" />\r\n            <span className=\"chat__document__filename\">{props.data.documentCaption ?? (props.data.documentFileName ?? 'Document')}</span>\r\n        </a>\r\n    )\r\n}\r\n\r\nexport default ChatMessageDocument;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\PreviewMedia.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChangePasswordDialog.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageVoice.js",["329"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport {Avatar, IconButton} from \"@material-ui/core\";\r\nimport PauseIcon from \"@material-ui/icons/Pause\";\r\nimport PlayArrowIcon from \"@material-ui/icons/PlayArrow\";\r\nimport HeadsetIcon from \"@material-ui/icons/Headset\";\r\nimport PubSub from \"pubsub-js\";\r\nimport {EVENT_TOPIC_CHAT_MESSAGE} from \"../Constants\";\r\nimport {avatarStyles} from \"../AvatarStyles\";\r\n\r\nfunction ChatMessageVoice(props) {\r\n\r\n    const data = props.data;\r\n\r\n    const [isPlaying, setPlaying] = useState(false);\r\n    const duration = useRef(null);\r\n    const [progress, setProgress] = useState(0);\r\n    const [currentDuration, setCurrentDuration] = useState(\"0:00\");\r\n    const audio = useRef(null);\r\n    const range = useRef(null);\r\n\r\n    const onChatMessageEvent = function (msg, data) {\r\n        if (data === 'pause') {\r\n            pauseVoice();\r\n        }\r\n    };\r\n\r\n    const avatarClasses = avatarStyles();\r\n\r\n    const playIconStyles = {\r\n        fontSize: '38px'\r\n    };\r\n\r\n    useEffect(() => {\r\n        // Subscribing only if there is voice or audio\r\n        if (data.hasAnyAudio()) {\r\n            const token = PubSub.subscribe(EVENT_TOPIC_CHAT_MESSAGE, onChatMessageEvent);\r\n            return () => {\r\n                PubSub.unsubscribe(token);\r\n            }\r\n        }\r\n    }, []);\r\n\r\n    const pauseVoice = () => {\r\n        if (audio.current && range.current && !audio.current.paused) {\r\n            audio.current.pause();\r\n            setPlaying(false);\r\n        }\r\n    };\r\n\r\n    const playVoice = () => {\r\n        if (audio.current && range.current) {\r\n            if (!audio.current.paused) {\r\n                audio.current.pause();\r\n                setPlaying(false);\r\n            } else {\r\n\r\n                // Pause others\r\n                PubSub.publishSync(EVENT_TOPIC_CHAT_MESSAGE, 'pause');\r\n\r\n                audio.current.play();\r\n                setPlaying(true);\r\n            }\r\n\r\n            const interval = setInterval(function () {\r\n                if (audio.current && range.current) {\r\n                    const duration = audio.current.duration;\r\n                    const currentTime = audio.current.currentTime;\r\n\r\n                    setCurrentDuration(formatDuration(currentTime));\r\n\r\n                    if (duration) {\r\n                        const percentage = (currentTime * 100) / duration\r\n\r\n                        if (percentage >= 100) {\r\n                            setProgress(0);\r\n                            setCurrentDuration(formatDuration(0));\r\n                            setPlaying(false);\r\n                            clearInterval(interval);\r\n                        } else {\r\n                            setProgress(percentage);\r\n                        }\r\n                    }\r\n\r\n                    if (audio.current.paused) {\r\n                        clearInterval(interval);\r\n                    }\r\n                } else {\r\n                    // In case component is reloaded\r\n                    clearInterval(interval);\r\n                }\r\n            }, 300);\r\n        }\r\n    }\r\n\r\n    const formatDuration = (s) => {\r\n        s = Math.floor(s);\r\n        return (s-(s%=60))/60+(9<s?':':':0')+s;\r\n    }\r\n\r\n    const changeDuration = (value) => {\r\n        if (audio.current && range.current && audio.current.duration !== Infinity) {\r\n            setProgress(value);\r\n            const nextCurrentTime = audio.current.duration / value;\r\n            if (nextCurrentTime !== Infinity && !isNaN(nextCurrentTime)) {\r\n                audio.current.currentTime = parseFloat(nextCurrentTime);\r\n            }\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"chat__voice\">\r\n            <span ref={duration} className=\"chat__voice__duration\">{currentDuration}</span>\r\n            <IconButton onClick={() => playVoice()}>\r\n                {isPlaying ? <PauseIcon style={playIconStyles}/> : <PlayArrowIcon style={playIconStyles}/>}\r\n            </IconButton>\r\n            <input ref={range} dir=\"ltr\" type=\"range\" className=\"chat__voice__range\" min=\"0\" max=\"100\" value={progress} onChange={(e) => changeDuration(e.target.value)} />\r\n            <audio ref={audio} src={data.voiceId ? data.generateVoiceLink() : data.generateAudioLink()} preload=\"none\" onLoadedMetadata={event => console.log(event.target.duration)} />\r\n\r\n            <Avatar className={(data.voiceId !== undefined ?? data.voiceLink !== undefined) ? avatarClasses[data.initials] : avatarClasses.orange + \" audioMessageAvatar\"}>\r\n                {data.voiceId !== undefined ? <span>{data.initials}</span> : <HeadsetIcon/>}\r\n            </Avatar>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ChatMessageVoice;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatMessageTemplate.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\NewMessageClass.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Contacts.js",["330","331","332"],"import React, {useEffect, useRef, useState} from \"react\";\r\nimport '../styles/Contacts.css';\r\nimport axios from \"axios\";\r\nimport {BASE_URL} from \"../Constants\";\r\nimport {addPlusToPhoneNumber, getConfig, getObjLength, preparePhoneNumber, removeWhitespaces} from \"../Helpers\";\r\nimport SearchBar from \"./SearchBar\";\r\nimport {Button, CircularProgress, IconButton, InputAdornment, ListItem, TextField} from \"@material-ui/core\";\r\nimport {ArrowBack} from \"@material-ui/icons\";\r\nimport DialpadIcon from '@material-ui/icons/Dialpad';\r\nimport Contact from \"./Contact\";\r\nimport ContactClass from \"../ContactClass\";\r\nimport {isMobileOnly} from \"react-device-detect\";\r\nimport {useHistory} from \"react-router-dom\";\r\nimport PersonClass from \"../PersonClass\";\r\n\r\nfunction Contacts(props) {\r\n\r\n    const [keyword, setKeyword] = useState(\"\");\r\n    const [contacts, setContacts] = useState({});\r\n    const [persons, setPersons] = useState({});\r\n    const [isLoading, setLoading] = useState(false);\r\n    const [isVerifying, setVerifying] = useState(false);\r\n    const [isPhoneNumberFormVisible, setPhoneNumberFormVisible] = useState(false);\r\n    const [phoneNumber, setPhoneNumber] = useState(\"\")\r\n\r\n    let cancelTokenSourceRef = useRef();\r\n    let verifyPhoneNumberCancelTokenSourceRef = useRef();\r\n\r\n    const history = useHistory();\r\n\r\n    useEffect(() => {\r\n        const handleKey = (event) => {\r\n            if (event.keyCode === 27) { // Escape\r\n                props.onHide();\r\n            }\r\n        }\r\n\r\n        document.addEventListener('keydown', handleKey);\r\n\r\n        // Generate a token\r\n        cancelTokenSourceRef.current = axios.CancelToken.source();\r\n\r\n        verifyPhoneNumberCancelTokenSourceRef.current = axios.CancelToken.source();\r\n\r\n        findContacts();\r\n\r\n        return () => {\r\n            document.removeEventListener('keydown', handleKey);\r\n            cancelTokenSourceRef.current.cancel();\r\n            verifyPhoneNumberCancelTokenSourceRef.current.cancel();\r\n        }\r\n    }, []);\r\n\r\n    let timeout = useRef();\r\n\r\n    useEffect(() => {\r\n        // Generate a token\r\n        cancelTokenSourceRef.current = axios.CancelToken.source();\r\n\r\n        if (keyword?.length > 0) {\r\n            setLoading(true);\r\n\r\n            timeout.current = setTimeout(function () {\r\n                findPersons();\r\n                findContacts();\r\n            }, 500);\r\n        }\r\n\r\n        return () => {\r\n            cancelTokenSourceRef.current.cancel();\r\n            clearTimeout(timeout.current);\r\n            setLoading(false);\r\n        }\r\n    }, [keyword]);\r\n\r\n    const findContacts = () => {\r\n        axios.get(`${BASE_URL}contacts/`, getConfig({\r\n            search: keyword?.trim()\r\n        }, cancelTokenSourceRef.current.token))\r\n            .then((response) => {\r\n                console.log(\"Contacts list\", response.data);\r\n\r\n                const preparedContacts = {};\r\n                response.data.results.forEach((contact, contactIndex) => {\r\n                    preparedContacts[contactIndex] = new ContactClass(contact);\r\n                });\r\n\r\n                setContacts(preparedContacts);\r\n\r\n                setLoading(false);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                window.displayError(error);\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    const findPersons = () => {\r\n        axios.get(`${BASE_URL}persons/`, getConfig({\r\n            search: keyword?.trim()\r\n        }, cancelTokenSourceRef.current.token))\r\n            .then((response) => {\r\n                console.log(\"Persons list\", response.data);\r\n\r\n                const preparedPersons = {};\r\n                response.data.results.forEach((person, personIndex) => {\r\n                    preparedPersons[personIndex] = new PersonClass(person);\r\n                });\r\n\r\n                setPersons(preparedPersons);\r\n\r\n                setLoading(false);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                window.displayError(error);\r\n                setLoading(false);\r\n            });\r\n    }\r\n\r\n    const verifyPhoneNumber = (data, waId) => {\r\n        setVerifying(true);\r\n\r\n        axios.post( `${BASE_URL}contacts/verify/`, {\r\n            blocking: \"wait\",\r\n            contacts: [addPlusToPhoneNumber(waId)],\r\n            force_check: true\r\n        }, getConfig(undefined, verifyPhoneNumberCancelTokenSourceRef.current.token))\r\n            .then((response) => {\r\n                console.log(\"Verify\", response.data);\r\n\r\n                if (response.data.contacts && response.data.contacts.length > 0 && response.data.contacts[0].status === \"valid\") {\r\n                    history.push({\r\n                        pathname: `/main/chat/${waId}`,\r\n                        person: {\r\n                            name: data?.name,\r\n                            initials: data?.initials,\r\n                            avatar: data?.avatar,\r\n                            waId: waId\r\n                        }\r\n                    });\r\n\r\n                    // Hide contacts on mobile\r\n                    if (isMobileOnly) {\r\n                        props.onHide();\r\n                    }\r\n\r\n                } else {\r\n                    window.displayCustomError(\"There is no WhatsApp account connected to this phone number.\");\r\n                }\r\n\r\n                setVerifying(false);\r\n\r\n            })\r\n            .catch((error) => {\r\n                console.log(error);\r\n                window.displayError(error);\r\n\r\n                setVerifying(false);\r\n            });\r\n    }\r\n\r\n    const startChatWithPhoneNumber = () => {\r\n        verifyPhoneNumber(undefined, preparePhoneNumber(phoneNumber));\r\n    }\r\n\r\n    return (\r\n        <div className=\"contacts\">\r\n            <div className=\"contacts__header\">\r\n                <IconButton onClick={props.onHide}>\r\n                    <ArrowBack />\r\n                </IconButton>\r\n\r\n                <h3>New chat</h3>\r\n            </div>\r\n\r\n            <div className=\"contacts__startByPhoneNumberWrapper\">\r\n                <div className=\"contacts__startByPhoneNumber\" onClick={() => setPhoneNumberFormVisible(prevState => !prevState)}>\r\n                    <ListItem button>\r\n                        <div className=\"contacts__startByPhoneNumber__inner\">\r\n                            <DialpadIcon />\r\n                            <span>Start a chat with a phone number</span>\r\n                        </div>\r\n                    </ListItem>\r\n                </div>\r\n\r\n                {isPhoneNumberFormVisible &&\r\n                <div className=\"contacts__startByPhoneNumberWrapper__formWrapper\">\r\n                    <TextField\r\n                        label=\"Phone number\"\r\n                        InputProps={{\r\n                            startAdornment: <InputAdornment position=\"start\">+</InputAdornment>,\r\n                        }}\r\n                        onChange={event => setPhoneNumber(event.target.value)} />\r\n                    <Button color=\"primary\" onClick={startChatWithPhoneNumber}>Start</Button>\r\n                </div>\r\n                }\r\n            </div>\r\n\r\n            <SearchBar\r\n                placeholder=\"Search for contacts\"\r\n                onChange={setKeyword}\r\n                isLoading={isLoading} />\r\n\r\n            <div className=\"contacts__body\">\r\n                {keyword?.length === 0 &&\r\n                <span className=\"contacts__body__hint\">Enter a keyword to start searching for contacts</span>\r\n                }\r\n\r\n                {getObjLength(persons) > 0 &&\r\n                <h3>Persons</h3>\r\n                }\r\n\r\n                { Object.entries(persons).map((person, index) =>\r\n                    <Contact\r\n                        key={index}\r\n                        data={person[1]}\r\n                        verifyPhoneNumber={verifyPhoneNumber}\r\n                        onHide={props.onHide} />\r\n                )}\r\n\r\n                {(keyword?.trim()?.length > 0 && getObjLength(contacts) > 0) &&\r\n                <h3>Contacts</h3>\r\n                }\r\n\r\n                { Object.entries(contacts).map((contact, index) =>\r\n                    <Contact\r\n                        key={index}\r\n                        data={contact[1]}\r\n                        verifyPhoneNumber={verifyPhoneNumber}\r\n                        onHide={props.onHide} />\r\n                )}\r\n\r\n                {isVerifying &&\r\n                <div className=\"contacts__body__loading\">\r\n                    <CircularProgress color=\"inherit\" />\r\n                </div>\r\n                }\r\n\r\n                {(keyword?.length > 0 && getObjLength(contacts) === 0 && !isLoading) &&\r\n                <span className=\"contacts__body__hint\">No contacts found for <span\r\n                    className=\"searchOccurrence\">{keyword}</span></span>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Contacts;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Contact.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\PersonClass.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\ContactClass.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ContactProviderHeader.js",["333","334","335"],"import React from \"react\";\r\nimport '../styles/ContactProviderHeader.css';\r\nimport googleLogo from '../assets/images/ic-google.png';\r\nimport whatsappLogo from '../assets/images/ic-whatsapp.png';\r\nimport hubspotLogo from '../assets/images/ic-hubspot.png';\r\n\r\nfunction ContactProviderHeader(props) {\r\n    return (\r\n        <div className=\"contactProviderHeader\">\r\n            {props.type === \"whatsapp\" &&\r\n            <img src={whatsappLogo} />\r\n            }\r\n            {props.type === \"google\" &&\r\n            <img src={googleLogo} />\r\n            }\r\n            {props.type === \"hubspot\" &&\r\n            <img src={hubspotLogo} />\r\n            }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ContactProviderHeader;","C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\Person.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\StorageHelper.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatAssignment.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatTags.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatTagsList.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatAssignmentEvent.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\ChatTaggingEvent.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\components\\DownloadUnsupportedFile.js",[],"C:\\Users\\Berkay\\PhpstormProjects\\wpclone\\src\\UnsupportedFileClass.js",[],{"ruleId":"336","replacedBy":"337"},{"ruleId":"338","replacedBy":"339"},{"ruleId":"340","severity":1,"message":"341","line":65,"column":8,"nodeType":"342","endLine":65,"endColumn":10,"suggestions":"343"},{"ruleId":"340","severity":1,"message":"344","line":113,"column":8,"nodeType":"342","endLine":113,"endColumn":10,"suggestions":"345"},{"ruleId":"340","severity":1,"message":"346","line":147,"column":8,"nodeType":"342","endLine":147,"endColumn":14,"suggestions":"347"},{"ruleId":"340","severity":1,"message":"348","line":151,"column":8,"nodeType":"342","endLine":151,"endColumn":16,"suggestions":"349"},{"ruleId":"340","severity":1,"message":"350","line":162,"column":8,"nodeType":"342","endLine":162,"endColumn":33,"suggestions":"351"},{"ruleId":"340","severity":1,"message":"352","line":232,"column":8,"nodeType":"342","endLine":232,"endColumn":83,"suggestions":"353"},{"ruleId":"340","severity":1,"message":"354","line":407,"column":8,"nodeType":"342","endLine":407,"endColumn":104,"suggestions":"355"},{"ruleId":"340","severity":1,"message":"356","line":545,"column":8,"nodeType":"342","endLine":545,"endColumn":30,"suggestions":"357"},{"ruleId":"340","severity":1,"message":"358","line":551,"column":8,"nodeType":"342","endLine":551,"endColumn":23,"suggestions":"359"},{"ruleId":"360","severity":1,"message":"361","line":38,"column":28,"nodeType":"362","messageId":"363","endLine":38,"endColumn":45},{"ruleId":"340","severity":1,"message":"364","line":83,"column":8,"nodeType":"342","endLine":83,"endColumn":17,"suggestions":"365"},{"ruleId":"340","severity":1,"message":"366","line":172,"column":8,"nodeType":"342","endLine":172,"endColumn":55,"suggestions":"367"},{"ruleId":"368","severity":1,"message":"369","line":396,"column":40,"nodeType":"370","messageId":"371","endLine":396,"endColumn":42},{"ruleId":"340","severity":1,"message":"348","line":35,"column":8,"nodeType":"342","endLine":35,"endColumn":10,"suggestions":"372"},{"ruleId":"340","severity":1,"message":"373","line":39,"column":8,"nodeType":"342","endLine":39,"endColumn":24,"suggestions":"374"},{"ruleId":"340","severity":1,"message":"375","line":96,"column":8,"nodeType":"342","endLine":96,"endColumn":82,"suggestions":"376"},{"ruleId":"340","severity":1,"message":"377","line":420,"column":8,"nodeType":"342","endLine":420,"endColumn":10,"suggestions":"378"},{"ruleId":"379","severity":1,"message":"380","line":59,"column":48,"nodeType":"381","messageId":"382","endLine":59,"endColumn":66},{"ruleId":"379","severity":1,"message":"383","line":60,"column":50,"nodeType":"381","messageId":"382","endLine":60,"endColumn":66},{"ruleId":"384","severity":1,"message":"385","line":60,"column":56,"nodeType":"381","messageId":"386","endLine":60,"endColumn":57,"suggestions":"387"},{"ruleId":"388","severity":1,"message":"389","line":228,"column":42,"nodeType":"370","messageId":"390","endLine":233,"endColumn":14},{"ruleId":"360","severity":1,"message":"391","line":19,"column":7,"nodeType":"362","messageId":"363","endLine":19,"endColumn":26},{"ruleId":"360","severity":1,"message":"392","line":9,"column":12,"nodeType":"362","messageId":"363","endLine":9,"endColumn":18},{"ruleId":"360","severity":1,"message":"393","line":11,"column":11,"nodeType":"362","messageId":"363","endLine":11,"endColumn":27},{"ruleId":"368","severity":1,"message":"394","line":57,"column":60,"nodeType":"370","messageId":"395","endLine":57,"endColumn":62},{"ruleId":"360","severity":1,"message":"396","line":1,"column":16,"nodeType":"362","messageId":"363","endLine":1,"endColumn":24},{"ruleId":"340","severity":1,"message":"348","line":22,"column":8,"nodeType":"342","endLine":22,"endColumn":10,"suggestions":"397"},{"ruleId":"340","severity":1,"message":"398","line":132,"column":8,"nodeType":"342","endLine":132,"endColumn":10,"suggestions":"399"},{"ruleId":"340","severity":1,"message":"400","line":157,"column":8,"nodeType":"342","endLine":157,"endColumn":26,"suggestions":"401"},{"ruleId":"340","severity":1,"message":"402","line":168,"column":8,"nodeType":"342","endLine":168,"endColumn":24,"suggestions":"403"},{"ruleId":"340","severity":1,"message":"404","line":176,"column":8,"nodeType":"342","endLine":176,"endColumn":14,"suggestions":"405"},{"ruleId":"360","severity":1,"message":"396","line":1,"column":16,"nodeType":"362","messageId":"363","endLine":1,"endColumn":24},{"ruleId":"360","severity":1,"message":"406","line":125,"column":7,"nodeType":"362","messageId":"363","endLine":125,"endColumn":20},{"ruleId":"360","severity":1,"message":"407","line":25,"column":11,"nodeType":"362","messageId":"363","endLine":25,"endColumn":26},{"ruleId":"340","severity":1,"message":"408","line":45,"column":8,"nodeType":"342","endLine":45,"endColumn":10,"suggestions":"409"},{"ruleId":"340","severity":1,"message":"410","line":49,"column":8,"nodeType":"342","endLine":49,"endColumn":14,"suggestions":"411"},{"ruleId":"368","severity":1,"message":"394","line":45,"column":75,"nodeType":"370","messageId":"395","endLine":45,"endColumn":77},{"ruleId":"340","severity":1,"message":"412","line":58,"column":8,"nodeType":"342","endLine":58,"endColumn":10,"suggestions":"413"},{"ruleId":"414","severity":1,"message":"415","line":169,"column":41,"nodeType":"416","endLine":169,"endColumn":81},{"ruleId":"340","severity":1,"message":"417","line":175,"column":8,"nodeType":"342","endLine":175,"endColumn":10,"suggestions":"418"},{"ruleId":"419","severity":1,"message":"420","line":248,"column":21,"nodeType":"416","endLine":248,"endColumn":94},{"ruleId":"414","severity":1,"message":"415","line":6,"column":9,"nodeType":"416","endLine":6,"endColumn":130},{"ruleId":"340","severity":1,"message":"421","line":41,"column":8,"nodeType":"342","endLine":41,"endColumn":10,"suggestions":"422"},{"ruleId":"360","severity":1,"message":"423","line":5,"column":76,"nodeType":"362","messageId":"363","endLine":5,"endColumn":93},{"ruleId":"340","severity":1,"message":"424","line":52,"column":8,"nodeType":"342","endLine":52,"endColumn":10,"suggestions":"425"},{"ruleId":"340","severity":1,"message":"426","line":74,"column":8,"nodeType":"342","endLine":74,"endColumn":17,"suggestions":"427"},{"ruleId":"428","severity":1,"message":"429","line":11,"column":13,"nodeType":"416","endLine":11,"endColumn":39},{"ruleId":"428","severity":1,"message":"429","line":14,"column":13,"nodeType":"416","endLine":14,"endColumn":37},{"ruleId":"428","severity":1,"message":"429","line":17,"column":13,"nodeType":"416","endLine":17,"endColumn":38},"no-native-reassign",["430"],"no-negated-in-lhs",["431"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'errorCase', 'errorMessages', and 'history'. Either include them or remove the dependency array.","ArrayExpression",["432"],"React Hook useEffect has missing dependencies: 'props' and 'waId'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["433"],"React Hook useEffect has missing dependencies: 'getPerson' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["434"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["435"],"React Hook useEffect has missing dependencies: 'currentNewMessages' and 'getNewMessagesCount'. Either include them or remove the dependency array.",["436"],"React Hook useEffect has missing dependencies: 'getMessages' and 'markAsReceived'. Either include them or remove the dependency array.",["437"],"React Hook useEffect has a missing dependency: 'markAsReceived'. Either include it or remove the dependency array.",["438"],"React Hook useEffect has a missing dependency: 'goToMessageId'. Either include it or remove the dependency array.",["439"],"React Hook useEffect has a missing dependency: 'handleChosenFiles'. Either include it or remove the dependency array.",["440"],"no-unused-vars","'setContactResults' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'getChats' and 'searchMessages'. Either include them or remove the dependency array.",["441"],"React Hook useEffect has missing dependencies: 'getChats' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["442"],"array-callback-return","Array.prototype.filter() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd",["443"],"React Hook useEffect has a missing dependency: 'prepareTagNames'. Either include it or remove the dependency array.",["444"],"React Hook useEffect has a missing dependency: 'props.chatData.lastReceivedMessageTimestamp'. Either include it or remove the dependency array.",["445"],"React Hook useEffect has missing dependencies: 'clearUserSession', 'goToChatByWaId', 'location', 'onDisplayError', and 'retrieveCurrentUser'. Either include them or remove the dependency array.",["446"],"no-control-regex","Unexpected control character(s) in regular expression: \\x00.","Literal","unexpected","Unexpected control character(s) in regular expression: \\x0a, \\x0d.","no-useless-escape","Unnecessary escape character: \\s.","unnecessaryEscape",["447","448"],"no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'text', 'text'.","unsafeRefs","'prepareStylesObject' is assigned a value but never used.","'hidden' is assigned a value but never used.","'handleVisibility' is assigned a value but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'useState' is defined but never used.",["449"],"React Hook useEffect has missing dependencies: 'forceUpdate' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["450"],"React Hook useEffect has missing dependencies: 'changePreview' and 'hidePreview'. Either include them or remove the dependency array.",["451"],"React Hook useEffect has a missing dependency: 'chosenFile'. Either include it or remove the dependency array.",["452"],"React Hook useEffect has missing dependencies: 'changePreview' and 'chosenFile'. Either include them or remove the dependency array.",["453"],"'getVideoCover' is assigned a value but never used.","'handleClickOpen' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'cancelVoiceRecord' and 'requestMicrophonePermission'. Either include them or remove the dependency array.",["454"],"React Hook useEffect has a missing dependency: 'cancelVoiceRecord'. Either include it or remove the dependency array.",["455"],"React Hook useEffect has a missing dependency: 'template.components'. Either include it or remove the dependency array.",["456"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXOpeningElement","React Hook useEffect has missing dependencies: 'getBusinessProfile' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["457"],"jsx-a11y/img-redundant-alt","Redundant alt attribute. Screen-readers already announce `img` tags as an image. You don’t need to use the words `image`, `photo,` or `picture` (or any specified custom words) in the alt prop.","React Hook useEffect has missing dependencies: 'data' and 'onChatMessageEvent'. Either include them or remove the dependency array.",["458"],"'removeWhitespaces' is defined but never used.","React Hook useEffect has missing dependencies: 'findContacts' and 'props'. Either include them or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["459"],"React Hook useEffect has missing dependencies: 'findContacts' and 'findPersons'. Either include them or remove the dependency array.",["460"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-global-assign","no-unsafe-negation",{"desc":"461","fix":"462"},{"desc":"463","fix":"464"},{"desc":"465","fix":"466"},{"desc":"467","fix":"468"},{"desc":"469","fix":"470"},{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"475","fix":"476"},{"desc":"477","fix":"478"},{"desc":"479","fix":"480"},{"desc":"481","fix":"482"},{"desc":"483","fix":"484"},{"desc":"485","fix":"486"},{"desc":"487","fix":"488"},{"desc":"489","fix":"490"},{"messageId":"491","fix":"492","desc":"493"},{"messageId":"494","fix":"495","desc":"496"},{"desc":"483","fix":"497"},{"desc":"498","fix":"499"},{"desc":"500","fix":"501"},{"desc":"502","fix":"503"},{"desc":"504","fix":"505"},{"desc":"506","fix":"507"},{"desc":"508","fix":"509"},{"desc":"510","fix":"511"},{"desc":"512","fix":"513"},{"desc":"514","fix":"515"},{"desc":"516","fix":"517"},{"desc":"518","fix":"519"},"Update the dependencies array to be: [errorCase, errorMessages, history]",{"range":"520","text":"521"},"Update the dependencies array to be: [props, waId]",{"range":"522","text":"523"},"Update the dependencies array to be: [getPerson, props, waId]",{"range":"524","text":"525"},"Update the dependencies array to be: [person, props]",{"range":"526","text":"527"},"Update the dependencies array to be: [waId, props.newMessages, getNewMessagesCount, currentNewMessages]",{"range":"528","text":"529"},"Update the dependencies array to be: [messages, isLoaded, isLoadingMoreMessages, isAtBottom, currentNewMessages, markAsReceived, getMessages]",{"range":"530","text":"531"},"Update the dependencies array to be: [waId, messages, isLoaded, isExpired, isAtBottom, currentNewMessages, markAsReceived]",{"range":"532","text":"533"},"Update the dependencies array to be: [messages, isAtBottom, goToMessageId]",{"range":"534","text":"535"},"Update the dependencies array to be: [handleChosenFiles, selectedFiles]",{"range":"536","text":"537"},"Update the dependencies array to be: [getChats, keyword, searchMessages]",{"range":"538","text":"539"},"Update the dependencies array to be: [waId, props.chats, props.newMessages, keyword, props, getChats]",{"range":"540","text":"541"},"Update the dependencies array to be: [props]",{"range":"542","text":"543"},"Update the dependencies array to be: [prepareTagNames, props.chatData]",{"range":"544","text":"545"},"Update the dependencies array to be: [isExpired, props.chatData.isExpired, props.chatData.lastMessageTimestamp, props.chatData.lastReceivedMessageTimestamp]",{"range":"546","text":"547"},"Update the dependencies array to be: [clearUserSession, goToChatByWaId, location, onDisplayError, retrieveCurrentUser]",{"range":"548","text":"549"},"removeEscape",{"range":"550","text":"551"},"Remove the `\\`. This maintains the current functionality.","escapeBackslash",{"range":"552","text":"553"},"Replace the `\\` with `\\\\` to include the actual backslash character.",{"range":"554","text":"543"},"Update the dependencies array to be: [forceUpdate, props]",{"range":"555","text":"556"},"Update the dependencies array to be: [changePreview, chosenFile, data, hidePreview]",{"range":"557","text":"558"},"Update the dependencies array to be: [chosenFile, currentCaption]",{"range":"559","text":"560"},"Update the dependencies array to be: [changePreview, chosenFile, data]",{"range":"561","text":"562"},"Update the dependencies array to be: [cancelVoiceRecord, requestMicrophonePermission]",{"range":"563","text":"564"},"Update the dependencies array to be: [cancelVoiceRecord, waId]",{"range":"565","text":"566"},"Update the dependencies array to be: [template.components]",{"range":"567","text":"568"},"Update the dependencies array to be: [getBusinessProfile, props]",{"range":"569","text":"570"},"Update the dependencies array to be: [data, onChatMessageEvent]",{"range":"571","text":"572"},"Update the dependencies array to be: [findContacts, props]",{"range":"573","text":"574"},"Update the dependencies array to be: [findContacts, findPersons, keyword]",{"range":"575","text":"576"},[2135,2137],"[errorCase, errorMessages, history]",[4089,4091],"[props, waId]",[5003,5009],"[getPerson, props, waId]",[5086,5094],"[person, props]",[5415,5440],"[waId, props.newMessages, getNewMessagesCount, currentNewMessages]",[8420,8495],"[messages, isLoaded, isLoadingMoreMessages, isAtBottom, currentNewMessages, markAsReceived, getMessages]",[15846,15942],"[waId, messages, isLoaded, isExpired, isAtBottom, currentNewMessages, markAsReceived]",[20942,20964],"[messages, isAtBottom, goToMessageId]",[21075,21090],"[handleChosenFiles, selectedFiles]",[2983,2992],"[getChats, keyword, searchMessages]",[6979,7026],"[waId, props.chats, props.newMessages, keyword, props, getChats]",[1299,1301],"[props]",[1365,1381],"[prepareTagNames, props.chatData]",[3083,3157],"[isExpired, props.chatData.isExpired, props.chatData.lastMessageTimestamp, props.chatData.lastReceivedMessageTimestamp]",[15636,15638],"[clearUserSession, goToChatByWaId, location, onDisplayError, retrieveCurrentUser]",[2168,2169],"",[2168,2168],"\\",[803,805],[4488,4490],"[forceUpdate, props]",[5367,5385],"[changePreview, chosenFile, data, hidePreview]",[5668,5684],"[chosenFile, currentCaption]",[5847,5853],"[changePreview, chosenFile, data]",[1451,1453],"[cancelVoiceRecord, requestMicrophonePermission]",[1519,1525],"[cancelVoiceRecord, waId]",[2072,2074],"[template.components]",[5202,5204],"[getBusinessProfile, props]",[1321,1323],"[data, onChatMessageEvent]",[1995,1997],"[findContacts, props]",[2551,2560],"[findContacts, findPersons, keyword]"]